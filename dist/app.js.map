{"version":3,"sources":["webpack:///webpack/bootstrap 9ead1ff7ff5b6a771cbf","webpack:///./node_modules/@polymer/polymer/lib/utils/boot.js","webpack:///./node_modules/@polymer/polymer/lib/utils/case-map.js","webpack:///./node_modules/@polymer/polymer/lib/utils/resolve-url.js","webpack:///./node_modules/@polymer/polymer/lib/utils/mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/settings.js","webpack:///./src/index.js","webpack:///./src/fh-clubs/index.js","webpack:///./node_modules/@polymer/polymer/polymer-element.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","webpack:///./node_modules/@polymer/polymer/lib/utils/style-gather.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-module.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-effects.js","webpack:///./node_modules/@polymer/polymer/lib/utils/path.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","webpack:///./node_modules/@polymer/polymer/lib/utils/async.js","webpack:///./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","webpack:///./src/fh-clubs/props.js","webpack:///./src/fh-clubs/template.html","webpack:///./src/clubs.json","webpack:///./node_modules/@polymer/polymer/lib/mixins/mutable-data.js","webpack:///./node_modules/@polymer/polymer/lib/elements/dom-repeat.js","webpack:///./node_modules/@polymer/polymer/lib/utils/templatize.js","webpack:///./node_modules/@polymer/polymer/lib/utils/debounce.js","webpack:///./node_modules/@polymer/polymer/lib/utils/flush.js"],"names":["window","JSCompiler_renameProperty","prop","obj","Polymer","caseMap","DASH_TO_CAMEL","CAMEL_TO_DASH","dashToCamelCase","dash","indexOf","replace","m","toUpperCase","camelToDashCase","camel","toLowerCase","CSS_URL_RX","ABS_URL","workingURL","resolveDoc","resolveUrl","url","baseURI","test","undefined","u","URL","pathname","href","e","document","location","implementation","createHTMLDocument","base","createElement","head","appendChild","anchor","body","resolveCss","cssText","pre","post","pathFromUrl","substring","lastIndexOf","dedupeId","MixinFunction","prototype","__mixinApplications","__mixinSet","dedupingMixin","mixin","mixinApplications","WeakMap","mixinDedupeId","baseSet","map","extended","get","set","mixinSet","Object","create","settings","useShadow","ShadyDOM","useNativeCSSProperties","Boolean","ShadyCSS","nativeCss","useNativeCustomElements","customElements","polyfillWrapFlushCallback","rootPath","setRootPath","path","sanitizeDOMValue","setSanitizeDOMValue","newSanitizeDOMValue","FengHuangClubs","template","properties","_computeSelectedDay","selected","classes","filter","elem","join","_computeText","data","length","_filter","filtered","_search","markers","_getMarkers","_updateQuery","evt","query","currentTarget","value","i","byName","name","search","byCity","city","days","reduce","a","b","concat","_selectDays","index","parseInt","dataset","daysOpts","slice","assign","console","log","_selectMarker","target","connectedCallback","define","Element","ElementMixin","HTMLElement","polymerElementBase","PropertyEffects","ownPropertiesForClass","klass","hasOwnProperty","__ownProperties","ownObserversForClass","__ownObservers","observers","flattenProperties","flattenedProps","props","p","o","type","propertiesForClass","__classProperties","superCtor","getPrototypeOf","constructor","PolymerElement","propertyDefaultsForClass","__classPropertyDefaults","info","hasClassFinalized","finalizeClassAndSuper","proto","finalize","finalizeClass","__finalized","is","register","finalizeProperties","finalizeObservers","t","innerHTML","cloneNode","_template","createPropertyFromConfig","dynamicFns","_createMethodObserver","allProps","computed","readOnly","_hasReadOnlyEffect","_createComputedProperty","_createReadOnlyProperty","reflectToAttribute","_hasReflectEffect","_createReflectedProperty","notify","_hasNotifyEffect","_createNotifyingProperty","observer","_createPropertyObserver","finalizeTemplate","ext","cssFromModuleImports","cssFromTemplate","style","textContent","content","insertBefore","firstChild","prepareTemplate","_bindTemplate","observedAttributes","list","push","__observedAttributes","DomModule","import","importPath","module","_importPath","assetpath","root","$","_initializeProperties","instanceCount","__polymerFinalized","resolveUrl$0","__proto__","localName","p$","call","_hasAccessor","_setPendingProperty","styleElement","_enableProperties","disconnectedCallback","ready","_stampTemplate","_readyClients","_attachDom","dom","attachShadow","shadowRoot","mode","Error","attributeChangedCallback","old","property","_attributeToProperty","updateStyles","styleSubtree","_parseTemplateContent","templateInfo","nodeInfo","registrations","_regLog","dumpRegistrations","forEach","styleDocument","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","importModule","moduleId","PolymerDomModule","templateWithAssetPath","cssFromModules","moduleIds","modules","trim","split","cssFromModule","_cssText","_cssFromModuleImports","querySelector","warn","e$","querySelectorAll","include","getAttribute","parentNode","removeChild","importDoc","container","lcModules","findModule","id","styleOutsideTemplateCheck","inst","selector","__assetpath","owner","HTMLImports","importForElement","ownerDocument","CaseMap","TYPES","COMPUTE","REFLECT","NOTIFY","PROPAGATE","OBSERVE","READ_ONLY","DataTrigger","DataEffect","PropertyEffectsType","ensureOwnEffectMap","model","effects","protoFx","instFx","Array","runEffects","oldProps","hasPaths","extraArgs","ran","runEffectsForProperty","rootProperty","root$0","fxs","l","fx","lastRun","pathMatchesTrigger","trigger","fn","triggerPath","structured","isAncestor","wildcard","isDescendant","runObserverEffect","methodName","changedProp","__data","dynamicFn","runNotifyEffects","notifyProps","notified","notifyPath","host","__dataHost","_invalidateProperties","eventName","camelToDashCase$0","dispatchNotifyEvent","detail","queueProperty","dispatchEvent","CustomEvent","runNotifyEffect","get$0","handleNotification","event","fromProp","toPath","negate","fromPath","translate","_setPendingPropertyOrPath","runReflectEffect","attrName","_propertyToAttribute","runComputedEffects","changedProps","computeEffects","inputProps","__dataOld","__dataPending","runComputedEffect","result","runMethodEffect","computedProp","methodInfo","__dataHasAccessor","computeLinkedPaths","links","__dataLinkedPaths","link","addBinding","kind","parts","literal","bindings","binding","isCompound","shouldAddListener","listenerEvent","listenerNegate","nodeInfoList","part","compoundIndex","addEffectForBindingPart","dependencies","evaluator","j","parseArg","_addTemplatePropertyEffect","runBindingEffect","nodeList","node","source","_enqueueClient","_evaluateBinding","applyBindingValue","computeBindingValue","_valueToNodeAttribute","_setUnmanagedPropertyToNode","storage","__dataCompoundStorage","setupBindings","setupCompoundStorage","addNotifyListener","literals","addEventListener","createMethodEffect","sig","effectFn","static","args","arg","_addPropertyEffect","context","_methodHost","marshalArgs","apply","emptyArray","IDENT","NUMBER","SQUOTE_STRING","DQUOTE_STRING","STRING","ARGUMENT","ARGUMENTS","ARGUMENT_LIST","BINDING","OPEN_BRACKET","CLOSE_BRACKET","NEGATE","EXPRESSION","bindingRegex","RegExp","literalFromParts","s","parseMethod","expression","match","parseArgs","argList","rawArg","fc","Number","isPath$0","values","v","baseChanged","matches","notifySplices","array","splices","splicesPath","indexSplices","notifySplice","addedCount","removed","object","upper","superClass","propertyEffectsBase","TemplateStamp","PropertyAccessors","__dataClientsReady","__dataPendingClients","__dataToNotify","__dataHasPaths","__dataTemp","__dataClientsInitialized","__computeEffects","__reflectEffects","__notifyEffects","__propagateEffects","__observeEffects","__readOnly","__dataCounter","__templateInfo","PROPERTY_EFFECT_TYPES","hostStack","registerHost","_initializeProtoProperties","_initializeInstanceProperties","effect","_createPropertyAccessor","_removePropertyEffect","idx","splice","_hasPropertyEffect","_hasComputedEffect","shouldNotify","isPathNotification","isArray","set$0","_shouldPropertyChange","isPath","prevProps","_setProperty","__dataReady","_flushProperties","client","_flushClients","__enableOrFlushClients","clients","__dataEnabled","setProperties","setReadOnly","_propertiesChanged","currentProps","_propagatePropertyChanges","propertyEffects","nextTemplateInfo","linkPaths","to","from","normalize","unlinkPaths","items","len","ret","pop","hadLength","start","deleteCount","Math","floor","shift","unshift","propPath","arguments","protectedSetter","attr","addPropertyEffect","createPropertyObserver","createMethodObserver","createNotifyingProperty","createReadOnlyProperty","createReflectedProperty","createComputedProperty","bindTemplate","instanceBinding","_parseTemplate","wasPreBound","last","__templateInfoLast","previousTemplateInfo","hostProps","propEffects","beginHosting","endHosting","nodes","childNodes","n","nextSibling","_removeBoundDom","_parseTemplateNode","noted","nodeType","Node","TEXT_NODE","_parseBindings","_parseTemplateNodeAttribute","origName","setAttribute","removeAttribute","_parseTemplateNestedTemplate","text","lastIndex","exec","customEvent","notifyEvent","colon","signature","stack","stackLen","dotIndex","newBase","toString","isDeep","microtask","nativeProperties","getOwnPropertyNames","saveAccessorValue","__dataProto","createPropertiesForAttributes","a$","__serializing","__dataInvalid","__dataInstanceProps","_ensureAttribute","attribute","hasAttribute","_deserializeValue","str","_serializeValue","Date","JSON","stringify","x","outValue","parse","String","defineProperty","changed","_isPropertyPending","run","AsyncInterface","microtaskCurrHandle","microtaskLastHandle","microtaskCallbacks","microtaskNodeContent","microtaskNode","createTextNode","MutationObserver","microtaskFlush","observe","characterData","cb","setTimeout","timeOut","after","delay","cancel","clearTimeout","bind","animationFrame","requestAnimationFrame","cancelAnimationFrame","idlePeriod","requestIdleCallback","handle","cancelIdleCallback","microTask","callback","templateExtensions","wrapTemplateExtension","replaceChild","attributes","findTemplateNode","parent","parentInfo","parentIndex","applyIdToMap","applyEventListener","events","_addMethodEventListenerToNode","applyTemplateContent","_templateInfo","createNodeEventHandler","handler","outerTemplateInfo","stripWhiteSpace","element","hasInsertionPoint","_parseTemplateChildNodes","hasAttributes","_parseTemplateNodeAttributes","next","childInfo","infoIndex","createDocumentFragment","attrs","_contentForTemplate","HTMLTemplateElement","decorate","importNode","__noInsertionPoint","_addEventListenerToNode","_removeEventListenerFromNode","removeEventListener","key","lat","long","label","DATA","mutablePropertyChange","mutableData","isObject","shouldChange","MutableData","OptionalMutableData","_mutablePropertyChange","TemplateInstanceBase","domRepeatBase","DomRepeat","as","indexAs","itemsIndexAs","sort","Function","renderedItemCount","initialCount","targetFramerate","_targetFrameTime","__instances","__limit","Infinity","__pool","__renderDebouncer","__itemsIdxToInstIdx","__chunkCount","__lastChunkTime","__sortFn","__filterFn","__observePaths","__ctor","__isDetached","__detachInstance","__attachInstance","__ensureTemplatized","disconnect","__render","childList","instanceProps","Templatize","templatize","parentModel","forwardHostProp","i$","notifyInstanceProp","__getMethodHost","__sortChanged","methodHost","__debounceRender","__filterChanged","__computeFrameTime","rate","ceil","__initializeChunking","performance","now","__tryRenderChunk","__requestRenderChunk","__renderChunk","currChunkTime","ratio","round","__observeChanged","__itemsChanged","change","__handleItemPath","__handleObservedPaths","paths","Debouncer","debounce","enqueueDebouncer","render","flush","__applyFullRefresh","_setRenderedItemCount","bubbles","composed","isntIdxToItemsIdx","itemsIdxToInstIdx","instIdx","limit","min","itemIdx","item","__insertInstance","__detachAndRemoveInstance","children","el","__stampInstance","beforeRow","beforeNode","_showHideChildren","hidden","itemsPath","dot","itemsIdx","itemSubPath","itemPath","itemForElement","instance","modelForElement","indexForElement","newInstance","HTMLTemplateElementExtension","writable","DataTemplate","MutableDataTemplate","upgradeTemplate","setPrototypeOf","_configureProperties","__templatizeInstance","__templatizeOwner","__hideTemplateChildren__","options","__templatizeOptions","iprop","hprop","__hostProps","templateHost","hide","c","__polymerTextContent__","__polymerDisplay__","display","__parentModel","MutableTemplateInstanceBase","findMethodHost","createTemplatizerClass","addNotifyEffects","addPropagateEffects","userForwardHostProp","templatizeTemplateClass","TemplatizedTemplate","createForwardHostPropEffect","hostProp","userNotifyInstanceProp","createNotifyInstancePropEffect","createNotifyHostPropEffect","instProp","notifyHostProp","baseClass","templatizeInstanceClass","TemplateInstance","AsyncModule","_asyncModule","_callback","_timer","setConfig","asyncModule","isActive","debouncer","debouncerQueue","flushDebouncers","didFlush","shadyDOM","debouncers","ScopingShim"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DAA,OAAOC,yBAAP,GAAmC,UAASC,IAAT,EAAeC,GAAf,EAAoB;AAAE,SAAOD,IAAP;AAAc,CAAvE;;AAEA;AACA,IAAIE,OAAJ,C;;;;;;;;;;;;ACHA;;AAEA,MAAMC,UAAU,EAAhB;AACA,MAAMC,gBAAgB,SAAtB;AACA,MAAMC,gBAAgB,UAAtB;;AAEO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,SAAOJ,QAAQI,IAAR,MACLJ,QAAQI,IAAR,IAAgBA,KAAKC,OAAL,CAAa,GAAb,IAAoB,CAApB,GAAwBD,IAAxB,GAA+BA,KAAKE,OAAL,CAAaL,aAAb,EAC5CM,CAAD,IAAOA,EAAE,CAAF,EAAKC,WAAL,EADsC,CAD1C,CAAP;AAKD;;AAEM,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,SAAOV,QAAQU,KAAR,MACLV,QAAQU,KAAR,IAAiBA,MAAMJ,OAAN,CAAcJ,aAAd,EAA6B,KAA7B,EAAoCS,WAApC,EADZ,CAAP;AAGD,C;;;;;;;;;;;;AClBD;;AAEA,IAAIC,aAAa,qBAAjB;AACA,IAAIC,UAAU,yBAAd;AACA,IAAIC,UAAJ;AACA,IAAIC,UAAJ;AACA;;;;;;;;AAQA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,OAAzB,EAAkC;AAChC,MAAID,OAAOJ,QAAQM,IAAR,CAAaF,GAAb,CAAX,EAA8B;AAC5B,WAAOA,GAAP;AACD;AACD;AACA,MAAIH,eAAeM,SAAnB,EAA8B;AAC5BN,iBAAa,KAAb;AACA,QAAI;AACF,YAAMO,IAAI,IAAIC,GAAJ,CAAQ,GAAR,EAAa,UAAb,CAAV;AACAD,QAAEE,QAAF,GAAa,OAAb;AACAT,mBAAcO,EAAEG,IAAF,KAAW,gBAAzB;AACD,KAJD,CAIE,OAAOC,CAAP,EAAU;AACV;AACD;AACF;AACD,MAAI,CAACP,OAAL,EAAc;AACZA,cAAUQ,SAASR,OAAT,IAAoBvB,OAAOgC,QAAP,CAAgBH,IAA9C;AACD;AACD,MAAIV,UAAJ,EAAgB;AACd,WAAQ,IAAIQ,GAAJ,CAAQL,GAAR,EAAaC,OAAb,CAAD,CAAwBM,IAA/B;AACD;AACD;AACA,MAAI,CAACT,UAAL,EAAiB;AACfA,iBAAaW,SAASE,cAAT,CAAwBC,kBAAxB,CAA2C,MAA3C,CAAb;AACAd,eAAWe,IAAX,GAAkBf,WAAWgB,aAAX,CAAyB,MAAzB,CAAlB;AACAhB,eAAWiB,IAAX,CAAgBC,WAAhB,CAA4BlB,WAAWe,IAAvC;AACAf,eAAWmB,MAAX,GAAoBnB,WAAWgB,aAAX,CAAyB,GAAzB,CAApB;AACAhB,eAAWoB,IAAX,CAAgBF,WAAhB,CAA4BlB,WAAWmB,MAAvC;AACD;AACDnB,aAAWe,IAAX,CAAgBN,IAAhB,GAAuBN,OAAvB;AACAH,aAAWmB,MAAX,CAAkBV,IAAlB,GAAyBP,GAAzB;AACA,SAAOF,WAAWmB,MAAX,CAAkBV,IAAlB,IAA0BP,GAAjC;AAED;;AAED;;;;;;;;;AASA,SAASmB,UAAT,CAAoBC,OAApB,EAA6BnB,OAA7B,EAAsC;AACpC,SAAOmB,QAAQ/B,OAAR,CAAgBM,UAAhB,EAA4B,UAASL,CAAT,EAAY+B,GAAZ,EAAiBrB,GAAjB,EAAsBsB,IAAtB,EAA4B;AAC7D,WAAOD,MAAM,IAAN,GACLtB,WAAWC,IAAIX,OAAJ,CAAY,OAAZ,EAAqB,EAArB,CAAX,EAAqCY,OAArC,CADK,GAEL,IAFK,GAEEqB,IAFT;AAGD,GAJM,CAAP;AAKD;;AAED;;;;;;;;AAQA,SAASC,WAAT,CAAqBvB,GAArB,EAA0B;AACxB,SAAOA,IAAIwB,SAAJ,CAAc,CAAd,EAAiBxB,IAAIyB,WAAJ,CAAgB,GAAhB,IAAuB,CAAxC,CAAP;AACD;;AAED;AACA;;;;;;;;;;AC/EA;;AAEA;AACA,IAAIC,WAAW,CAAf;;AAEA;;;;AAIA,SAASC,aAAT,GAAwB,CAAE;AAC1B;AACAA,cAAcC,SAAd,CAAwBC,mBAAxB;AACA;AACAF,cAAcC,SAAd,CAAwBE,UAAxB;;AAEO,MAAMC,gBAAgB,UAASC,KAAT,EAAgB;AAC3C,MAAIC,oBAAoB,6BAA8BD,KAAD,CAAQH,mBAA7D;AACA,MAAI,CAACI,iBAAL,EAAwB;AACtBA,wBAAoB,IAAIC,OAAJ,EAApB;AACA,iCAA8BF,KAAD,CAAQH,mBAAR,GAA8BI,iBAA9B;AAC9B;AACD;AACA,MAAIE,gBAAgBT,UAApB;AACA,WAASK,aAAT,CAAuBlB,IAAvB,EAA6B;AAC3B,QAAIuB,UAAU,6BAA8BvB,IAAD,CAAOiB,UAAlD;AACA,QAAIM,WAAWA,QAAQD,aAAR,CAAf,EAAuC;AACrC,aAAOtB,IAAP;AACD;AACD,QAAIwB,MAAMJ,iBAAV;AACA,QAAIK,WAAWD,IAAIE,GAAJ,CAAQ1B,IAAR,CAAf;AACA,QAAI,CAACyB,QAAL,EAAe;AACbA,iBAAW,wBAAyBN,KAAD,CAAQnB,IAAR,CAAnC;AACAwB,UAAIG,GAAJ,CAAQ3B,IAAR,EAAcyB,QAAd;AACD;AACD;AACA;AACA;AACA,QAAIG,WAAWC,OAAOC,MAAP,EAAc,6BAA8BL,QAAD,CAAWR,UAAX,IAAyBM,OAAzB,IAAoC,IAA/E,CAAf;AACAK,aAASN,aAAT,IAA0B,IAA1B;AACA,iCAA8BG,QAAD,CAAWR,UAAX,GAAwBW,QAAxB;AAC7B,WAAOH,QAAP;AACD;;AAED,SAAOP,aAAP;AACD,CA7BM,C;;;;;;;;;;;;;;;ACfP;AACA;;AAEA;;;;;AAKA,MAAMa,WAAWzC,aAAa,EAA9B;AACO,MAAM0C,YAAY,CAAEnE,OAAOoE,QAA3B;AAAA;AAAA;AACA,MAAMC,yBAAyBC,QAAQ,CAACtE,OAAOuE,QAAR,IAAoBvE,OAAOuE,QAAP,CAAgBC,SAA5C,CAA/B;AAAA;AAAA;AACA,MAAMC,0BAA0B,CAAEzE,OAAO0E,cAAP,CAAsBC,yBAAxD;AAAA;AAAA;AACP;;AAEA;;;;;;;;;;AAUA,IAAIC,WAAWnD,aACb,4EAAAoB,CAAYd,SAASR,OAAT,IAAoBvB,OAAOgC,QAAP,CAAgBH,IAAhD,CADF;;AAGA;;AAEO,MAAMgD,cAAc,UAASC,IAAT,EAAe;AACxCF,aAAWE,IAAX;AACD,CAFM;AAAA;AAAA;;AAIP;;;;;;;;;;;;;;;;;AAiBA,IAAIC,mBAAmBtD,SAAvB;;AAEA;;AAEO,MAAMuD,sBAAsB,UAASC,mBAAT,EAA8B;AAC/DF,qBAAmBE,mBAAnB;AACD,CAFM,C;;;;;;;;;;;;;;;;;;ACtDP;;;;;;;;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,cAAN,SAA6B,iFAA7B,CAA4C;;AAE1C,aAAWC,QAAX,GAAsB;AAAE,WAAO,sDAAP;AAAkB;;AAE1C,aAAWC,UAAX,GAAwB;AAAE,WAAO,uDAAP;AAAc;;AAExCC,sBAAoBC,QAApB,EAA6B;AAC3B,UAAMC,UAAU,CAAC,QAAD,EAAW,cAAX,EAA2B,gBAA3B,CAAhB;AACA,WAAOD,WACHC,QAAQC,MAAR,CAAeC,QAAQ;AAAC,aAAOA,SAAS,gBAAhB;AAAiC,KAAzD,EAA2DC,IAA3D,CAAgE,GAAhE,CADG,GAEHH,QAAQG,IAAR,CAAa,GAAb,CAFJ;AAGD;;AAEDC,eAAaC,IAAb,EAAkB;AAChB,WAAQ,eAAcA,KAAKC,MAAO,kDAAlC;AACD;;AAEDC,YAAS;AACP,SAAKC,QAAL,GAAgB,KAAKC,OAAL,CAAa,KAAKJ,IAAlB,CAAhB;AACA,SAAKK,OAAL,GAAe,KAAKC,WAAL,CAAiB,KAAKH,QAAtB,CAAf;AACD;;AAEDI,eAAaC,GAAb,EAAiB;AACf,SAAKC,KAAL,GAAaD,IAAIE,aAAJ,CAAkBC,KAA/B;AACA,SAAKT,OAAL;AACD;;AAEDE,UAAQJ,IAAR,EAAa;AACX,QAAG,KAAKS,KAAL,CAAWR,MAAd,EAAqB;AACnB,YAAMQ,QAAQ,KAAKA,KAAL,CAAWrF,WAAX,EAAd;AACA,aAAO4E,KAAKJ,MAAL,CAAY,CAAC1D,CAAD,EAAG0E,CAAH,KAAS;AAC1B,cAAMC,SAAS3E,EAAE4E,IAAF,CAAO1F,WAAP,GAAqB2F,MAArB,CAA4BN,KAA5B,IAAqC,CAAC,CAArD;AACA,cAAMO,SAAS9E,EAAE+E,IAAF,CAAO7F,WAAP,GAAqB2F,MAArB,CAA4BN,KAA5B,IAAqC,CAAC,CAArD;AACA,eAAOI,UAAUG,MAAjB;AACD,OAJM,CAAP;AAKD,KAPD,MAOO;AACL,aAAOhB,IAAP;AACD;AACF;;AAEDM,cAAYN,IAAZ,EAAiB;AACf,UAAMG,WAAWH,KAAKjC,GAAL,CAAS,CAAC7B,CAAD,EAAG0E,CAAH,KAAS;AACjC1E,QAAEgF,IAAF,GAAShF,EAAEgF,IAAF,CAAOnD,GAAP,CAAY8B,IAAD,IAAU;AAC5BA,aAAKiB,IAAL,GAAY5E,EAAE4E,IAAd;AACA,eAAOjB,IAAP;AACD,OAHQ,CAAT,GAGK,IAHL;AAIA,aAAO;AACL,gBAAQ3D,EAAEgF,IADL;AAEL,gBAAQhF,EAAE4E;AAFL,OAAP;AAID,KATgB,EASdlB,MATc,CASP,CAAC1D,CAAD,EAAG0E,CAAH,KAAS;AACjB,aAAO1E,EAAEgF,IAAT;AACD,KAXgB,CAAjB;AAYA,QAAGlB,KAAKC,MAAL,GAAc,CAAjB,EAAmB;AACjB,aAAOE,SAASgB,MAAT,CAAgB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC9B,cAAMC,SAASF,EAAEF,IAAF,GAASE,EAAEF,IAAF,CAAOI,MAAP,CAAcD,EAAEH,IAAhB,CAAT,GAAiCE,EAAEE,MAAF,CAASD,EAAEH,IAAX,CAAhD;AACA,eAAOI,MAAP;AACD,OAHM,CAAP;AAID,KALD,MAKO;AACL,aAAOnB,SAAS,CAAT,IAAcA,SAAS,CAAT,EAAYe,IAA1B,GAAiCf,QAAxC;AACD;AACF;;AAEDoB,cAAYf,GAAZ,EAAgB;AACd,UAAMgB,QAAQC,SAASjB,IAAIE,aAAJ,CAAkBgB,OAAlB,CAA0BF,KAAnC,CAAd;AACA,UAAM9B,WAAW,CAAC,KAAKiC,QAAL,CAAcH,KAAd,EAAqB9B,QAAvC;AACA,SAAKiC,QAAL,GAAgB,CACd,GAAG,KAAKA,QAAL,CAAcC,KAAd,CAAoB,CAApB,EAAsBJ,KAAtB,CADW,EAEdpD,OAAOyD,MAAP,CAAc,EAAd,EAAkB,KAAKF,QAAL,CAAcH,KAAd,CAAlB,EAAwC,EAAC9B,UAAUA,QAAX,EAAxC,CAFc,EAGd,GAAG,KAAKiC,QAAL,CAAcC,KAAd,CAAoBJ,QAAQ,CAA5B,CAHW,CAAhB;AAKAM,YAAQC,GAAR,CAAYP,KAAZ,EAAkB9B,QAAlB,EAA4B,KAAKiC,QAAjC;AACD;;AAEDK,gBAAcxB,GAAd,EAAkB;AAChB,UAAMM,OAAON,IAAIyB,MAAJ,CAAWP,OAAX,CAAmBZ,IAAhC;AACA,SAAKL,KAAL,GAAaK,IAAb;AACA,SAAKZ,OAAL;AACD;;AAEDgC,sBAAmB;AACjB,UAAMA,iBAAN;AACA,SAAKhC,OAAL;AACD;AAnFyC;;AAsF5CpB,eAAeqD,MAAf,CAAsB,UAAtB,EAAkC7C,cAAlC,E;;;;;;;;;AC7FA;;AAEA;;;;;;;;;;;;;;;;AAgBA,MAAM8C,UAAU,0FAAAC,CAAaC,WAAb,CAAhB;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMD,eAAe,8EAAA5E,CAAclB,QAAQ;;AAEhD;;;;;AAKA,QAAMgG,qBAAqB,qFAAAC,CAAgBjG,IAAhB,CAA3B;;AAEA,MAAI9B,UAAU,gDAAd;;AAEA;;;;;;;;;;AAUA,WAASgI,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,QAAI,CAACA,MAAMC,cAAN,CACHtI,0BAA0B,iBAA1B,EAA6CqI,KAA7C,CADG,CAAL,EACwD;AACtDA,YAAME,eAAN,GACEF,MAAMC,cAAN,CAAqBtI,0BAA0B,YAA1B,EAAwCqI,KAAxC,CAArB;AACA,4CAAwCA,KAAD,CAAQlD,UAD/C,GAC4D,EAF9D;AAGD;AACD,WAAOkD,MAAME,eAAb;AACD;;AAED;;;;;;;;AAQA,WAASC,oBAAT,CAA8BH,KAA9B,EAAqC;AACnC,QAAI,CAACA,MAAMC,cAAN,CACHtI,0BAA0B,gBAA1B,EAA4CqI,KAA5C,CADG,CAAL,EACuD;AACrDA,YAAMI,cAAN,GACEJ,MAAMC,cAAN,CAAqBtI,0BAA0B,WAA1B,EAAuCqI,KAAvC,CAArB;AACA,4CAAwCA,KAAD,CAAQK,SAD/C,GAC2D,EAF7D;AAGD;AACD,WAAOL,MAAMI,cAAb;AACD;;AAED;;;;;;;;;AASA,WAASE,iBAAT,CAA2BC,cAA3B,EAA2CC,KAA3C,EAAkD;AAChD,SAAK,IAAIC,CAAT,IAAcD,KAAd,EAAqB;AACnB,UAAIE,IAAIF,MAAMC,CAAN,CAAR;AACA,UAAI,OAAOC,CAAP,IAAY,UAAhB,EAA4B;AAC1BA,YAAI,EAAEC,MAAMD,CAAR,EAAJ;AACD;AACDH,qBAAeE,CAAf,IAAoBC,CAApB;AACD;AACD,WAAOH,cAAP;AACD;;AAED;;;;;;;;;;;AAWA,WAASK,kBAAT,CAA4BZ,KAA5B,EAAmC;AACjC,QAAI,CAACA,MAAMC,cAAN,CACHtI,0BAA0B,mBAA1B,EAA+CqI,KAA/C,CADG,CAAL,EAC0D;AACxDA,YAAMa,iBAAN,GACAP,kBAAkB,EAAlB,EAAsBP,sBAAsBC,KAAtB,CAAtB,CADA;AAEA,UAAIc,YAAYpF,OAAOqF,cAAP,CAAsBf,MAAMpF,SAA5B,EAAuCoG,WAAvD;AACA,UAAIF,UAAUlG,SAAV,YAA+BqG,cAAnC,EAAmD;AACjDjB,cAAMa,iBAAN,GAA0BnF,OAAOyD,MAAP,CACxBzD,OAAOC,MAAP,CAAciF,oBAAmB,sCAAuCE,SAA1D,CAAd,CADwB,EAExBd,MAAMa,iBAFkB,CAA1B;AAGD;AACF;AACD,WAAOb,MAAMa,iBAAb;AACD;;AAED;;;;;;;;;;;AAWA,WAASK,wBAAT,CAAkClB,KAAlC,EAAyC;AACvC,QAAI,CAACA,MAAMC,cAAN,CACHtI,0BAA0B,yBAA1B,EAAqDqI,KAArD,CADG,CAAL,EACgE;AAC9DA,YAAMmB,uBAAN,GAAgC,IAAhC;AACA,UAAIX,QAAQI,mBAAmBZ,KAAnB,CAAZ;AACA,WAAK,IAAIS,CAAT,IAAcD,KAAd,EAAqB;AACnB,YAAIY,OAAOZ,MAAMC,CAAN,CAAX;AACA,YAAI,WAAWW,IAAf,EAAqB;AACnBpB,gBAAMmB,uBAAN,GAAgCnB,MAAMmB,uBAAN,IAAiC,EAAjE;AACAnB,gBAAMmB,uBAAN,CAA8BV,CAA9B,IAAmCW,IAAnC;AACD;AACF;AACF;AACD,WAAOpB,MAAMmB,uBAAb;AACD;;AAED;;;;;;;AAOA,WAASE,iBAAT,CAA2BrB,KAA3B,EAAkC;AAChC,WAAOA,MAAMC,cAAN,CAAqBtI,0BAA0B,aAA1B,EAAyCqI,KAAzC,CAArB,CAAP;AACD;;AAED;;;;;;;;AAQA,WAASsB,qBAAT,CAA+BtB,KAA/B,EAAsC;AACpC,QAAIuB,QAAQ,sCAAwCvB,KAAD,CAAQpF,SAA3D;AACA,QAAIkG,YAAYpF,OAAOqF,cAAP,CAAsBQ,KAAtB,EAA6BP,WAA7C;AACA,QAAIF,UAAUlG,SAAV,YAA+BqG,cAAnC,EAAmD;AACjDH,gBAAUU,QAAV;AACD;AACDC,kBAAczB,KAAd;AACD;;AAED;;;;;;;;;AASA,WAASyB,aAAT,CAAuBzB,KAAvB,EAA8B;AAC5BA,UAAM0B,WAAN,GAAoB,IAApB;AACA,QAAIH,QAAQ,sCAAwCvB,KAAD,CAAQpF,SAA3D;AACA,QAAIoF,MAAMC,cAAN,CACFtI,0BAA0B,IAA1B,EAAgCqI,KAAhC,CADE,KACyCA,MAAM2B,EADnD,EACuD;AACrDC,eAASL,KAAT;AACD;AACD,QAAIf,QAAQT,sBAAsBC,KAAtB,CAAZ;AACA,QAAIQ,KAAJ,EAAW;AACTqB,yBAAmBN,KAAnB,EAA0Bf,KAA1B;AACD;AACD,QAAIH,YAAYF,qBAAqBH,KAArB,CAAhB;AACA,QAAIK,SAAJ,EAAe;AACbyB,wBAAkBP,KAAlB,EAAyBlB,SAAzB,EAAoCG,KAApC;AACD;AACD;AACA,QAAI3D,WAAW,sCAAwCmD,KAAD,CAAQnD,QAA9D;AACA,QAAIA,QAAJ,EAAc;AACZ,UAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,YAAIkF,IAAItI,SAASK,aAAT,CAAuB,UAAvB,CAAR;AACAiI,UAAEC,SAAF,GAAcnF,QAAd;AACAA,mBAAWkF,CAAX;AACD,OAJD,MAIO;AACLlF,mBAAWA,SAASoF,SAAT,CAAmB,IAAnB,CAAX;AACD;AACDV,YAAMW,SAAN,GAAkBrF,QAAlB;AACD;AACF;;AAED;;;;;;;;;;;AAWA,WAASgF,kBAAT,CAA4BN,KAA5B,EAAmCzE,UAAnC,EAA+C;AAC7C,SAAK,IAAI2D,CAAT,IAAc3D,UAAd,EAA0B;AACxBqF,+BAAyBZ,KAAzB,EAAgCd,CAAhC,EAAmC3D,WAAW2D,CAAX,CAAnC,EAAkD3D,UAAlD;AACD;AACF;;AAED;;;;;;;;;;;;AAYA,WAASgF,iBAAT,CAA2BP,KAA3B,EAAkClB,SAAlC,EAA6C+B,UAA7C,EAAyD;AACvD,SAAK,IAAIlE,IAAE,CAAX,EAAcA,IAAImC,UAAU9C,MAA5B,EAAoCW,GAApC,EAAyC;AACvCqD,YAAMc,qBAAN,CAA4BhC,UAAUnC,CAAV,CAA5B,EAA0CkE,UAA1C;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA,WAASD,wBAAT,CAAkCZ,KAAlC,EAAyCnD,IAAzC,EAA+CgD,IAA/C,EAAqDkB,QAArD,EAA+D;AAC7D;AACA,QAAIlB,KAAKmB,QAAT,EAAmB;AACjBnB,WAAKoB,QAAL,GAAgB,IAAhB;AACD;AACD;AACA;AACA;AACA;AACA;AACA,QAAIpB,KAAKmB,QAAL,IAAkB,CAAChB,MAAMkB,kBAAN,CAAyBrE,IAAzB,CAAvB,EAAuD;AACrDmD,YAAMmB,uBAAN,CAA8BtE,IAA9B,EAAoCgD,KAAKmB,QAAzC,EAAmDD,QAAnD;AACD;AACD,QAAIlB,KAAKoB,QAAL,IAAiB,CAACjB,MAAMkB,kBAAN,CAAyBrE,IAAzB,CAAtB,EAAsD;AACpDmD,YAAMoB,uBAAN,CAA8BvE,IAA9B,EAAoC,CAACgD,KAAKmB,QAA1C;AACD;AACD,QAAInB,KAAKwB,kBAAL,IAA2B,CAACrB,MAAMsB,iBAAN,CAAwBzE,IAAxB,CAAhC,EAA+D;AAC7DmD,YAAMuB,wBAAN,CAA+B1E,IAA/B;AACD;AACD,QAAIgD,KAAK2B,MAAL,IAAe,CAACxB,MAAMyB,gBAAN,CAAuB5E,IAAvB,CAApB,EAAkD;AAChDmD,YAAM0B,wBAAN,CAA+B7E,IAA/B;AACD;AACD;AACA,QAAIgD,KAAK8B,QAAT,EAAmB;AACjB3B,YAAM4B,uBAAN,CAA8B/E,IAA9B,EAAoCgD,KAAK8B,QAAzC,EAAmDZ,SAASlB,KAAK8B,QAAd,CAAnD;AACD;AACF;;AAED;;;;;;;;;;;;;;AAcA,WAASE,gBAAT,CAA0B7B,KAA1B,EAAiC1E,QAAjC,EAA2C5D,OAA3C,EAAoD0I,EAApD,EAAwD0B,GAAxD,EAA6D;AAC3D;AACA,QAAIjJ,UACF,4FAAAkJ,CAAqB3B,EAArB,IACA,uFAAA4B,CAAgB1G,QAAhB,EAA0B5D,OAA1B,CAFF;AAGA,QAAImB,OAAJ,EAAa;AACX,UAAIoJ,QAAQ/J,SAASK,aAAT,CAAuB,OAAvB,CAAZ;AACA0J,YAAMC,WAAN,GAAoBrJ,OAApB;AACAyC,eAAS6G,OAAT,CAAiBC,YAAjB,CAA8BH,KAA9B,EAAqC3G,SAAS6G,OAAT,CAAiBE,UAAtD;AACD;AACD,QAAIlM,OAAOuE,QAAX,EAAqB;AACnBvE,aAAOuE,QAAP,CAAgB4H,eAAhB,CAAgChH,QAAhC,EAA0C8E,EAA1C,EAA8C0B,GAA9C;AACD;AACD9B,UAAMuC,aAAN,CAAoBjH,QAApB;AACD;;AAED;;;;;;AAMA,QAAMoE,cAAN,SAA6BpB,kBAA7B,CAAgD;;AAE9C;;;;;;;;AAQA,eAAWkE,kBAAX,GAAgC;AAC9B,UAAI,CAAC,KAAK9D,cAAL,CAAoBtI,0BAA0B,sBAA1B,EAAkD,IAAlD,CAApB,CAAL,EAAmF;AACjF,YAAIqM,OAAO,EAAX;AACA,YAAIlH,aAAa8D,mBAAmB,IAAnB,CAAjB;AACA,aAAK,IAAIhJ,IAAT,IAAiBkF,UAAjB,EAA6B;AAC3BkH,eAAKC,IAAL,CAAU,2EAAAzL,CAAgBZ,IAAhB,CAAV;AACD;AACD,aAAKsM,oBAAL,GAA4BF,IAA5B;AACD;AACD,aAAO,KAAKE,oBAAZ;AACD;;AAED;;;;;;;;;;;;AAYA,WAAO1C,QAAP,GAAkB;AAChB,UAAI,CAACH,kBAAkB,IAAlB,CAAL,EAA8B;AAC5BC,8BAAsB,IAAtB;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,eAAWzE,QAAX,GAAsB;AACpB,UAAI,CAAC,KAAKoD,cAAL,CAAoBtI,0BAA0B,WAA1B,EAAuC,IAAvC,CAApB,CAAL,EAAwE;AACtE,aAAKuK,SAAL,GAAiB,0EAAAiC,IAAa,0EAAAA,CAAUC,MAAV;AAC5B,6CAAuC,IAAD,CAAOzC,EADjB,EACqB,UADrB,CAAb;AAEf;AACA;AACA;AACAjG,eAAOqF,cAAP,EAAsB,qCAAuC,IAAD,CAAOnG,SAAnE,EAA8EoG,WAA9E,CAA0FnE,QAL5F;AAMD;AACD,aAAO,KAAKqF,SAAZ;AACD;;AAED;;;;;;;;;;;AAWA,eAAWmC,UAAX,GAAwB;AACtB,UAAI,CAAC,KAAKpE,cAAL,CAAoBtI,0BAA0B,aAA1B,EAAyC,IAAzC,CAApB,CAAL,EAA0E;AACtE,cAAM2M,SAAS,0EAAAH,IAAa,0EAAAA,CAAUC,MAAV,EAAiB,sCAAwC,IAAD,CAAOzC,EAA/D,CAA5B;AACA,aAAK4C,WAAL,GAAmBD,SAASA,OAAOE,SAAhB,GAA4B,MAC/C9I,OAAOqF,cAAP,EAAsB,qCAAuC,IAAD,CAAOnG,SAAnE,EAA8EoG,WAA9E,CAA0FqD,UAD1F;AAEH;AACD,aAAO,KAAKE,WAAZ;AACD;;AAEDvD,kBAAc;AACZ;AACA;AACA,WAAKkB,SAAL;AACA;AACA,WAAKqC,WAAL;AACA;AACA,WAAKjI,QAAL;AACA;AACA,WAAK+H,UAAL;AACA;AACA,WAAKI,IAAL;AACA;AACA,WAAKC,CAAL;AACD;;AAED;;;;;;;;;;;AAWAC,4BAAwB;AACtBC;AACA,WAAK5D,WAAL,CAAiBQ,QAAjB;AACA,YAAM6C,aAAa,KAAKrD,WAAL,CAAiBqD,UAApC;AACA;AACA;AACA,UAAI,KAAKnC,SAAL,IAAkB,CAAC,KAAKA,SAAL,CAAe2C,kBAAtC,EAA0D;AACxD,aAAK3C,SAAL,CAAe2C,kBAAf,GAAoC,IAApC;AACA,cAAM5L,UACJoL,aAAa,iFAAAS,CAAaT,UAAb,CAAb,GAAwC,EAD1C;AAEAjB,0BAAiB,8BAA+B,KAAK2B,SAArD,EAAiE,KAAK7C,SAAtE,EAAiFjJ,OAAjF;AACE,iCAA0B,IAAD,CAAO+L,SADlC;AAED;AACD,YAAML,qBAAN;AACA;AACA,WAAKrI,QAAL,GAAgB,oEAAhB;AACA,WAAK+H,UAAL,GAAkBA,UAAlB;AACA;AACA,UAAIY,KAAK/D,yBAAyB,KAAKF,WAA9B,CAAT;AACA,UAAI,CAACiE,EAAL,EAAS;AACP;AACD;AACD,WAAK,IAAIxE,CAAT,IAAcwE,EAAd,EAAkB;AAChB,YAAI7D,OAAO6D,GAAGxE,CAAH,CAAX;AACA;AACA;AACA;AACA,YAAI,CAAC,KAAKR,cAAL,CAAoBQ,CAApB,CAAL,EAA6B;AAC3B,cAAIxC,QAAQ,OAAOmD,KAAKnD,KAAZ,IAAqB,UAArB,GACVmD,KAAKnD,KAAL,CAAWiH,IAAX,CAAgB,IAAhB,CADU,GAEV9D,KAAKnD,KAFP;AAGA;AACA;AACA,cAAI,KAAKkH,YAAL,CAAkB1E,CAAlB,CAAJ,EAA0B;AACxB,iBAAK2E,mBAAL,CAAyB3E,CAAzB,EAA4BxC,KAA5B,EAAmC,IAAnC;AACD,WAFD,MAEO;AACL,iBAAKwC,CAAL,IAAUxC,KAAV;AACD;AACF;AACF;AACF;;AAED;;;;;;;;;;AAUAuB,wBAAoB;AAClB,UAAI9H,OAAOuE,QAAP,IAAmB,KAAKiG,SAA5B,EAAuC;AACrCxK,eAAOuE,QAAP,CAAgBoJ,YAAhB,EAA6B,2BAA4B,IAAzD;AACD;AACD,WAAKC,iBAAL;AACD;;AAED;;;;AAIAC,2BAAuB,CAAE;;AAEzB;;;;;AAKAC,YAAQ;AACN,UAAI,KAAKtD,SAAT,EAAoB;AAClB,aAAKuC,IAAL,GAAY,KAAKgB,cAAL,CAAoB,KAAKvD,SAAzB,CAAZ;AACA,aAAKwC,CAAL,GAAS,KAAKD,IAAL,CAAUC,CAAnB;AACD;AACD,YAAMc,KAAN;AACD;;AAED;;;;;;;;;AASAE,oBAAgB;AACd,UAAI,KAAKxD,SAAT,EAAoB;AAClB,aAAKuC,IAAL,GAAY,KAAKkB,UAAL,EAAgB,8BAA+B,KAAKlB,IAApD,CAAZ;AACD;AACD;AACA;AACA;AACA;AACA,YAAMiB,aAAN;AACD;;AAGD;;;;;;;;;;;AAWAC,eAAWC,GAAX,EAAgB;AACd,UAAI,KAAKC,YAAT,EAAuB;AACrB,YAAID,GAAJ,EAAS;AACP,cAAI,CAAC,KAAKE,UAAV,EAAsB;AACpB,iBAAKD,YAAL,CAAkB,EAACE,MAAM,MAAP,EAAlB;AACD;AACD,eAAKD,UAAL,CAAgB9L,WAAhB,CAA4B4L,GAA5B;AACA,iBAAO,KAAKE,UAAZ;AACD;AACD,eAAO,IAAP;AACD,OATD,MASO;AACL,cAAM,IAAIE,KAAJ,CAAU;AACd;AACF,mEAFgB,GAGhB,6DAHM,CAAN;AAID;AACF;;AAED;;;;;;;;;;;;;;AAcAC,6BAAyB7H,IAAzB,EAA+B8H,GAA/B,EAAoCjI,KAApC,EAA2C;AACzC,UAAIiI,QAAQjI,KAAZ,EAAmB;AACjB,YAAIkI,WAAWpO,QAAQG,eAAR,CAAwBkG,IAAxB,CAAf;AACA,YAAIuC,OAAOC,mBAAmB,KAAKI,WAAxB,EAAqCmF,QAArC,EAA+CxF,IAA1D;AACA,YAAI,CAAC,KAAK8B,kBAAL,CAAwB0D,QAAxB,CAAL,EAAwC;AACtC,eAAKC,oBAAL,CAA0BhI,IAA1B,EAAgCH,KAAhC,EAAuC0C,IAAvC;AACD;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;AAiBA0F,iBAAavJ,UAAb,EAAyB;AACvB,UAAIpF,OAAOuE,QAAX,EAAqB;AACnBvE,eAAOuE,QAAP,CAAgBqK,YAAhB,EAA6B,2BAA4B,IAAzD,EAAgExJ,UAAhE;AACD;AACF;;AAED;;;;;;;;;;;AAWA/D,eAAWC,GAAX,EAAgBa,IAAhB,EAAsB;AACpB,UAAI,CAACA,IAAD,IAAS,KAAKwK,UAAlB,EAA8B;AAC5BxK,eAAO,iFAAAiL,CAAa,KAAKT,UAAlB,CAAP;AACD;AACD,aAAO,iFAAAS,CAAa9L,GAAb,EAAkBa,IAAlB,CAAP;AACD;;AAED;;;;;;;;;AASA,WAAO0M,qBAAP,CAA6B1J,QAA7B,EAAuC2J,YAAvC,EAAqDC,QAArD,EAA+D;AAC7DD,mBAAapE,UAAb,GAA0BoE,aAAapE,UAAb,IAA2BxB,mBAAmB,IAAnB,CAArD;AACA,aAAO,MAAM2F,qBAAN,CAA4B1J,QAA5B,EAAsC2J,YAAtC,EAAoDC,QAApD,CAAP;AACD;;AArV6C;;AAyVhD,SAAOxF,cAAP;AACD,CAnrB2B,CAArB;AAAA;AAAA;;AAqrBA,IAAI2D,gBAAgB,CAApB;AACA,MAAM8B,gBAAgB,EAAtB;AAAA;AAAA;;AAEA,SAASC,OAAT,CAAiB/L,SAAjB,EAA4B;AACjCwE,UAAQC,GAAR,CAAY,MAAMzE,UAAU+G,EAAhB,GAAqB,eAAjC;AACD;;AAEM,SAASC,QAAT,CAAkBhH,SAAlB,EAA6B;AAClC8L,gBAAczC,IAAd,CAAmBrJ,SAAnB;AACAzB,eAAawN,QAAQ/L,SAAR,CAAb;AACD;;AAEM,SAASgM,iBAAT,GAA6B;AAClCF,gBAAcG,OAAd,CAAsBF,OAAtB;AACD;;AAEM,MAAMN,eAAe,UAAS7F,KAAT,EAAgB;AAC1C,MAAI9I,OAAOuE,QAAX,EAAqB;AACnBvE,WAAOuE,QAAP,CAAgB6K,aAAhB,CAA8BtG,KAA9B;AACD;AACF,CAJM,C;;;;;;;;;;;;;;;AC/sBP;;AAEA,MAAMuG,6BAA6B,6BAAnC;AACA,MAAMC,eAAe,SAArB;;AAEA,SAASC,YAAT,CAAsBC,QAAtB,EAAgC;AAC9B,QAAM,wBAAyBC,mBAAmB/K,eAAeb,GAAf,CAAmB,YAAnB,CAAlD;AACA,MAAI,CAAC4L,gBAAL,EAAuB;AACrB,WAAO,IAAP;AACD;AACD,SAAOA,iBAAiB/C,MAAjB,CAAwB8C,QAAxB,CAAP;AACD;;AAED;AACA,IAAIE,qBAAJ,C,CAA2B;;AAEpB,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACxC,MAAIC,UAAUD,UAAUE,IAAV,GAAiBC,KAAjB,CAAuB,KAAvB,CAAd;AACA,MAAIrN,UAAU,EAAd;AACA,OAAK,IAAI8D,IAAE,CAAX,EAAcA,IAAIqJ,QAAQhK,MAA1B,EAAkCW,GAAlC,EAAuC;AACrC9D,eAAWsN,cAAcH,QAAQrJ,CAAR,CAAd,CAAX;AACD;AACD,SAAO9D,OAAP;AACD;;AAEM,SAASsN,aAAT,CAAuBR,QAAvB,EAAiC;AACtC,MAAI5O,IAAI2O,aAAaC,QAAb,CAAR;AACA,MAAI5O,KAAKA,EAAEqP,QAAF,KAAexO,SAAxB,EAAmC;AACjC;AACA,QAAIiB,UAAUwN,sBAAsBtP,CAAtB,CAAd;AACA;AACA,QAAIyJ,IAAIzJ,EAAEuP,aAAF,CAAgB,UAAhB,CAAR;AACA,QAAI9F,CAAJ,EAAO;AACL3H,iBAAWmJ,gBAAgBxB,CAAhB,EAAmB,oCAAqCzJ,CAAD,CAAIkM,SAA3D,CAAX;AACD;AACDlM,MAAEqP,QAAF,GAAavN,WAAW,IAAxB;AACD;AACD,MAAI,CAAC9B,CAAL,EAAQ;AACN8G,YAAQ0I,IAAR,CAAa,2CAAb,EAA0DZ,QAA1D;AACD;AACD,SAAO5O,KAAKA,EAAEqP,QAAP,IAAmB,EAA1B;AACD;;AAEM,SAASpE,eAAT,CAAyB1G,QAAzB,EAAmC5D,OAAnC,EAA4C;AACjD,MAAImB,UAAU,EAAd;AACA;AACA,MAAI2N,KAAKlL,SAAS6G,OAAT,CAAiBsE,gBAAjB,CAAkC,OAAlC,CAAT;AACA,OAAK,IAAI9J,IAAE,CAAX,EAAcA,IAAI6J,GAAGxK,MAArB,EAA6BW,GAA7B,EAAkC;AAChC,QAAI1E,IAAIuO,GAAG7J,CAAH,CAAR;AACA;AACA;AACA,QAAI+J,UAAUzO,EAAE0O,YAAF,CAAelB,YAAf,CAAd;AACA,QAAIiB,OAAJ,EAAa;AACX7N,iBAAWiN,eAAeY,OAAf,CAAX;AACD;AACDzO,MAAE2O,UAAF,CAAaC,WAAb,CAAyB5O,CAAzB;AACAY,eAAWnB,UACT,2EAAAkB,CAAWX,EAAEiK,WAAb,EAA0BxK,OAA1B,CADS,GAC4BO,EAAEiK,WADzC;AAED;AACD,SAAOrJ,OAAP;AACD;;AAEM,SAASkJ,oBAAT,CAA8B4D,QAA9B,EAAwC;AAC7C,MAAI5O,IAAI2O,aAAaC,QAAb,CAAR;AACA,SAAO5O,IAAIsP,sBAAsBtP,CAAtB,CAAJ,GAA+B,EAAtC;AACD;;AAEM,SAASsP,qBAAT,CAA+BtD,MAA/B,EAAuC;AAC5C,MAAIlK,UAAU,EAAd;AACA,MAAI6K,KAAKX,OAAO0D,gBAAP,CAAwBjB,0BAAxB,CAAT;AACA,OAAK,IAAI7I,IAAE,CAAX,EAAcA,IAAI+G,GAAG1H,MAArB,EAA6BW,GAA7B,EAAkC;AAChC,QAAIuC,IAAIwE,GAAG/G,CAAH,CAAR;AACA,QAAIuC,EAAE2D,MAAN,EAAc;AACZ,UAAIiE,YAAY5H,EAAE2D,MAAlB;AACA;AACA;AACA;AACA,UAAIkE,YAAYD,UAAUnO,IAAV,GAAiBmO,UAAUnO,IAA3B,GAAkCmO,SAAlD;AACAjO,iBACE,2EAAAD,CAAWmO,UAAU7E,WAArB,EACE4E,UAAUpP,OADZ,CADF;AAGD;AACF;AACD,SAAOmB,OAAP;AACD,C;;;;;;;;;;;ACpFD;AACA;;AAEA,IAAImN,UAAU,EAAd;AACA,IAAIgB,YAAY,EAAhB;AACA,SAASC,UAAT,CAAoBC,EAApB,EAAwB;AACtB,SAAOlB,QAAQkB,EAAR,KAAeF,UAAUE,GAAG/P,WAAH,EAAV,CAAtB;AACD;;AAED,SAASgQ,yBAAT,CAAmCC,IAAnC,EAAyC;AACvC,MAAIA,KAAKd,aAAL,CAAmB,OAAnB,CAAJ,EAAiC;AAC/BzI,YAAQ0I,IAAR,CAAa,0CAAb,EAAyDa,KAAKF,EAA9D;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,MAAMtE,SAAN,SAAwBvE,WAAxB,CAAoC;;AAElC,aAAWmE,kBAAX,GAAgC;AAAE,WAAO,CAAC,IAAD,CAAP;AAAgB;;AAElD;;;;;;;;AAQA,SAAOK,MAAP,CAAcqE,EAAd,EAAkBG,QAAlB,EAA4B;AAC1B,QAAIH,EAAJ,EAAQ;AACN,UAAInQ,IAAIkQ,WAAWC,EAAX,CAAR;AACA,UAAInQ,KAAKsQ,QAAT,EAAmB;AACjB,eAAOtQ,EAAEuP,aAAF,CAAgBe,QAAhB,CAAP;AACD;AACD,aAAOtQ,CAAP;AACD;AACD,WAAO,IAAP;AACD;;AAED2N,2BAAyB7H,IAAzB,EAA+B8H,GAA/B,EAAoCjI,KAApC,EAA2C;AACzC,QAAIiI,QAAQjI,KAAZ,EAAmB;AACjB,WAAK2D,QAAL;AACD;AACF;;AAED;;;;;;;;;;;AAWA,MAAI4C,SAAJ,GAAgB;AACd;AACA,QAAI,CAAC,KAAKqE,WAAV,EAAuB;AACrB;AACA;AACA,YAAMC,QAAQpR,OAAOqR,WAAP,IAAsBA,YAAYC,gBAAlC,GACZD,YAAYC,gBAAZ,CAA6B,IAA7B,KAAsCvP,QAD1B,GACqC,KAAKwP,aADxD;AAEA,YAAMjQ,MAAM,iFAAAD,CACV,KAAKmP,YAAL,CAAkB,WAAlB,KAAkC,EADxB,EAC4BY,MAAM7P,OADlC,CAAZ;AAEA,WAAK4P,WAAL,GAAmB,kFAAAtO,CAAYvB,GAAZ,CAAnB;AACD;AACD,WAAO,KAAK6P,WAAZ;AACD;;AAED;;;;;;AAMAjH,WAAS6G,EAAT,EAAa;AACXA,SAAKA,MAAM,KAAKA,EAAhB;AACA,QAAIA,EAAJ,EAAQ;AACN,WAAKA,EAAL,GAAUA,EAAV;AACA;AACA;AACA;AACAlB,cAAQkB,EAAR,IAAc,IAAd;AACAF,gBAAUE,GAAG/P,WAAH,EAAV,IAA8B,IAA9B;AACAgQ,gCAA0B,IAA1B;AACD;AACF;AAvEiC;;AA0EpCvE,UAAUvJ,SAAV,CAAoB,SAApB,IAAiC2M,OAAjC;;AAEAnL,eAAeqD,MAAf,CAAsB,YAAtB,EAAoC0E,SAApC;;;;;;;;;;;;;;;;;ACrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM+E,UAAU,gDAAhB;;AAEA;AACA;AACA,IAAIxO,WAAW,CAAf;;AAEA;;;;AAIA,MAAMyO,QAAQ;AACZC,WAAS,kBADG;AAEZC,WAAS,kBAFG;AAGZC,UAAQ,iBAHI;AAIZC,aAAW,oBAJC;AAKZC,WAAS,kBALG;AAMZC,aAAW;AANC,CAAd;;AASA;;;;;;;AAOA,IAAIC,WAAJ,C,CAAiB;;AAEjB;;;;;;;AAOA,IAAIC,UAAJ,C,CAAgB;;AAEhB,IAAIC,mBAAJ,C,CAAyB;;AAEzB;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmCnJ,IAAnC,EAAyC;AACvC,MAAIoJ,UAAUD,MAAMnJ,IAAN,CAAd;AACA,MAAI,CAACoJ,OAAL,EAAc;AACZA,cAAUD,MAAMnJ,IAAN,IAAc,EAAxB;AACD,GAFD,MAEO,IAAI,CAACmJ,MAAM7J,cAAN,CAAqBU,IAArB,CAAL,EAAiC;AACtCoJ,cAAUD,MAAMnJ,IAAN,IAAcjF,OAAOC,MAAP,CAAcmO,MAAMnJ,IAAN,CAAd,CAAxB;AACA,SAAK,IAAIF,CAAT,IAAcsJ,OAAd,EAAuB;AACrB,UAAIC,UAAUD,QAAQtJ,CAAR,CAAd;AACA,UAAIwJ,SAASF,QAAQtJ,CAAR,IAAayJ,MAAMF,QAAQzM,MAAd,CAA1B;AACA,WAAK,IAAIW,IAAE,CAAX,EAAcA,IAAE8L,QAAQzM,MAAxB,EAAgCW,GAAhC,EAAqC;AACnC+L,eAAO/L,CAAP,IAAY8L,QAAQ9L,CAAR,CAAZ;AACD;AACF;AACF;AACD,SAAO6L,OAAP;AACD;;AAED;;AAEA;;;;;;;;;;;;;AAaA,SAASI,UAAT,CAAoBxB,IAApB,EAA0BoB,OAA1B,EAAmCvJ,KAAnC,EAA0C4J,QAA1C,EAAoDC,QAApD,EAA8DC,SAA9D,EAAyE;AACvE,MAAIP,OAAJ,EAAa;AACX,QAAIQ,MAAM,KAAV;AACA,QAAI9B,KAAK/N,UAAT;AACA,SAAK,IAAI9C,IAAT,IAAiB4I,KAAjB,EAAwB;AACtB,UAAIgK,sBAAsB7B,IAAtB,EAA4BoB,OAA5B,EAAqCtB,EAArC,EAAyC7Q,IAAzC,EAA+C4I,KAA/C,EAAsD4J,QAAtD,EAAgEC,QAAhE,EAA0EC,SAA1E,CAAJ,EAA0F;AACxFC,cAAM,IAAN;AACD;AACF;AACD,WAAOA,GAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAASC,qBAAT,CAA+B7B,IAA/B,EAAqCoB,OAArC,EAA8CrP,QAA9C,EAAwD9C,IAAxD,EAA8D4I,KAA9D,EAAqE4J,QAArE,EAA+EC,QAA/E,EAAyFC,SAAzF,EAAoG;AAClG,MAAIC,MAAM,KAAV;AACA,MAAIE,eAAeJ,WAAW,oEAAAK,CAAO9S,IAAP,CAAX,GAA0BA,IAA7C;AACA,MAAI+S,MAAMZ,QAAQU,YAAR,CAAV;AACA,MAAIE,GAAJ,EAAS;AACP,SAAK,IAAIzM,IAAE,CAAN,EAAS0M,IAAED,IAAIpN,MAAf,EAAuBsN,EAA5B,EAAiC3M,IAAE0M,CAAH,KAAUC,KAAGF,IAAIzM,CAAJ,CAAb,CAAhC,EAAsDA,GAAtD,EAA2D;AACzD,UAAI,CAAC,CAAC2M,GAAGzJ,IAAJ,IAAYyJ,GAAGzJ,IAAH,CAAQ0J,OAAR,KAAoBpQ,QAAjC,MACC,CAAC2P,QAAD,IAAaU,mBAAmBnT,IAAnB,EAAyBiT,GAAGG,OAA5B,CADd,CAAJ,EACyD;AACvD,YAAIH,GAAGzJ,IAAP,EAAa;AACXyJ,aAAGzJ,IAAH,CAAQ0J,OAAR,GAAkBpQ,QAAlB;AACD;AACDmQ,WAAGI,EAAH,CAAMtC,IAAN,EAAY/Q,IAAZ,EAAkB4I,KAAlB,EAAyB4J,QAAzB,EAAmCS,GAAGzJ,IAAtC,EAA4CiJ,QAA5C,EAAsDC,SAAtD;AACAC,cAAM,IAAN;AACD;AACF;AACF;AACD,SAAOA,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;AAkBA,SAASQ,kBAAT,CAA4BvO,IAA5B,EAAkCwO,OAAlC,EAA2C;AACzC,MAAIA,OAAJ,EAAa;AACX,QAAIE,cAAcF,QAAQ5M,IAA1B;AACA,WAAQ8M,eAAe1O,IAAhB,IACJwO,QAAQG,UAAR,IAAsB,0EAAAC,CAAWF,WAAX,EAAwB1O,IAAxB,CADlB,IAEJwO,QAAQK,QAAR,IAAoB,4EAAAC,CAAaJ,WAAb,EAA0B1O,IAA1B,CAFvB;AAGD,GALD,MAKO;AACL,WAAO,IAAP;AACD;AACF;;AAED;;;;;;;;;;;;;AAaA,SAAS+O,iBAAT,CAA2B5C,IAA3B,EAAiCxC,QAAjC,EAA2C3F,KAA3C,EAAkD4J,QAAlD,EAA4DhJ,IAA5D,EAAkE;AAChE,MAAI6J,KAAKtC,KAAKvH,KAAKoK,UAAV,CAAT;AACA,MAAIC,cAAcrK,KAAK+E,QAAvB;AACA,MAAI8E,EAAJ,EAAQ;AACNA,OAAG/F,IAAH,CAAQyD,IAAR,EAAcA,KAAK+C,MAAL,CAAYD,WAAZ,CAAd,EAAwCrB,SAASqB,WAAT,CAAxC;AACD,GAFD,MAEO,IAAI,CAACrK,KAAKuK,SAAV,EAAqB;AAC1BvM,YAAQ0I,IAAR,CAAa,sBAAsB1G,KAAKoK,UAA3B,GAAwC,eAArD;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;AAiBA,SAASI,gBAAT,CAA0BjD,IAA1B,EAAgCkD,WAAhC,EAA6CrL,KAA7C,EAAoD4J,QAApD,EAA8DC,QAA9D,EAAwE;AACtE;AACA,MAAIM,MAAMhC,KAAKQ,MAAMG,MAAX,CAAV;AACA,MAAIwC,QAAJ;AACA,MAAIrD,KAAK/N,UAAT;AACA;AACA,OAAK,IAAI9C,IAAT,IAAiBiU,WAAjB,EAA8B;AAC5B,QAAIA,YAAYjU,IAAZ,CAAJ,EAAuB;AACrB,UAAI+S,OAAOH,sBAAsB7B,IAAtB,EAA4BgC,GAA5B,EAAiClC,EAAjC,EAAqC7Q,IAArC,EAA2C4I,KAA3C,EAAkD4J,QAAlD,EAA4DC,QAA5D,CAAX,EAAkF;AAChFyB,mBAAW,IAAX;AACD,OAFD,MAEO,IAAIzB,YAAY0B,WAAWpD,IAAX,EAAiB/Q,IAAjB,EAAuB4I,KAAvB,CAAhB,EAA+C;AACpDsL,mBAAW,IAAX;AACD;AACF;AACF;AACD;AACA;AACA;AACA,MAAIE,IAAJ;AACA,MAAIF,aAAaE,OAAOrD,KAAKsD,UAAzB,KAAwCD,KAAKE,qBAAjD,EAAwE;AACtEF,SAAKE,qBAAL;AACD;AACF;;AAED;;;;;;;;;;AAUA,SAASH,UAAT,CAAoBpD,IAApB,EAA0BnM,IAA1B,EAAgCgE,KAAhC,EAAuC;AACrC,MAAIiK,eAAe,oEAAAC,CAAOlO,IAAP,CAAnB;AACA,MAAIiO,iBAAiBjO,IAArB,EAA2B;AACzB,QAAI2P,YAAY,2EAAAC,CAAkB3B,YAAlB,IAAkC,UAAlD;AACA4B,wBAAoB1D,IAApB,EAA0BwD,SAA1B,EAAqC3L,MAAMhE,IAAN,CAArC,EAAkDA,IAAlD;AACA,WAAO,IAAP;AACD;AACD,SAAO,KAAP;AACD;;AAED;;;;;;;;;;;;AAYA,SAAS6P,mBAAT,CAA6B1D,IAA7B,EAAmCwD,SAAnC,EAA8ClO,KAA9C,EAAqDzB,IAArD,EAA2D;AACzD,MAAI8P,SAAS;AACXrO,WAAOA,KADI;AAEXsO,mBAAe;AAFJ,GAAb;AAIA,MAAI/P,IAAJ,EAAU;AACR8P,WAAO9P,IAAP,GAAcA,IAAd;AACD;AACD,6BAA4BmM,IAAD,CAAO6D,aAAP,CAAqB,IAAIC,WAAJ,CAAgBN,SAAhB,EAA2B,EAAEG,MAAF,EAA3B,CAArB;AAC5B;;AAED;;;;;;;;;;;;;;AAcA,SAASI,eAAT,CAAyB/D,IAAzB,EAA+BxC,QAA/B,EAAyC3F,KAAzC,EAAgD4J,QAAhD,EAA0DhJ,IAA1D,EAAgEiJ,QAAhE,EAA0E;AACxE,MAAII,eAAeJ,WAAW,oEAAAK,CAAOvE,QAAP,CAAX,GAA8BA,QAAjD;AACA,MAAI3J,OAAOiO,gBAAgBtE,QAAhB,GAA2BA,QAA3B,GAAsC,IAAjD;AACA,MAAIlI,QAAQzB,OAAO,mEAAAmQ,CAAMhE,IAAN,EAAYnM,IAAZ,CAAP,GAA2BmM,KAAK+C,MAAL,CAAYvF,QAAZ,CAAvC;AACA,MAAI3J,QAAQyB,UAAU9E,SAAtB,EAAiC;AAC/B8E,YAAQuC,MAAM2F,QAAN,CAAR,CAD+B,CACL;AAC3B;AACDkG,sBAAoB1D,IAApB,EAA0BvH,KAAK+K,SAA/B,EAA0ClO,KAA1C,EAAiDzB,IAAjD;AACD;;AAED;;;;;;;;;;;;;;;;AAgBA,SAASoQ,kBAAT,CAA4BC,KAA5B,EAAmClE,IAAnC,EAAyCmE,QAAzC,EAAmDC,MAAnD,EAA2DC,MAA3D,EAAmE;AACjE,MAAI/O,KAAJ;AACA,MAAIqO,SAAS,qBAAsBO,MAAMP,MAAzC;AACA,MAAIW,WAAWX,UAAUA,OAAO9P,IAAhC;AACA,MAAIyQ,QAAJ,EAAc;AACZF,aAAS,yEAAAG,CAAUJ,QAAV,EAAoBC,MAApB,EAA4BE,QAA5B,CAAT;AACAhP,YAAQqO,UAAUA,OAAOrO,KAAzB;AACD,GAHD,MAGO;AACLA,YAAQ4O,MAAMtN,MAAN,CAAauN,QAAb,CAAR;AACD;AACD7O,UAAQ+O,SAAS,CAAC/O,KAAV,GAAkBA,KAA1B;AACA,MAAI,CAAC0K,KAAKQ,MAAMM,SAAX,CAAD,IAA0B,CAACd,KAAKQ,MAAMM,SAAX,EAAsBsD,MAAtB,CAA/B,EAA8D;AAC5D,QAAIpE,KAAKwE,yBAAL,CAA+BJ,MAA/B,EAAuC9O,KAAvC,EAA8C,IAA9C,EAAoDjC,QAAQiR,QAAR,CAApD,MACE,CAACX,MAAD,IAAW,CAACA,OAAOC,aADrB,CAAJ,EACyC;AACvC5D,WAAKuD,qBAAL;AACD;AACF;AACF;;AAED;;;;;;;;;;;;AAYA,SAASkB,gBAAT,CAA0BzE,IAA1B,EAAgCxC,QAAhC,EAA0C3F,KAA1C,EAAiD4J,QAAjD,EAA2DhJ,IAA3D,EAAiE;AAC/D,MAAInD,QAAQ0K,KAAK+C,MAAL,CAAYvF,QAAZ,CAAZ;AACA,MAAI,4EAAJ,EAAsB;AACpBlI,YAAQ,oFAAAxB,CAAiBwB,KAAjB,EAAwBmD,KAAKiM,QAA7B,EAAuC,WAAvC,EAAoD,mBAAoB1E,IAAxE,CAAR;AACD;AACDA,OAAK2E,oBAAL,CAA0BnH,QAA1B,EAAoC/E,KAAKiM,QAAzC,EAAmDpP,KAAnD;AACD;;AAED;;;;;;;;;;;;;;;;AAgBA,SAASsP,kBAAT,CAA4B5E,IAA5B,EAAkC6E,YAAlC,EAAgDpD,QAAhD,EAA0DC,QAA1D,EAAoE;AAClE,MAAIoD,iBAAiB9E,KAAKQ,MAAMC,OAAX,CAArB;AACA,MAAIqE,cAAJ,EAAoB;AAClB,QAAIC,aAAaF,YAAjB;AACA,WAAOrD,WAAWxB,IAAX,EAAiB8E,cAAjB,EAAiCC,UAAjC,EAA6CtD,QAA7C,EAAuDC,QAAvD,CAAP,EAAyE;AACvE3O,aAAOyD,MAAP,CAAciL,QAAd,EAAwBzB,KAAKgF,SAA7B;AACAjS,aAAOyD,MAAP,CAAcqO,YAAd,EAA4B7E,KAAKiF,aAAjC;AACAF,mBAAa/E,KAAKiF,aAAlB;AACAjF,WAAKiF,aAAL,GAAqB,IAArB;AACD;AACF;AACF;;AAED;;;;;;;;;;;;AAYA,SAASC,iBAAT,CAA2BlF,IAA3B,EAAiCxC,QAAjC,EAA2C3F,KAA3C,EAAkD4J,QAAlD,EAA4DhJ,IAA5D,EAAkE;AAChE,MAAI0M,SAASC,gBAAgBpF,IAAhB,EAAsBxC,QAAtB,EAAgC3F,KAAhC,EAAuC4J,QAAvC,EAAiDhJ,IAAjD,CAAb;AACA,MAAI4M,eAAe5M,KAAK6M,UAAxB;AACA,MAAItF,KAAKuF,iBAAL,IAA0BvF,KAAKuF,iBAAL,CAAuBF,YAAvB,CAA9B,EAAoE;AAClErF,SAAKvD,mBAAL,CAAyB4I,YAAzB,EAAuCF,MAAvC,EAA+C,IAA/C;AACD,GAFD,MAEO;AACLnF,SAAKqF,YAAL,IAAqBF,MAArB;AACD;AACF;;AAED;;;;;;;;;AASA,SAASK,kBAAT,CAA4BxF,IAA5B,EAAkCnM,IAAlC,EAAwCyB,KAAxC,EAA+C;AAC7C,MAAImQ,QAAQzF,KAAK0F,iBAAjB;AACA,MAAID,KAAJ,EAAW;AACT,QAAIE,IAAJ;AACA,SAAK,IAAI5P,CAAT,IAAc0P,KAAd,EAAqB;AACnB,UAAIzP,IAAIyP,MAAM1P,CAAN,CAAR;AACA,UAAI,4EAAA4M,CAAa5M,CAAb,EAAgBlC,IAAhB,CAAJ,EAA2B;AACzB8R,eAAO,yEAAApB,CAAUxO,CAAV,EAAaC,CAAb,EAAgBnC,IAAhB,CAAP;AACAmM,aAAKwE,yBAAL,CAA+BmB,IAA/B,EAAqCrQ,KAArC,EAA4C,IAA5C,EAAkD,IAAlD;AACD,OAHD,MAGO,IAAI,4EAAAqN,CAAa3M,CAAb,EAAgBnC,IAAhB,CAAJ,EAA2B;AAChC8R,eAAO,yEAAApB,CAAUvO,CAAV,EAAaD,CAAb,EAAgBlC,IAAhB,CAAP;AACAmM,aAAKwE,yBAAL,CAA+BmB,IAA/B,EAAqCrQ,KAArC,EAA4C,IAA5C,EAAkD,IAAlD;AACD;AACF;AACF;AACF;;AAED;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAASsQ,UAAT,CAAoBvN,WAApB,EAAiCwF,YAAjC,EAA+CC,QAA/C,EAAyD+H,IAAzD,EAA+DjP,MAA/D,EAAuEkP,KAAvE,EAA8EC,OAA9E,EAAuF;AACrF;AACAjI,WAASkI,QAAT,GAAoBlI,SAASkI,QAAT,IAAqB,EAAzC;AACA,MAAI,cAAeC,UAAU,EAAEJ,IAAF,EAAQjP,MAAR,EAAgBkP,KAAhB,EAAuBC,OAAvB,EAAgCG,YAAaJ,MAAMlR,MAAN,KAAiB,CAA9D,EAA7B;AACAkJ,WAASkI,QAAT,CAAkB1K,IAAlB,CAAuB2K,OAAvB;AACA;AACA,MAAIE,kBAAkBF,OAAlB,CAAJ,EAAgC;AAC9B,QAAI,EAAC/B,KAAD,EAAQG,MAAR,KAAkB4B,QAAQH,KAAR,CAAc,CAAd,CAAtB;AACAG,YAAQG,aAAR,GAAwBlC,SAAU3D,QAAQ1Q,eAAR,CAAwB+G,MAAxB,IAAkC,UAApE;AACAqP,YAAQI,cAAR,GAAyBhC,MAAzB;AACD;AACD;AACA,MAAIlO,QAAQ0H,aAAayI,YAAb,CAA0B1R,MAAtC;AACA,OAAK,IAAIW,IAAE,CAAX,EAAcA,IAAE0Q,QAAQH,KAAR,CAAclR,MAA9B,EAAsCW,GAAtC,EAA2C;AACzC,QAAIgR,OAAON,QAAQH,KAAR,CAAcvQ,CAAd,CAAX;AACAgR,SAAKC,aAAL,GAAqBjR,CAArB;AACAkR,4BAAwBpO,WAAxB,EAAqCwF,YAArC,EAAmDoI,OAAnD,EAA4DM,IAA5D,EAAkEpQ,KAAlE;AACD;AACF;;AAED;;;;;;;;;;;AAWA,SAASsQ,uBAAT,CAAiCpO,WAAjC,EAA8CwF,YAA9C,EAA4DoI,OAA5D,EAAqEM,IAArE,EAA2EpQ,KAA3E,EAAkF;AAChF,MAAI,CAACoQ,KAAKR,OAAV,EAAmB;AACjB,QAAIE,QAAQJ,IAAR,KAAiB,WAAjB,IAAgCI,QAAQrP,MAAR,CAAe,CAAf,MAAsB,GAA1D,EAA+D;AAC7DH,cAAQ0I,IAAR,CAAa,0BAA0B8G,QAAQrP,MAAlC,GACX,0DADF;AAED,KAHD,MAGO;AACL,UAAI8P,eAAeH,KAAKG,YAAxB;AACA,UAAIjO,OAAO,EAAEtC,KAAF,EAAS8P,OAAT,EAAkBM,IAAlB,EAAwBI,WAAWtO,WAAnC,EAAX;AACA,WAAK,IAAIuO,IAAE,CAAX,EAAcA,IAAEF,aAAa9R,MAA7B,EAAqCgS,GAArC,EAA0C;AACxC,YAAIvE,UAAUqE,aAAaE,CAAb,CAAd;AACA,YAAI,OAAOvE,OAAP,IAAkB,QAAtB,EAAgC;AAC9BA,oBAAUwE,SAASxE,OAAT,CAAV;AACAA,kBAAQK,QAAR,GAAmB,IAAnB;AACD;AACDrK,oBAAYyO,0BAAZ,CAAuCjJ,YAAvC,EAAqDwE,QAAQP,YAA7D,EAA2E;AACzEQ,cAAIyE,gBADqE;AAEzEtO,cAFyE,EAEnE4J;AAFmE,SAA3E;AAID;AACF;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;;;AAmBA,SAAS0E,gBAAT,CAA0B/G,IAA1B,EAAgCnM,IAAhC,EAAsCgE,KAAtC,EAA6C4J,QAA7C,EAAuDhJ,IAAvD,EAA6DiJ,QAA7D,EAAuEsF,QAAvE,EAAiF;AAC/E,MAAIC,OAAOD,SAASvO,KAAKtC,KAAd,CAAX;AACA,MAAI8P,UAAUxN,KAAKwN,OAAnB;AACA,MAAIM,OAAO9N,KAAK8N,IAAhB;AACA;AACA;AACA,MAAI7E,YAAY6E,KAAKW,MAAjB,IAA4BrT,KAAKe,MAAL,GAAc2R,KAAKW,MAAL,CAAYtS,MAAtD,IACCqR,QAAQJ,IAAR,IAAgB,UADjB,IACgC,CAACI,QAAQC,UADzC,IAEAe,KAAK1B,iBAFL,IAE0B0B,KAAK1B,iBAAL,CAAuBU,QAAQrP,MAA/B,CAF9B,EAEsE;AACpE,QAAItB,QAAQuC,MAAMhE,IAAN,CAAZ;AACAA,WAAO,yEAAA0Q,CAAUgC,KAAKW,MAAf,EAAuBjB,QAAQrP,MAA/B,EAAuC/C,IAAvC,CAAP;AACA,QAAIoT,KAAKzC,yBAAL,CAA+B3Q,IAA/B,EAAqCyB,KAArC,EAA4C,KAA5C,EAAmD,IAAnD,CAAJ,EAA8D;AAC5D0K,WAAKmH,cAAL,CAAoBF,IAApB;AACD;AACF,GARD,MAQO;AACL,QAAI3R,QAAQmD,KAAKkO,SAAL,CAAeS,gBAAf,CAAgCpH,IAAhC,EAAsCuG,IAAtC,EAA4C1S,IAA5C,EAAkDgE,KAAlD,EAAyD4J,QAAzD,EAAmEC,QAAnE,CAAZ;AACA;AACA2F,sBAAkBrH,IAAlB,EAAwBiH,IAAxB,EAA8BhB,OAA9B,EAAuCM,IAAvC,EAA6CjR,KAA7C;AACD;AACF;;AAED;;;;;;;;;;;AAWA,SAAS+R,iBAAT,CAA2BrH,IAA3B,EAAiCiH,IAAjC,EAAuChB,OAAvC,EAAgDM,IAAhD,EAAsDjR,KAAtD,EAA6D;AAC3DA,UAAQgS,oBAAoBL,IAApB,EAA0B3R,KAA1B,EAAiC2Q,OAAjC,EAA0CM,IAA1C,CAAR;AACA,MAAI,4EAAJ,EAAsB;AACpBjR,YAAQ,oFAAAxB,CAAiBwB,KAAjB,EAAwB2Q,QAAQrP,MAAhC,EAAwCqP,QAAQJ,IAAhD,EAAsDoB,IAAtD,CAAR;AACD;AACD,MAAIhB,QAAQJ,IAAR,IAAgB,WAApB,EAAiC;AAC/B;AACA7F,SAAKuH,qBAAL,EAA2B,sBAAuBN,IAAlD,EAAyD3R,KAAzD,EAAgE2Q,QAAQrP,MAAxE;AACD,GAHD,MAGO;AACL;AACA,QAAI3H,OAAOgX,QAAQrP,MAAnB;AACA,QAAIqQ,KAAK1B,iBAAL,IAA0B0B,KAAK1B,iBAAL,CAAuBtW,IAAvB,CAA9B,EAA4D;AAC1D,UAAI,CAACgY,KAAKzG,MAAMM,SAAX,CAAD,IAA0B,CAACmG,KAAKzG,MAAMM,SAAX,EAAsB7R,IAAtB,CAA/B,EAA4D;AAC1D,YAAIgY,KAAKxK,mBAAL,CAAyBxN,IAAzB,EAA+BqG,KAA/B,CAAJ,EAA2C;AACzC0K,eAAKmH,cAAL,CAAoBF,IAApB;AACD;AACF;AACF,KAND,MAMQ;AACNjH,WAAKwH,2BAAL,CAAiCP,IAAjC,EAAuChY,IAAvC,EAA6CqG,KAA7C;AACD;AACF;AACF;;AAED;;;;;;;;;;;AAWA,SAASgS,mBAAT,CAA6BL,IAA7B,EAAmC3R,KAAnC,EAA0C2Q,OAA1C,EAAmDM,IAAnD,EAAyD;AACvD,MAAIN,QAAQC,UAAZ,EAAwB;AACtB,QAAIuB,UAAUR,KAAKS,qBAAL,CAA2BzB,QAAQrP,MAAnC,CAAd;AACA6Q,YAAQlB,KAAKC,aAAb,IAA8BlR,KAA9B;AACAA,YAAQmS,QAAQhT,IAAR,CAAa,EAAb,CAAR;AACD;AACD,MAAIwR,QAAQJ,IAAR,KAAiB,WAArB,EAAkC;AAChC;AACA,QAAII,QAAQrP,MAAR,KAAmB,aAAnB,IACCqQ,KAAK5K,SAAL,IAAkB,OAAlB,IAA6B4J,QAAQrP,MAAR,IAAkB,OADpD,EAC8D;AAC5DtB,cAAQA,SAAS9E,SAAT,GAAqB,EAArB,GAA0B8E,KAAlC;AACD;AACF;AACD,SAAOA,KAAP;AACD;;AAED;;;;;;;;;;;;;AAaA,SAAS6Q,iBAAT,CAA2BF,OAA3B,EAAoC;AAClC,SAAO5S,QAAQ4S,QAAQrP,MAAhB,KACAqP,QAAQJ,IAAR,IAAgB,WADhB,IAEAI,QAAQJ,IAAR,IAAgB,MAFhB,IAGA,CAACI,QAAQC,UAHT,IAIAD,QAAQH,KAAR,CAAc,CAAd,EAAiB1I,IAAjB,KAA0B,GAJjC;AAKD;;AAED;;;;;;;;AAQA,SAASuK,aAAT,CAAuB3H,IAAvB,EAA6BnC,YAA7B,EAA2C;AACzC;AACA,MAAI,EAACmJ,QAAD,EAAWV,YAAX,KAA2BzI,YAA/B;AACA,MAAIyI,aAAa1R,MAAjB,EAAyB;AACvB,SAAK,IAAIW,IAAE,CAAX,EAAcA,IAAI+Q,aAAa1R,MAA/B,EAAuCW,GAAvC,EAA4C;AAC1C,UAAIkD,OAAO6N,aAAa/Q,CAAb,CAAX;AACA,UAAI0R,OAAOD,SAASzR,CAAT,CAAX;AACA,UAAIyQ,WAAWvN,KAAKuN,QAApB;AACA,UAAIA,QAAJ,EAAc;AACZ,aAAK,IAAIzQ,IAAE,CAAX,EAAcA,IAAEyQ,SAASpR,MAAzB,EAAiCW,GAAjC,EAAsC;AACpC,cAAI0Q,UAAUD,SAASzQ,CAAT,CAAd;AACAqS,+BAAqBX,IAArB,EAA2BhB,OAA3B;AACA4B,4BAAkBZ,IAAlB,EAAwBjH,IAAxB,EAA8BiG,OAA9B;AACD;AACF;AACDgB,WAAK3D,UAAL,GAAkBtD,IAAlB;AACD;AACF;AACF;;AAED;;;;;;;;;;;;;AAaA,SAAS4H,oBAAT,CAA8BX,IAA9B,EAAoChB,OAApC,EAA6C;AAC3C,MAAIA,QAAQC,UAAZ,EAAwB;AACtB;AACA,QAAIuB,UAAUR,KAAKS,qBAAL,KACXT,KAAKS,qBAAL,GAA6B,EADlB,CAAd;AAEA,QAAI5B,QAAQG,QAAQH,KAApB;AACA;AACA,QAAIgC,WAAW,IAAIvG,KAAJ,CAAUuE,MAAMlR,MAAhB,CAAf;AACA,SAAK,IAAIgS,IAAE,CAAX,EAAcA,IAAEd,MAAMlR,MAAtB,EAA8BgS,GAA9B,EAAmC;AACjCkB,eAASlB,CAAT,IAAcd,MAAMc,CAAN,EAASb,OAAvB;AACD;AACD,QAAInP,SAASqP,QAAQrP,MAArB;AACA6Q,YAAQ7Q,MAAR,IAAkBkR,QAAlB;AACA;AACA,QAAI7B,QAAQF,OAAR,IAAmBE,QAAQJ,IAAR,IAAgB,UAAvC,EAAmD;AACjDoB,WAAKrQ,MAAL,IAAeqP,QAAQF,OAAvB;AACD;AACF;AACF;;AAED;;;;;;;;AAQA,SAAS8B,iBAAT,CAA2BZ,IAA3B,EAAiCjH,IAAjC,EAAuCiG,OAAvC,EAAgD;AAC9C,MAAIA,QAAQG,aAAZ,EAA2B;AACzB,QAAIG,OAAON,QAAQH,KAAR,CAAc,CAAd,CAAX;AACAmB,SAAKc,gBAAL,CAAsB9B,QAAQG,aAA9B,EAA6C,UAASvV,CAAT,EAAY;AACvDoT,yBAAmBpT,CAAnB,EAAsBmP,IAAtB,EAA4BiG,QAAQrP,MAApC,EAA4C2P,KAAKW,MAAjD,EAAyDX,KAAKlC,MAA9D;AACD,KAFD;AAGD;AACF;;AAED;;AAEA;;;;;;;;;;;;;;;;AAgBA,SAAS2D,kBAAT,CAA4B7G,KAA5B,EAAmC8G,GAAnC,EAAwCjQ,IAAxC,EAA8CkQ,QAA9C,EAAwD5C,UAAxD,EAAoEtC,SAApE,EAA+E;AAC7EA,cAAYiF,IAAIE,MAAJ,IAAenF,cACxB,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,UAAUiF,IAAIpF,UAAd,CADT,CAA3B;AAEA,MAAIpK,OAAO;AACToK,gBAAYoF,IAAIpF,UADP;AAETuF,UAAMH,IAAIG,IAFD;AAGT9C,cAHS;AAITtC;AAJS,GAAX;AAMA,OAAK,IAAIzN,IAAE,CAAN,EAAS8S,GAAd,EAAoB9S,IAAE0S,IAAIG,IAAJ,CAASxT,MAAZ,KAAwByT,MAAIJ,IAAIG,IAAJ,CAAS7S,CAAT,CAA5B,CAAnB,EAA6DA,GAA7D,EAAkE;AAChE,QAAI,CAAC8S,IAAItC,OAAT,EAAkB;AAChB5E,YAAMmH,kBAAN,CAAyBD,IAAIvG,YAA7B,EAA2C9J,IAA3C,EAAiD;AAC/CsK,YAAI4F,QAD2C,EACjCzP,MAAMA,IAD2B,EACrB4J,SAASgG;AADY,OAAjD;AAGD;AACF;AACD,MAAIrF,SAAJ,EAAe;AACb7B,UAAMmH,kBAAN,CAAyBL,IAAIpF,UAA7B,EAAyC7K,IAAzC,EAA+C;AAC7CsK,UAAI4F,QADyC,EAC/BzP,MAAMA;AADyB,KAA/C;AAGD;AACF;;AAED;;;;;;;;;;;;;;;;AAgBA,SAAS2M,eAAT,CAAyBpF,IAAzB,EAA+BxC,QAA/B,EAAyC3F,KAAzC,EAAgD4J,QAAhD,EAA0DhJ,IAA1D,EAAgE;AAC9D;AACA;AACA,MAAI8P,UAAUvI,KAAKwI,WAAL,IAAoBxI,IAAlC;AACA,MAAIsC,KAAKiG,QAAQ9P,KAAKoK,UAAb,CAAT;AACA,MAAIP,EAAJ,EAAQ;AACN,QAAI8F,OAAOK,YAAYzI,KAAK+C,MAAjB,EAAyBtK,KAAK2P,IAA9B,EAAoC5K,QAApC,EAA8C3F,KAA9C,CAAX;AACA,WAAOyK,GAAGoG,KAAH,CAASH,OAAT,EAAkBH,IAAlB,CAAP;AACD,GAHD,MAGO,IAAI,CAAC3P,KAAKuK,SAAV,EAAqB;AAC1BvM,YAAQ0I,IAAR,CAAa,aAAa1G,KAAKoK,UAAlB,GAA+B,eAA5C;AACD;AACF;;AAED,MAAM8F,aAAa,EAAnB;;AAEA;AACA,MAAMC,QAAS,QAAQ,yBAAR,GAAoC,GAAnD;AACA,MAAMC,SAAS,QAAQ,2CAAR,GAAsD,GAArE;AACA,MAAMC,gBAAgB,QAAQ,0BAAR,GAAqC,GAA3D;AACA,MAAMC,gBAAgB,QAAQ,uBAAR,GAAkC,GAAxD;AACA,MAAMC,SAAS,QAAQF,aAAR,GAAwB,GAAxB,GAA8BC,aAA9B,GAA8C,GAA7D;AACA,MAAME,WAAW,SAASL,KAAT,GAAiB,GAAjB,GAAuBC,MAAvB,GAAgC,GAAhC,GAAuCG,MAAvC,GAAgD,OAAhD,GAA0D,GAA3E;AACA,MAAME,YAAY,QAAQD,QAAR,GAAmB,UAAnB,GAAgCA,QAAhC,GAA2C,IAA3C,GAAkD,GAApE;AACA,MAAME,gBAAgB,QAAQ,SAAR,GACQ,KADR,GACgBD,SADhB,GAC4B,GAD5B,GACkC,GADlC,GAEM,SAFN,GAEkB,GAFxC;AAGA,MAAME,UAAU,MAAMR,KAAN,GAAc,MAAd,GAAuBO,aAAvB,GAAuC,GAAvC,GAA6C,GAA7D,C,CAAkE;AAClE,MAAME,eAAe,gBAAgB,MAArC;AACA,MAAMC,gBAAgB,WAAtB;AACA,MAAMC,SAAS,cAAf,C,CAA+B;AAC/B,MAAMC,aAAaH,eAAeE,MAAf,GAAwBH,OAAxB,GAAkCE,aAArD;AACA,MAAMG,eAAe,IAAIC,MAAJ,CAAWF,UAAX,EAAuB,GAAvB,CAArB;;AAEA;;;;;;AAMA,SAASG,gBAAT,CAA0B7D,KAA1B,EAAiC;AAC/B,MAAI8D,IAAI,EAAR;AACA,OAAK,IAAIrU,IAAE,CAAX,EAAcA,IAAEuQ,MAAMlR,MAAtB,EAA8BW,GAA9B,EAAmC;AACjC,QAAIwQ,UAAUD,MAAMvQ,CAAN,EAASwQ,OAAvB;AACA6D,SAAK7D,WAAW,EAAhB;AACD;AACD,SAAO6D,CAAP;AACD;;AAED;;;;;;;;;;AAUA,SAASC,WAAT,CAAqBC,UAArB,EAAiC;AAC/B;AACA,MAAIna,IAAIma,WAAWC,KAAX,CAAiB,wBAAjB,CAAR;AACA,MAAIpa,CAAJ,EAAO;AACL,QAAIkT,aAAalT,EAAE,CAAF,CAAjB;AACA,QAAIsY,MAAM,EAAEpF,UAAF,EAAcsF,QAAQ,IAAtB,EAA4BC,MAAMO,UAAlC,EAAV;AACA,QAAIhZ,EAAE,CAAF,EAAKkP,IAAL,EAAJ,EAAiB;AACf;AACA,UAAIuJ,OAAOzY,EAAE,CAAF,EAAKD,OAAL,CAAa,MAAb,EAAqB,SAArB,EAAgCoP,KAAhC,CAAsC,GAAtC,CAAX;AACA,aAAOkL,UAAU5B,IAAV,EAAgBH,GAAhB,CAAP;AACD,KAJD,MAIO;AACL,aAAOA,GAAP;AACD;AACF;AACD,SAAO,IAAP;AACD;;AAED;;;;;;;;;;AAUA,SAAS+B,SAAT,CAAmBC,OAAnB,EAA4BhC,GAA5B,EAAiC;AAC/BA,MAAIG,IAAJ,GAAW6B,QAAQvX,GAAR,CAAY,UAASwX,MAAT,EAAiB;AACtC,QAAI7B,MAAMxB,SAASqD,MAAT,CAAV;AACA,QAAI,CAAC7B,IAAItC,OAAT,EAAkB;AAChBkC,UAAIE,MAAJ,GAAa,KAAb;AACD;AACD,WAAOE,GAAP;AACD,GANU,EAMR,IANQ,CAAX;AAOA,SAAOJ,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;AAgBA,SAASpB,QAAT,CAAkBqD,MAAlB,EAA0B;AACxB;AACA,MAAI7B,MAAM6B,OAAOrL,IAAP;AACR;AADQ,GAEPnP,OAFO,CAEC,UAFD,EAEa,GAFb;AAGR;AACA;AACA;AALQ,GAMPA,OANO,CAMC,QAND,EAMW,KANX,CAAV;AAQA;AACA,MAAIqG,IAAI;AACNN,UAAM4S,GADA;AAEN/S,WAAO,EAFD;AAGNyQ,aAAS;AAHH,GAAR;AAKA;AACA,MAAIoE,KAAK9B,IAAI,CAAJ,CAAT;AACA,MAAI8B,OAAO,GAAX,EAAgB;AACdA,SAAK9B,IAAI,CAAJ,CAAL;AACD;AACD,MAAI8B,MAAM,GAAN,IAAaA,MAAM,GAAvB,EAA4B;AAC1BA,SAAK,GAAL;AACD;AACD,UAAOA,EAAP;AACE,SAAK,GAAL;AACA,SAAK,GAAL;AACEpU,QAAET,KAAF,GAAU+S,IAAI9R,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAV;AACAR,QAAEgQ,OAAF,GAAY,IAAZ;AACA;AACF,SAAK,GAAL;AACEhQ,QAAET,KAAF,GAAU8U,OAAO/B,GAAP,CAAV;AACAtS,QAAEgQ,OAAF,GAAY,IAAZ;AACA;AATJ;AAWA;AACA,MAAI,CAAChQ,EAAEgQ,OAAP,EAAgB;AACdhQ,MAAE+L,YAAF,GAAiB,oEAAAC,CAAOsG,GAAP,CAAjB;AACA;AACAtS,MAAEyM,UAAF,GAAe,sEAAA6H,CAAShC,GAAT,CAAf;AACA,QAAItS,EAAEyM,UAAN,EAAkB;AAChBzM,QAAE2M,QAAF,GAAc2F,IAAI9R,KAAJ,CAAU,CAAC,CAAX,KAAiB,IAA/B;AACA,UAAIR,EAAE2M,QAAN,EAAgB;AACd3M,UAAEN,IAAF,GAAS4S,IAAI9R,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAT;AACD;AACF;AACF;AACD,SAAOR,CAAP;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAAS0S,WAAT,CAAqB9T,IAArB,EAA2ByT,IAA3B,EAAiCvU,IAAjC,EAAuCgE,KAAvC,EAA8C;AAC5C,MAAIyS,SAAS,EAAb;AACA,OAAK,IAAI/U,IAAE,CAAN,EAAS0M,IAAEmG,KAAKxT,MAArB,EAA6BW,IAAE0M,CAA/B,EAAkC1M,GAAlC,EAAuC;AACrC,QAAI8S,MAAMD,KAAK7S,CAAL,CAAV;AACA,QAAIE,OAAO4S,IAAI5S,IAAf;AACA,QAAI8U,CAAJ;AACA,QAAIlC,IAAItC,OAAR,EAAiB;AACfwE,UAAIlC,IAAI/S,KAAR;AACD,KAFD,MAEO;AACL,UAAI+S,IAAI7F,UAAR,EAAoB;AAClB+H,YAAI,mEAAAvG,CAAMrP,IAAN,EAAYc,IAAZ,CAAJ;AACA;AACA,YAAI8U,MAAM/Z,SAAV,EAAqB;AACnB+Z,cAAI1S,MAAMpC,IAAN,CAAJ;AACD;AACF,OAND,MAMO;AACL8U,YAAI5V,KAAKc,IAAL,CAAJ;AACD;AACF;AACD,QAAI4S,IAAI3F,QAAR,EAAkB;AAChB;AACA;AACA,UAAI8H,cAAe/U,KAAKhG,OAAL,CAAaoE,OAAO,GAApB,MAA6B,CAAhD;AACA,UAAI4W,UAAW5W,KAAKpE,OAAL,CAAagG,IAAb,MAAuB,CAAvB,IAA4B,CAAC+U,WAA5C;AACAF,aAAO/U,CAAP,IAAY;AACV1B,cAAM4W,UAAU5W,IAAV,GAAiB4B,IADb;AAEVH,eAAOmV,UAAU5S,MAAMhE,IAAN,CAAV,GAAwB0W,CAFrB;AAGVrZ,cAAMqZ;AAHI,OAAZ;AAKD,KAVD,MAUO;AACLD,aAAO/U,CAAP,IAAYgV,CAAZ;AACD;AACF;AACD,SAAOD,MAAP;AACD;;AAED;;AAEA;;;;;;;;;;;AAWA,SAASI,aAAT,CAAuB1K,IAAvB,EAA6B2K,KAA7B,EAAoC9W,IAApC,EAA0C+W,OAA1C,EAAmD;AACjD,MAAIC,cAAchX,OAAO,UAAzB;AACAmM,OAAKoD,UAAL,CAAgByH,WAAhB,EAA6B,EAAEC,cAAcF,OAAhB,EAA7B;AACA5K,OAAKoD,UAAL,CAAgBvP,OAAO,SAAvB,EAAkC8W,MAAM/V,MAAxC;AACA;AACAoL,OAAK+C,MAAL,CAAY8H,WAAZ,IAA2B,EAACC,cAAc,IAAf,EAA3B;AACD;;AAED;;;;;;;;;;;;;;AAcA,SAASC,YAAT,CAAsB/K,IAAtB,EAA4B2K,KAA5B,EAAmC9W,IAAnC,EAAyCsC,KAAzC,EAAgD6U,UAAhD,EAA4DC,OAA5D,EAAqE;AACnEP,gBAAc1K,IAAd,EAAoB2K,KAApB,EAA2B9W,IAA3B,EAAiC,CAAC;AAChCsC,WAAOA,KADyB;AAEhC6U,gBAAYA,UAFoB;AAGhCC,aAASA,OAHuB;AAIhCC,YAAQP,KAJwB;AAKhC3S,UAAM;AAL0B,GAAD,CAAjC;AAOD;;AAED;;;;;;;AAOA,SAASmT,KAAT,CAAe1V,IAAf,EAAqB;AACnB,SAAOA,KAAK,CAAL,EAAQ7F,WAAR,KAAwB6F,KAAK5D,SAAL,CAAe,CAAf,CAA/B;AACD;;AAEM,MAAMsF,kBAAkB,8EAAA/E,CAAcgZ,cAAc;;AAEzD;;;;;;;AAOA,QAAMC,sBAAsB,iFAAAC,CAAc,yFAAAC,CAAkBH,UAAlB,CAAd,CAA5B;;AAEA;;;;;;;AAOA,QAAMjU,eAAN,SAA8BkU,mBAA9B,CAAkD;;AAEhDhT,kBAAc;AACZ;AACA;AACA,WAAKmT,kBAAL;AACA;AACA,WAAKC,oBAAL;AACA;AACA,WAAKC,cAAL;AACA;AACA,WAAKhG,iBAAL;AACA;AACA,WAAKiG,cAAL;AACA;AACA,WAAKjE,qBAAL;AACA;AACA,WAAKpE,UAAL;AACA;AACA,WAAKsI,UAAL;AACA;AACA,WAAKC,wBAAL;AACA;AACA,WAAK9I,MAAL;AACA;AACA,WAAKkC,aAAL;AACA;AACA,WAAKD,SAAL;AACA;AACA,WAAK8G,gBAAL;AACA;AACA,WAAKC,gBAAL;AACA;AACA,WAAKC,eAAL;AACA;AACA,WAAKC,kBAAL;AACA;AACA,WAAKC,gBAAL;AACA;AACA,WAAKC,UAAL;AACA;AACA,WAAKC,aAAL;AACA;AACA,WAAKC,cAAL;AACD;;AAED,QAAIC,qBAAJ,GAA4B;AAC1B,aAAO9L,KAAP;AACD;;AAEDxE,4BAAwB;AACtB,YAAMA,qBAAN;AACAuQ,gBAAUC,YAAV,CAAuB,IAAvB;AACA,WAAKhB,kBAAL,GAA0B,KAA1B;AACA,WAAKC,oBAAL,GAA4B,IAA5B;AACA,WAAKC,cAAL,GAAsB,IAAtB;AACA,WAAKhG,iBAAL,GAAyB,IAAzB;AACA,WAAKiG,cAAL,GAAsB,KAAtB;AACA;AACA,WAAKjE,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,IAA3D;AACA,WAAKpE,UAAL,GAAkB,KAAKA,UAAL,IAAmB,IAArC;AACA,WAAKsI,UAAL,GAAkB,EAAlB;AACA,WAAKC,wBAAL,GAAgC,KAAhC;AACD;;AAED;;;;;;;;AAQAY,+BAA2B5U,KAA3B,EAAkC;AAChC,WAAKkL,MAAL,GAAchQ,OAAOC,MAAP,CAAc6E,KAAd,CAAd;AACA,WAAKoN,aAAL,GAAqBlS,OAAOC,MAAP,CAAc6E,KAAd,CAArB;AACA,WAAKmN,SAAL,GAAiB,EAAjB;AACD;;AAED;;;;;;;AAOA0H,kCAA8B7U,KAA9B,EAAqC;AACnC,UAAIgC,WAAW,KAAK2G,MAAMM,SAAX,CAAf;AACA,WAAK,IAAI7R,IAAT,IAAiB4I,KAAjB,EAAwB;AACtB,YAAI,CAACgC,QAAD,IAAa,CAACA,SAAS5K,IAAT,CAAlB,EAAkC;AAChC,eAAKgW,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;AACA,eAAKD,SAAL,GAAiB,KAAKA,SAAL,IAAkB,EAAnC;AACA,eAAKjC,MAAL,CAAY9T,IAAZ,IAAoB,KAAKgW,aAAL,CAAmBhW,IAAnB,IAA2B4I,MAAM5I,IAAN,CAA/C;AACD;AACF;AACF;;AAED;;AAEA;;;;;;;;;;AAUAqZ,uBAAmB9K,QAAnB,EAA6BxF,IAA7B,EAAmC2U,MAAnC,EAA2C;AACzC,WAAKC,uBAAL,CAA6BpP,QAA7B,EAAuCxF,QAAQwI,MAAMM,SAArD;AACA;AACA,UAAIM,UAAUF,mBAAmB,IAAnB,EAAyBlJ,IAAzB,EAA+BwF,QAA/B,CAAd;AACA,UAAI,CAAC4D,OAAL,EAAc;AACZA,kBAAU,KAAKpJ,IAAL,EAAWwF,QAAX,IAAuB,EAAjC;AACD;AACD4D,cAAQ9F,IAAR,CAAaqR,MAAb;AACD;;AAED;;;;;;;AAOAE,0BAAsBrP,QAAtB,EAAgCxF,IAAhC,EAAsC2U,MAAtC,EAA8C;AAC5C,UAAIvL,UAAUF,mBAAmB,IAAnB,EAAyBlJ,IAAzB,EAA+BwF,QAA/B,CAAd;AACA,UAAIsP,MAAM1L,QAAQ3R,OAAR,CAAgBkd,MAAhB,CAAV;AACA,UAAIG,OAAO,CAAX,EAAc;AACZ1L,gBAAQ2L,MAAR,CAAeD,GAAf,EAAoB,CAApB;AACD;AACF;;AAED;;;;;;;;;AASAE,uBAAmBxP,QAAnB,EAA6BxF,IAA7B,EAAmC;AACjC,UAAIoJ,UAAU,KAAKpJ,IAAL,CAAd;AACA,aAAO3E,QAAQ+N,WAAWA,QAAQ5D,QAAR,CAAnB,CAAP;AACD;;AAED;;;;;;;;AAQA1D,uBAAmB0D,QAAnB,EAA6B;AAC3B,aAAO,KAAKwP,kBAAL,CAAwBxP,QAAxB,EAAkCgD,MAAMM,SAAxC,CAAP;AACD;;AAED;;;;;;;;AAQAzG,qBAAiBmD,QAAjB,EAA2B;AACzB,aAAO,KAAKwP,kBAAL,CAAwBxP,QAAxB,EAAkCgD,MAAMG,MAAxC,CAAP;AACD;;AAED;;;;;;;;AAQAzG,sBAAkBsD,QAAlB,EAA4B;AAC1B,aAAO,KAAKwP,kBAAL,CAAwBxP,QAAxB,EAAkCgD,MAAME,OAAxC,CAAP;AACD;;AAED;;;;;;;;AAQAuM,uBAAmBzP,QAAnB,EAA6B;AAC3B,aAAO,KAAKwP,kBAAL,CAAwBxP,QAAxB,EAAkCgD,MAAMC,OAAxC,CAAP;AACD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA+D,8BAA0B3Q,IAA1B,EAAgCyB,KAAhC,EAAuC4X,YAAvC,EAAqDC,kBAArD,EAAyE;AACvE,UAAIA,sBACA,oEAAApL,CAAOR,MAAM6L,OAAN,CAAcvZ,IAAd,IAAsBA,KAAK,CAAL,CAAtB,GAAgCA,IAAvC,MAAiDA,IADrD,EAC2D;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAI,CAACsZ,kBAAL,EAAyB;AACvB,cAAI5P,MAAM,mEAAAyG,CAAM,IAAN,EAAYnQ,IAAZ,CAAV;AACAA,iBAAO,qBAAuB,mEAAAwZ,CAAM,IAAN,EAAYxZ,IAAZ,EAAkByB,KAAlB,CAA9B;AACA;AACA,cAAI,CAACzB,IAAD,IAAS,CAAC,MAAMyZ,qBAAN,CAA4BzZ,IAA5B,EAAkCyB,KAAlC,EAAyCiI,GAAzC,CAAd,EAA6D;AAC3D,mBAAO,KAAP;AACD;AACF;AACD,aAAKoO,cAAL,GAAsB,IAAtB;AACA,YAAI,KAAKlP,mBAAL,EAAyB,kBAAmB5I,IAA5C,EAAmDyB,KAAnD,EAA0D4X,YAA1D,CAAJ,EAA6E;AAC3E1H,6BAAmB,IAAnB,EAAyB3R,IAAzB,EAA+ByB,KAA/B;AACA,iBAAO,IAAP;AACD;AACF,OAvBD,MAuBO;AACL,YAAI,KAAKiQ,iBAAL,IAA0B,KAAKA,iBAAL,CAAuB1R,IAAvB,CAA9B,EAA4D;AAC1D,iBAAO,KAAK4I,mBAAL,EAAyB,kBAAmB5I,IAA5C,EAAmDyB,KAAnD,EAA0D4X,YAA1D,CAAP;AACD,SAFD,MAEO;AACL,eAAKrZ,IAAL,IAAayB,KAAb;AACD;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;AAoBAkS,gCAA4BP,IAA5B,EAAkChY,IAAlC,EAAwCqG,KAAxC,EAA+C;AAC7C;AACA;AACA;AACA;AACA,UAAIA,UAAU2R,KAAKhY,IAAL,CAAV,IAAwB,OAAOqG,KAAP,IAAgB,QAA5C,EAAsD;AACpD2R,aAAKhY,IAAL,IAAaqG,KAAb;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCAmH,wBAAoBe,QAApB,EAA8BlI,KAA9B,EAAqC4X,YAArC,EAAmD;AACjD,UAAIK,SAAS,KAAK5B,cAAL,IAAuB,sEAAAtB,CAAS7M,QAAT,CAApC;AACA,UAAIgQ,YAAYD,SAAS,KAAK3B,UAAd,GAA2B,KAAK7I,MAAhD;AACA,UAAI,KAAKuK,qBAAL,CAA2B9P,QAA3B,EAAqClI,KAArC,EAA4CkY,UAAUhQ,QAAV,CAA5C,CAAJ,EAAsE;AACpE,YAAI,CAAC,KAAKyH,aAAV,EAAyB;AACvB,eAAKA,aAAL,GAAqB,EAArB;AACA,eAAKD,SAAL,GAAiB,EAAjB;AACD;AACD;AACA,YAAI,EAAExH,YAAY,KAAKwH,SAAnB,CAAJ,EAAmC;AACjC,eAAKA,SAAL,CAAexH,QAAf,IAA2B,KAAKuF,MAAL,CAAYvF,QAAZ,CAA3B;AACD;AACD;AACA;AACA,YAAI+P,MAAJ,EAAY;AACV,eAAK3B,UAAL,CAAgBpO,QAAhB,IAA4BlI,KAA5B;AACD,SAFD,MAEO;AACL,eAAKyN,MAAL,CAAYvF,QAAZ,IAAwBlI,KAAxB;AACD;AACD;AACA,aAAK2P,aAAL,CAAmBzH,QAAnB,IAA+BlI,KAA/B;AACA;AACA,YAAIiY,UAAW,KAAK/M,MAAMG,MAAX,KAAsB,KAAKH,MAAMG,MAAX,EAAmBnD,QAAnB,CAArC,EAAoE;AAClE,eAAKkO,cAAL,GAAsB,KAAKA,cAAL,IAAuB,EAA7C;AACA,eAAKA,cAAL,CAAoBlO,QAApB,IAAgC0P,YAAhC;AACD;AACD,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;AAMAO,iBAAajQ,QAAb,EAAuBlI,KAAvB,EAA8B;AAC5B,UAAI,KAAKmH,mBAAL,CAAyBe,QAAzB,EAAmClI,KAAnC,EAA0C,IAA1C,CAAJ,EAAqD;AACnD,aAAKiO,qBAAL;AACD;AACF;;AAED;;;;;;;;AAQAA,4BAAwB;AACtB,UAAI,KAAKmK,WAAT,EAAsB;AACpB,aAAKC,gBAAL;AACD;AACF;;AAED;;;;;;;;AAQAxG,mBAAeyG,MAAf,EAAuB;AACrB,WAAKnC,oBAAL,GAA4B,KAAKA,oBAAL,IAA6B,EAAzD;AACA,UAAImC,WAAW,IAAf,EAAqB;AACnB,aAAKnC,oBAAL,CAA0BnQ,IAA1B,CAA+BsS,MAA/B;AACD;AACF;;AAED;;;;;;AAMAC,oBAAgB;AACd,UAAI,CAAC,KAAKrC,kBAAV,EAA8B;AAC5B,aAAKA,kBAAL,GAA0B,IAA1B;AACA,aAAKzO,aAAL;AACA;AACA;AACA;AACA,aAAK2Q,WAAL,GAAmB,IAAnB;AACD,OAPD,MAOO;AACL,aAAKI,sBAAL;AACD;AACF;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,6BAAyB;AACvB,UAAIC,UAAU,KAAKtC,oBAAnB;AACA,UAAIsC,OAAJ,EAAa;AACX,aAAKtC,oBAAL,GAA4B,IAA5B;AACA,aAAK,IAAIlW,IAAE,CAAX,EAAcA,IAAIwY,QAAQnZ,MAA1B,EAAkCW,GAAlC,EAAuC;AACrC,cAAIqY,SAASG,QAAQxY,CAAR,CAAb;AACA,cAAI,CAACqY,OAAOI,aAAZ,EAA2B;AACzBJ,mBAAOjR,iBAAP;AACD,WAFD,MAEO,IAAIiR,OAAO3I,aAAX,EAA0B;AAC/B2I,mBAAOD,gBAAP;AACD;AACF;AACF;AACF;;AAED;;;;;;;AAOA5Q,oBAAgB;AACd,WAAK+Q,sBAAL;AACD;;AAED;;;;;;;;;;;;;;AAcAG,kBAAcpW,KAAd,EAAqBqW,WAArB,EAAkC;AAChC,WAAK,IAAIra,IAAT,IAAiBgE,KAAjB,EAAwB;AACtB,YAAIqW,eAAe,CAAC,KAAK1N,MAAMM,SAAX,CAAhB,IAAyC,CAAC,KAAKN,MAAMM,SAAX,EAAsBjN,IAAtB,CAA9C,EAA2E;AACzE;AACA;AACA;AACA;AACA,eAAK2Q,yBAAL,CAA+B3Q,IAA/B,EAAqCgE,MAAMhE,IAAN,CAArC,EAAkD,IAAlD;AACD;AACF;AACD,WAAK0P,qBAAL;AACD;;AAED;;;;;;;;AAQA1G,YAAQ;AACN;AACA;AACA;AACA;AACA,WAAK8Q,gBAAL;AACA;AACA;AACA,UAAI,CAAC,KAAKnC,kBAAV,EAA8B;AAC5B,aAAKqC,aAAL;AACD;AACD;AACA;AACA,UAAI,KAAK5I,aAAT,EAAwB;AACtB,aAAK0I,gBAAL;AACD;AACF;;AAED;;;;;;;;AAQAQ,uBAAmBC,YAAnB,EAAiCvJ,YAAjC,EAA+CpD,QAA/C,EAAyD;AACvD;AACA;AACA;AACA;AACA;AACA,UAAIC,WAAW,KAAKiK,cAApB;AACA,WAAKA,cAAL,GAAsB,KAAtB;AACA;AACA/G,yBAAmB,IAAnB,EAAyBC,YAAzB,EAAuCpD,QAAvC,EAAiDC,QAAjD;AACA;AACA;AACA,UAAIwB,cAAc,KAAKwI,cAAvB;AACA,WAAKA,cAAL,GAAsB,IAAtB;AACA;AACA,WAAK2C,yBAAL,CAA+BxJ,YAA/B,EAA6CpD,QAA7C,EAAuDC,QAAvD;AACA;AACA,WAAKmM,aAAL;AACA;AACArM,iBAAW,IAAX,EAAiB,KAAKhB,MAAME,OAAX,CAAjB,EAAsCmE,YAAtC,EAAoDpD,QAApD,EAA8DC,QAA9D;AACA;AACAF,iBAAW,IAAX,EAAiB,KAAKhB,MAAMK,OAAX,CAAjB,EAAsCgE,YAAtC,EAAoDpD,QAApD,EAA8DC,QAA9D;AACA;AACA,UAAIwB,WAAJ,EAAiB;AACfD,yBAAiB,IAAjB,EAAuBC,WAAvB,EAAoC2B,YAApC,EAAkDpD,QAAlD,EAA4DC,QAA5D;AACD;AACD;AACA,UAAI,KAAK0K,aAAL,IAAsB,CAA1B,EAA6B;AAC3B,aAAKR,UAAL,GAAkB,EAAlB;AACD;AACD;AACA;AACA;AACD;;AAED;;;;;;;;;AASAyC,8BAA0BxJ,YAA1B,EAAwCpD,QAAxC,EAAkDC,QAAlD,EAA4D;AAC1D,UAAI,KAAKlB,MAAMI,SAAX,CAAJ,EAA2B;AACzBY,mBAAW,IAAX,EAAiB,KAAKhB,MAAMI,SAAX,CAAjB,EAAwCiE,YAAxC,EAAsDpD,QAAtD,EAAgEC,QAAhE;AACD;AACD,UAAI7D,eAAe,KAAKwO,cAAxB;AACA,aAAOxO,YAAP,EAAqB;AACnB2D,mBAAW,IAAX,EAAiB3D,aAAayQ,eAA9B,EAA+CzJ,YAA/C,EAA6DpD,QAA7D,EACEC,QADF,EACY7D,aAAamJ,QADzB;AAEAnJ,uBAAeA,aAAa0Q,gBAA5B;AACD;AACF;;AAED;;;;;;;;AAQAC,cAAUC,EAAV,EAAcC,IAAd,EAAoB;AAClBD,WAAK,yEAAAE,CAAUF,EAAV,CAAL;AACAC,aAAO,yEAAAC,CAAUD,IAAV,CAAP;AACA,WAAKhJ,iBAAL,GAAyB,KAAKA,iBAAL,IAA0B,EAAnD;AACA,WAAKA,iBAAL,CAAuB+I,EAAvB,IAA6BC,IAA7B;AACD;;AAED;;;;;;;;;AASAE,gBAAY/a,IAAZ,EAAkB;AAChBA,aAAO,yEAAA8a,CAAU9a,IAAV,CAAP;AACA,UAAI,KAAK6R,iBAAT,EAA4B;AAC1B,eAAO,KAAKA,iBAAL,CAAuB7R,IAAvB,CAAP;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA6W,kBAAc7W,IAAd,EAAoB+W,OAApB,EAA6B;AAC3B,UAAInS,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACA,UAAI8W,QAAQ,oBAAqB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAjC;AACAiS,oBAAc,IAAd,EAAoBC,KAApB,EAA2BlS,KAAK5E,IAAhC,EAAsC+W,OAAtC;AACD;;AAED;;;;;;;;;;;;;;;;;;;AAmBAhY,QAAIiB,IAAJ,EAAUiI,IAAV,EAAgB;AACd,aAAO,mEAAAkI,CAAMlI,QAAQ,IAAd,EAAoBjI,IAApB,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;AAoBAhB,QAAIgB,IAAJ,EAAUyB,KAAV,EAAiBwG,IAAjB,EAAuB;AACrB,UAAIA,IAAJ,EAAU;AACRuR,QAAA,mEAAAA,CAAMvR,IAAN,EAAYjI,IAAZ,EAAkByB,KAAlB;AACD,OAFD,MAEO;AACL,YAAI,CAAC,KAAKkL,MAAMM,SAAX,CAAD,IAA0B,CAAC,KAAKN,MAAMM,SAAX,EAAsB,qBAAsBjN,IAA5C,CAA/B,EAAmF;AACjF,cAAI,KAAK2Q,yBAAL,CAA+B3Q,IAA/B,EAAqCyB,KAArC,EAA4C,IAA5C,CAAJ,EAAuD;AACrD,iBAAKiO,qBAAL;AACD;AACF;AACF;AACF;;AAED;;;;;;;;;;;;;;AAcAjI,SAAKzH,IAAL,EAAW,GAAGgb,KAAd,EAAqB;AACnB,UAAIpW,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACA,UAAI8W,QAAQ,mBAAoB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAhC;AACA,UAAIqW,MAAMnE,MAAM/V,MAAhB;AACA,UAAIma,MAAMpE,MAAMrP,IAAN,CAAW,GAAGuT,KAAd,CAAV;AACA,UAAIA,MAAMja,MAAV,EAAkB;AAChBmW,qBAAa,IAAb,EAAmBJ,KAAnB,EAA0BlS,KAAK5E,IAA/B,EAAqCib,GAArC,EAA0CD,MAAMja,MAAhD,EAAwD,EAAxD;AACD;AACD,aAAOma,GAAP;AACD;;AAED;;;;;;;;;;;;;AAaAC,QAAInb,IAAJ,EAAU;AACR,UAAI4E,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACA,UAAI8W,QAAQ,oBAAqB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAjC;AACA,UAAIwW,YAAY5b,QAAQsX,MAAM/V,MAAd,CAAhB;AACA,UAAIma,MAAMpE,MAAMqE,GAAN,EAAV;AACA,UAAIC,SAAJ,EAAe;AACblE,qBAAa,IAAb,EAAmBJ,KAAnB,EAA0BlS,KAAK5E,IAA/B,EAAqC8W,MAAM/V,MAA3C,EAAmD,CAAnD,EAAsD,CAACma,GAAD,CAAtD;AACD;AACD,aAAOA,GAAP;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBAhC,WAAOlZ,IAAP,EAAaqb,KAAb,EAAoBC,WAApB,EAAiC,GAAGN,KAApC,EAA2C;AACzC,UAAIpW,OAAO,EAAC5E,MAAO,EAAR,EAAX;AACA,UAAI8W,QAAQ,oBAAqB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAjC;AACA;AACA,UAAIyW,QAAQ,CAAZ,EAAe;AACbA,gBAAQvE,MAAM/V,MAAN,GAAewa,KAAKC,KAAL,CAAW,CAACH,KAAZ,CAAvB;AACD,OAFD,MAEO;AACLA,gBAAQE,KAAKC,KAAL,CAAWH,KAAX,CAAR;AACD;AACD,UAAI,CAACA,KAAL,EAAY;AACVA,gBAAQ,CAAR;AACD;AACD,UAAIH,MAAMpE,MAAMoC,MAAN,CAAamC,KAAb,EAAoBC,WAApB,EAAiC,GAAGN,KAApC,CAAV;AACA,UAAIA,MAAMja,MAAN,IAAgBma,IAAIna,MAAxB,EAAgC;AAC9BmW,qBAAa,IAAb,EAAmBJ,KAAnB,EAA0BlS,KAAK5E,IAA/B,EAAqCqb,KAArC,EAA4CL,MAAMja,MAAlD,EAA0Dma,GAA1D;AACD;AACD,aAAOA,GAAP;AACD;;AAED;;;;;;;;;;;;;AAaAO,UAAMzb,IAAN,EAAY;AACV,UAAI4E,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACA,UAAI8W,QAAQ,oBAAqB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAjC;AACA,UAAIwW,YAAY5b,QAAQsX,MAAM/V,MAAd,CAAhB;AACA,UAAIma,MAAMpE,MAAM2E,KAAN,EAAV;AACA,UAAIL,SAAJ,EAAe;AACblE,qBAAa,IAAb,EAAmBJ,KAAnB,EAA0BlS,KAAK5E,IAA/B,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAACkb,GAAD,CAA3C;AACD;AACD,aAAOA,GAAP;AACD;;AAED;;;;;;;;;;;;;;AAcAQ,YAAQ1b,IAAR,EAAc,GAAGgb,KAAjB,EAAwB;AACtB,UAAIpW,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACA,UAAI8W,QAAQ,oBAAqB,mEAAA3G,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAjC;AACA,UAAIsW,MAAMpE,MAAM4E,OAAN,CAAc,GAAGV,KAAjB,CAAV;AACA,UAAIA,MAAMja,MAAV,EAAkB;AAChBmW,qBAAa,IAAb,EAAmBJ,KAAnB,EAA0BlS,KAAK5E,IAA/B,EAAqC,CAArC,EAAwCgb,MAAMja,MAA9C,EAAsD,EAAtD;AACD;AACD,aAAOma,GAAP;AACD;;AAED;;;;;;;;;;;;AAYA3L,eAAWvP,IAAX,EAAiByB,KAAjB,EAAwB;AACtB;AACA,UAAIka,QAAJ;AACA,UAAIC,UAAU7a,MAAV,IAAoB,CAAxB,EAA2B;AACzB;AACA,YAAI6D,OAAO,EAAC5E,MAAM,EAAP,EAAX;AACAyB,gBAAQ,mEAAA0O,CAAM,IAAN,EAAYnQ,IAAZ,EAAkB4E,IAAlB,CAAR;AACA+W,mBAAW/W,KAAK5E,IAAhB;AACD,OALD,MAKO,IAAI0N,MAAM6L,OAAN,CAAcvZ,IAAd,CAAJ,EAAyB;AAC9B;AACA2b,mBAAW,yEAAAb,CAAU9a,IAAV,CAAX;AACD,OAHM,MAGA;AACL2b,mBAAW,oBAAqB3b,IAAhC;AACD;AACD,UAAI,KAAK2Q,yBAAL,CAA+BgL,QAA/B,EAAyCla,KAAzC,EAAgD,IAAhD,EAAsD,IAAtD,CAAJ,EAAiE;AAC/D,aAAKiO,qBAAL;AACD;AACF;;AAED;;;;;;;;;;AAUAvJ,4BAAwBwD,QAAxB,EAAkCkS,eAAlC,EAAmD;AACjD,WAAKpH,kBAAL,CAAwB9K,QAAxB,EAAkCgD,MAAMM,SAAxC;AACA,UAAI4O,eAAJ,EAAqB;AACnB,aAAK,SAASvE,MAAM3N,QAAN,CAAd,IAAiC,8BAA8B,UAASlI,KAAT,EAAgB;AAC7E,eAAKmY,YAAL,CAAkBjQ,QAAlB,EAA4BlI,KAA5B;AACD,SAFD;AAGD;AACF;;AAED;;;;;;;;;;;AAWAkF,4BAAwBgD,QAAxB,EAAkCqF,UAAlC,EAA8CG,SAA9C,EAAyD;AACvD,UAAIvK,OAAO,EAAE+E,QAAF,EAAYqF,UAAZ,EAAwBG,WAAW3P,QAAQ2P,SAAR,CAAnC,EAAX;AACA,WAAKsF,kBAAL,CAAwB9K,QAAxB,EAAkCgD,MAAMK,OAAxC,EAAiD;AAC/CyB,YAAIM,iBAD2C,EACxBnK,IADwB,EAClB4J,SAAS,EAAC5M,MAAM+H,QAAP;AADS,OAAjD;AAGA,UAAIwF,SAAJ,EAAe;AACb,aAAKsF,kBAAL,CAAwBzF,UAAxB,EAAoCrC,MAAMK,OAA1C,EAAmD;AACjDyB,cAAIM,iBAD6C,EAC1BnK,IAD0B,EACpB4J,SAAS,EAAC5M,MAAMoN,UAAP;AADW,SAAnD;AAGD;AACF;;AAED;;;;;;;;;;AAUAnJ,0BAAsBoQ,UAAtB,EAAkC9G,SAAlC,EAA6C;AAC3C,UAAIiF,MAAM4B,YAAYC,UAAZ,CAAV;AACA,UAAI,CAAC7B,GAAL,EAAU;AACR,cAAM,IAAI5K,KAAJ,CAAU,oCAAoCyM,UAApC,GAAiD,GAA3D,CAAN;AACD;AACD9B,yBAAmB,IAAnB,EAAyBC,GAAzB,EAA8BzH,MAAMK,OAApC,EAA6CuE,eAA7C,EAA8D,IAA9D,EAAoEpC,SAApE;AACD;;AAED;;;;;;;;AAQA1I,6BAAyBkD,QAAzB,EAAmC;AACjC,WAAK8K,kBAAL,CAAwB9K,QAAxB,EAAkCgD,MAAMG,MAAxC,EAAgD;AAC9C2B,YAAIyB,eAD0C;AAE9CtL,cAAM;AACJ+K,qBAAWjD,QAAQ1Q,eAAR,CAAwB2N,QAAxB,IAAoC,UAD3C;AAEJA,oBAAUA;AAFN;AAFwC,OAAhD;AAOD;;AAED;;;;;;;;AAQArD,6BAAyBqD,QAAzB,EAAmC;AACjC,UAAImS,OAAOpP,QAAQ1Q,eAAR,CAAwB2N,QAAxB,CAAX;AACA,UAAImS,KAAK,CAAL,MAAY,GAAhB,EAAqB;AACnBlZ,gBAAQ0I,IAAR,CAAa,cAAc3B,QAAd,GAAyB,oCAAzB,GACXmS,IADW,GACJ,6GADT;AAED,OAHD,MAGO;AACL,aAAKrH,kBAAL,CAAwB9K,QAAxB,EAAkCgD,MAAME,OAAxC,EAAiD;AAC/C4B,cAAImC,gBAD2C;AAE/ChM,gBAAM;AACJiM,sBAAUiL;AADN;AAFyC,SAAjD;AAMD;AACF;;AAED;;;;;;;;;;;AAWA5V,4BAAwByD,QAAxB,EAAkCsM,UAAlC,EAA8C9G,SAA9C,EAAyD;AACvD,UAAIiF,MAAM4B,YAAYC,UAAZ,CAAV;AACA,UAAI,CAAC7B,GAAL,EAAU;AACR,cAAM,IAAI5K,KAAJ,CAAU,oCAAoCyM,UAApC,GAAiD,GAA3D,CAAN;AACD;AACD9B,yBAAmB,IAAnB,EAAyBC,GAAzB,EAA8BzH,MAAMC,OAApC,EAA6CyE,iBAA7C,EAAgE1H,QAAhE,EAA0EwF,SAA1E;AACD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,WAAO4M,iBAAP,CAAyBpS,QAAzB,EAAmCxF,IAAnC,EAAyC2U,MAAzC,EAAiD;AAC/C,WAAK1a,SAAL,CAAeqW,kBAAf,CAAkC9K,QAAlC,EAA4CxF,IAA5C,EAAkD2U,MAAlD;AACD;;AAED;;;;;;;;;AASA,WAAOkD,sBAAP,CAA8BrS,QAA9B,EAAwCqF,UAAxC,EAAoDG,SAApD,EAA+D;AAC7D,WAAK/Q,SAAL,CAAeuI,uBAAf,CAAuCgD,QAAvC,EAAiDqF,UAAjD,EAA6DG,SAA7D;AACD;;AAED;;;;;;;;;;;;AAYA,WAAO8M,oBAAP,CAA4BhG,UAA5B,EAAwC9G,SAAxC,EAAmD;AACjD,WAAK/Q,SAAL,CAAeyH,qBAAf,CAAqCoQ,UAArC,EAAiD9G,SAAjD;AACD;;AAED;;;;;;;AAOA,WAAO+M,uBAAP,CAA+BvS,QAA/B,EAAyC;AACvC,WAAKvL,SAAL,CAAeqI,wBAAf,CAAwCkD,QAAxC;AACD;;AAED;;;;;;;;;;;;;;;AAeA,WAAOwS,sBAAP,CAA8BxS,QAA9B,EAAwCkS,eAAxC,EAAyD;AACvD,WAAKzd,SAAL,CAAe+H,uBAAf,CAAuCwD,QAAvC,EAAiDkS,eAAjD;AACD;;AAED;;;;;;;AAOA,WAAOO,uBAAP,CAA+BzS,QAA/B,EAAyC;AACvC,WAAKvL,SAAL,CAAekI,wBAAf,CAAwCqD,QAAxC;AACD;;AAED;;;;;;;;;;;;;AAaA,WAAO0S,sBAAP,CAA8B1S,QAA9B,EAAwCsM,UAAxC,EAAoD9G,SAApD,EAA+D;AAC7D,WAAK/Q,SAAL,CAAe8H,uBAAf,CAAuCyD,QAAvC,EAAiDsM,UAAjD,EAA6D9G,SAA7D;AACD;;AAED;;;;;;;;;;;;AAYA,WAAOmN,YAAP,CAAoBjc,QAApB,EAA8B;AAC5B,aAAO,KAAKjC,SAAL,CAAekJ,aAAf,CAA6BjH,QAA7B,CAAP;AACD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBAiH,kBAAcjH,QAAd,EAAwBkc,eAAxB,EAAyC;AACvC,UAAIvS,eAAe,KAAKxF,WAAL,CAAiBgY,cAAjB,CAAgCnc,QAAhC,CAAnB;AACA,UAAIoc,cAAc,KAAKjE,cAAL,IAAuBxO,YAAzC;AACA;AACA;AACA,UAAI,CAACyS,WAAL,EAAkB;AAChB,aAAK,IAAIrhB,IAAT,IAAiB4O,aAAayQ,eAA9B,EAA+C;AAC7C,eAAK1B,uBAAL,CAA6B3d,IAA7B;AACD;AACF;AACD,UAAImhB,eAAJ,EAAqB;AACnB;AACA;AACAvS,uBAAe,4BAA6B9K,OAAOC,MAAP,CAAc6K,YAAd,CAA5C;AACAA,qBAAayS,WAAb,GAA2BA,WAA3B;AACA,YAAI,CAACA,WAAD,IAAgB,KAAKjE,cAAzB,EAAyC;AACvC,cAAIkE,OAAO,KAAKC,kBAAL,IAA2B,KAAKnE,cAA3C;AACA,eAAKmE,kBAAL,GAA0BD,KAAKhC,gBAAL,GAAwB1Q,YAAlD;AACAA,uBAAa4S,oBAAb,GAAoCF,IAApC;AACA,iBAAO1S,YAAP;AACD;AACF;AACD,aAAO,KAAKwO,cAAL,GAAsBxO,YAA7B;AACD;;AAED;;;;;;;;;;;;AAYA,WAAOiJ,0BAAP,CAAkCjJ,YAAlC,EAAgD5O,IAAhD,EAAsD0d,MAAtD,EAA8D;AAC5D,UAAI+D,YAAY7S,aAAa6S,SAAb,GAAyB7S,aAAa6S,SAAb,IAA0B,EAAnE;AACAA,gBAAUzhB,IAAV,IAAkB,IAAlB;AACA,UAAImS,UAAUvD,aAAayQ,eAAb,GAA+BzQ,aAAayQ,eAAb,IAAgC,EAA7E;AACA,UAAIqC,cAAcvP,QAAQnS,IAAR,IAAgBmS,QAAQnS,IAAR,KAAiB,EAAnD;AACA0hB,kBAAYrV,IAAZ,CAAiBqR,MAAjB;AACD;;AAED;;;;;;;;;;;;;;;;;;;;AAoBA7P,mBAAe5I,QAAf,EAAyB;AACvB;AACA;AACAqY,gBAAUqE,YAAV,CAAuB,IAAvB;AACA,UAAI3T,MAAM,MAAMH,cAAN,CAAqB5I,QAArB,CAAV;AACAqY,gBAAUsE,UAAV,CAAqB,IAArB;AACA,UAAIhT,eAAe,4BAA6B,KAAK1C,aAAL,CAAmBjH,QAAnB,EAA6B,IAA7B,CAAhD;AACA;AACA2J,mBAAamJ,QAAb,GAAwB/J,IAAI+J,QAA5B;AACA;AACA,UAAI,CAACnJ,aAAayS,WAAlB,EAA+B;AAC7B,YAAIQ,QAAQjT,aAAakT,UAAb,GAA0B,EAAtC;AACA,aAAK,IAAIC,IAAE/T,IAAIhC,UAAf,EAA2B+V,CAA3B,EAA8BA,IAAEA,EAAEC,WAAlC,EAA+C;AAC7CH,gBAAMxV,IAAN,CAAW0V,CAAX;AACD;AACF;AACD/T,UAAIY,YAAJ,GAAmBA,YAAnB;AACA;AACA8J,oBAAc,IAAd,EAAoB9J,YAApB;AACA;AACA,UAAI,KAAK6P,WAAT,EAAsB;AACpBlM,mBAAW,IAAX,EAAiB3D,aAAayQ,eAA9B,EAA+C,KAAKvL,MAApD,EAA4D,IAA5D,EACE,KADF,EACSlF,aAAamJ,QADtB;AAED;AACD,aAAO/J,GAAP;AACD;;AAED;;;;;;;;AAQAiU,oBAAgBjU,GAAhB,EAAqB;AACnB;AACA,UAAIY,eAAeZ,IAAIY,YAAvB;AACA,UAAIA,aAAa4S,oBAAjB,EAAuC;AACrC5S,qBAAa4S,oBAAb,CAAkClC,gBAAlC,GACE1Q,aAAa0Q,gBADf;AAED;AACD,UAAI1Q,aAAa0Q,gBAAjB,EAAmC;AACjC1Q,qBAAa0Q,gBAAb,CAA8BkC,oBAA9B,GACE5S,aAAa4S,oBADf;AAED;AACD,UAAI,KAAKD,kBAAL,IAA2B3S,YAA/B,EAA6C;AAC3C,aAAK2S,kBAAL,GAA0B3S,aAAa4S,oBAAvC;AACD;AACD5S,mBAAa4S,oBAAb,GAAoC5S,aAAa0Q,gBAAb,GAAgC,IAApE;AACA;AACA,UAAIuC,QAAQjT,aAAakT,UAAzB;AACA,WAAK,IAAIxb,IAAE,CAAX,EAAcA,IAAEub,MAAMlc,MAAtB,EAA8BW,GAA9B,EAAmC;AACjC,YAAI0R,OAAO6J,MAAMvb,CAAN,CAAX;AACA0R,aAAKzH,UAAL,CAAgBC,WAAhB,CAA4BwH,IAA5B;AACD;AACF;;AAED;;;;;;;;;;;;;;;;;AAiBA,WAAOkK,kBAAP,CAA0BlK,IAA1B,EAAgCpJ,YAAhC,EAA8CC,QAA9C,EAAwD;AACtD,UAAIsT,QAAQ,MAAMD,kBAAN,CAAyBlK,IAAzB,EAA+BpJ,YAA/B,EAA6CC,QAA7C,CAAZ;AACA,UAAImJ,KAAKoK,QAAL,KAAkBC,KAAKC,SAA3B,EAAsC;AACpC,YAAIzL,QAAQ,KAAK0L,cAAL,CAAoBvK,KAAKnM,WAAzB,EAAsC+C,YAAtC,CAAZ;AACA,YAAIiI,KAAJ,EAAW;AACT;AACA;AACA;AACAmB,eAAKnM,WAAL,GAAmB6O,iBAAiB7D,KAAjB,KAA2B,GAA9C;AACAF,qBAAW,IAAX,EAAiB/H,YAAjB,EAA+BC,QAA/B,EAAyC,MAAzC,EAAiD,aAAjD,EAAgEgI,KAAhE;AACAsL,kBAAQ,IAAR;AACD;AACF;AACD,aAAOA,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBA,WAAOK,2BAAP,CAAmCxK,IAAnC,EAAyCpJ,YAAzC,EAAuDC,QAAvD,EAAiErI,IAAjE,EAAuEH,KAAvE,EAA8E;AAC5E,UAAIwQ,QAAQ,KAAK0L,cAAL,CAAoBlc,KAApB,EAA2BuI,YAA3B,CAAZ;AACA,UAAIiI,KAAJ,EAAW;AACT;AACA,YAAI4L,WAAWjc,IAAf;AACA,YAAIoQ,OAAO,UAAX;AACA,YAAIpQ,KAAKA,KAAKb,MAAL,GAAY,CAAjB,KAAuB,GAA3B,EAAgC;AAC9Ba,iBAAOA,KAAKc,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACAsP,iBAAO,WAAP;AACD;AACD;AACA,YAAIE,UAAU4D,iBAAiB7D,KAAjB,CAAd;AACA,YAAIC,WAAWF,QAAQ,WAAvB,EAAoC;AAClCoB,eAAK0K,YAAL,CAAkBlc,IAAlB,EAAwBsQ,OAAxB;AACD;AACD;AACA;AACA;AACA;AACA,YAAIkB,KAAK5K,SAAL,KAAmB,OAAnB,IAA8BqV,aAAa,OAA/C,EAAwD;AACtDzK,eAAK0K,YAAL,CAAkBD,QAAlB,EAA4B,EAA5B;AACD;AACD;AACAzK,aAAK2K,eAAL,CAAqBF,QAArB;AACA;AACA;AACA;AACA;AACA,YAAI7L,SAAS,UAAb,EAAyB;AACvBpQ,iBAAO,2EAAAlG,CAAgBkG,IAAhB,CAAP;AACD;AACDmQ,mBAAW,IAAX,EAAiB/H,YAAjB,EAA+BC,QAA/B,EAAyC+H,IAAzC,EAA+CpQ,IAA/C,EAAqDqQ,KAArD,EAA4DC,OAA5D;AACA,eAAO,IAAP;AACD,OA/BD,MA+BO;AACL,eAAO,MAAM0L,2BAAN,CAAkCxK,IAAlC,EAAwCpJ,YAAxC,EAAsDC,QAAtD,EAAgErI,IAAhE,EAAsEH,KAAtE,CAAP;AACD;AACF;;AAED;;;;;;;;;;;;;;AAcA,WAAOuc,4BAAP,CAAoC5K,IAApC,EAA0CpJ,YAA1C,EAAwDC,QAAxD,EAAkE;AAChE,UAAIsT,QAAQ,MAAMS,4BAAN,CAAmC5K,IAAnC,EAAyCpJ,YAAzC,EAAuDC,QAAvD,CAAZ;AACA;AACA,UAAI4S,YAAY5S,SAASD,YAAT,CAAsB6S,SAAtC;AACA,UAAItT,OAAO,GAAX;AACA,WAAK,IAAI8J,MAAT,IAAmBwJ,SAAnB,EAA8B;AAC5B,YAAI5K,QAAQ,CAAC,EAAE1I,IAAF,EAAQ8J,MAAR,EAAgBR,cAAc,CAACQ,MAAD,CAA9B,EAAD,CAAZ;AACAtB,mBAAW,IAAX,EAAiB/H,YAAjB,EAA+BC,QAA/B,EAAyC,UAAzC,EAAqD,WAAWoJ,MAAhE,EAAwEpB,KAAxE;AACD;AACD,aAAOsL,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,WAAOI,cAAP,CAAsBM,IAAtB,EAA4BjU,YAA5B,EAA0C;AACxC,UAAIiI,QAAQ,EAAZ;AACA,UAAIiM,YAAY,CAAhB;AACA,UAAIpiB,CAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO,CAACA,IAAI8Z,aAAauI,IAAb,CAAkBF,IAAlB,CAAL,MAAkC,IAAzC,EAA+C;AAC7C;AACA,YAAIniB,EAAEwG,KAAF,GAAU4b,SAAd,EAAyB;AACvBjM,gBAAMxK,IAAN,CAAW,EAACyK,SAAS+L,KAAKvb,KAAL,CAAWwb,SAAX,EAAsBpiB,EAAEwG,KAAxB,CAAV,EAAX;AACD;AACD;AACA,YAAIiH,OAAOzN,EAAE,CAAF,EAAK,CAAL,CAAX;AACA,YAAI0U,SAAShR,QAAQ1D,EAAE,CAAF,CAAR,CAAb;AACA,YAAIuX,SAASvX,EAAE,CAAF,EAAKkP,IAAL,EAAb;AACA,YAAIoT,cAAc,KAAlB;AAAA,YAAyBC,cAAc,EAAvC;AAAA,YAA2CC,QAAQ,CAAC,CAApD;AACA,YAAI/U,QAAQ,GAAR,IAAe,CAAC+U,QAAQjL,OAAOzX,OAAP,CAAe,IAAf,CAAT,IAAiC,CAApD,EAAuD;AACrDyiB,wBAAchL,OAAOrV,SAAP,CAAiBsgB,QAAQ,CAAzB,CAAd;AACAjL,mBAASA,OAAOrV,SAAP,CAAiB,CAAjB,EAAoBsgB,KAApB,CAAT;AACAF,wBAAc,IAAd;AACD;AACD,YAAIG,YAAYvI,YAAY3C,MAAZ,CAAhB;AACA,YAAIR,eAAe,EAAnB;AACA,YAAI0L,SAAJ,EAAe;AACb;AACA,cAAI,EAAChK,IAAD,EAAOvF,UAAP,KAAqBuP,SAAzB;AACA,eAAK,IAAI7c,IAAE,CAAX,EAAcA,IAAE6S,KAAKxT,MAArB,EAA6BW,GAA7B,EAAkC;AAChC,gBAAI8S,MAAMD,KAAK7S,CAAL,CAAV;AACA,gBAAI,CAAC8S,IAAItC,OAAT,EAAkB;AAChBW,2BAAapL,IAAb,CAAkB+M,GAAlB;AACD;AACF;AACD,cAAI5O,aAAaoE,aAAapE,UAA9B;AACA,cAAIA,cAAcA,WAAWoJ,UAAX,CAAd,IAAwCuP,UAAUjK,MAAtD,EAA8D;AAC5DzB,yBAAapL,IAAb,CAAkBuH,UAAlB;AACAuP,sBAAUpP,SAAV,GAAsB,IAAtB;AACD;AACF,SAdD,MAcO;AACL;AACA0D,uBAAapL,IAAb,CAAkB4L,MAAlB;AACD;AACDpB,cAAMxK,IAAN,CAAW;AACT4L,gBADS,EACD9J,IADC,EACKiH,MADL,EACa4N,WADb,EAC0BG,SAD1B,EACqC1L,YADrC;AAETxC,iBAAOgO;AAFE,SAAX;AAIAH,oBAAYtI,aAAasI,SAAzB;AACD;AACD;AACA,UAAIA,aAAaA,YAAYD,KAAKld,MAAlC,EAA0C;AACxC,YAAImR,UAAU+L,KAAKjgB,SAAL,CAAekgB,SAAf,CAAd;AACA,YAAIhM,OAAJ,EAAa;AACXD,gBAAMxK,IAAN,CAAW;AACTyK,qBAASA;AADA,WAAX;AAGD;AACF;AACD,UAAID,MAAMlR,MAAV,EAAkB;AAChB,eAAOkR,KAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;AAED;;;;;;;;;;;;;;AAcA,WAAOsB,gBAAP,CAAwBpH,IAAxB,EAA8BuG,IAA9B,EAAoC1S,IAApC,EAA0CgE,KAA1C,EAAiD4J,QAAjD,EAA2DC,QAA3D,EAAqE;AACnE,UAAIpM,KAAJ;AACA,UAAIiR,KAAK6L,SAAT,EAAoB;AAClB9c,gBAAQ8P,gBAAgBpF,IAAhB,EAAsBnM,IAAtB,EAA4BgE,KAA5B,EAAmC4J,QAAnC,EAA6C8E,KAAK6L,SAAlD,CAAR;AACD,OAFD,MAEO,IAAIve,QAAQ0S,KAAKW,MAAjB,EAAyB;AAC9B5R,gBAAQ,mEAAA0O,CAAMhE,IAAN,EAAYuG,KAAKW,MAAjB,CAAR;AACD,OAFM,MAEA;AACL,YAAIxF,YAAY,sEAAA2I,CAASxW,IAAT,CAAhB,EAAgC;AAC9ByB,kBAAQ,mEAAA0O,CAAMhE,IAAN,EAAYnM,IAAZ,CAAR;AACD,SAFD,MAEO;AACLyB,kBAAQ0K,KAAK+C,MAAL,CAAYlP,IAAZ,CAAR;AACD;AACF;AACD,UAAI0S,KAAKlC,MAAT,EAAiB;AACf/O,gBAAQ,CAACA,KAAT;AACD;AACD,aAAOA,KAAP;AACD;;AAx+C+C;;AA4+ClD;AACA2L,wBAAsB9J,eAAtB;;AAEA,SAAOA,eAAP;AACD,CAlgD8B,CAAxB;AAAA;AAAA;;AAogDP;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAIoV,YAAY;;AAEd8F,SAAO,EAFO;;AAId;;;;AAIA7F,eAAaxM,IAAb,EAAmB;AACjB,QAAI,KAAKqS,KAAL,CAAWzd,MAAf,EAAuB;AACrB,UAAIyO,OAAO,KAAKgP,KAAL,CAAW,KAAKA,KAAL,CAAWzd,MAAX,GAAkB,CAA7B,CAAX;AACAyO,WAAK8D,cAAL,CAAoBnH,IAApB;AACD;AACF,GAba;;AAed;;;;AAIA4Q,eAAa5Q,IAAb,EAAmB;AACjB,SAAKqS,KAAL,CAAW/W,IAAX,CAAgB0E,IAAhB;AACD,GArBa;;AAuBd;;;;AAIA6Q,aAAW7Q,IAAX,EAAiB;AACf,QAAIsS,WAAW,KAAKD,KAAL,CAAWzd,MAA1B;AACA,QAAI0d,YAAY,KAAKD,KAAL,CAAWC,WAAS,CAApB,KAA0BtS,IAA1C,EAAgD;AAC9C,WAAKqS,KAAL,CAAWrD,GAAX;AACD;AACF;;AAhCa,CAAhB,C;;;;;;;;;;;;;;;;;;;AC1iFA;;AAEO,SAASzB,MAAT,CAAgB1Z,IAAhB,EAAsB;AAC3B,SAAOA,KAAKpE,OAAL,CAAa,GAAb,KAAqB,CAA5B;AACD;;AAEM,SAASqM,IAAT,CAAcjI,IAAd,EAAoB;AACzB,MAAI0e,WAAW1e,KAAKpE,OAAL,CAAa,GAAb,CAAf;AACA,MAAI8iB,aAAa,CAAC,CAAlB,EAAqB;AACnB,WAAO1e,IAAP;AACD;AACD,SAAOA,KAAK0C,KAAL,CAAW,CAAX,EAAcgc,QAAd,CAAP;AACD;;AAEM,SAAS9P,UAAT,CAAoBvR,IAApB,EAA0B2C,IAA1B,EAAgC;AACrC;AACA,SAAO3C,KAAKzB,OAAL,CAAaoE,OAAO,GAApB,MAA6B,CAApC;AACD;;AAEM,SAAS8O,YAAT,CAAsBzR,IAAtB,EAA4B2C,IAA5B,EAAkC;AACvC;AACA,SAAOA,KAAKpE,OAAL,CAAayB,OAAO,GAApB,MAA6B,CAApC;AACD;;AAEM,SAASqT,SAAT,CAAmBrT,IAAnB,EAAyBshB,OAAzB,EAAkC3e,IAAlC,EAAwC;AAC7C,SAAO2e,UAAU3e,KAAK0C,KAAL,CAAWrF,KAAK0D,MAAhB,CAAjB;AACD;;AAEM,SAAS6V,OAAT,CAAiBvZ,IAAjB,EAAuB2C,IAAvB,EAA6B;AAClC,SAAQ3C,SAAS2C,IAAV,IACA4O,WAAWvR,IAAX,EAAiB2C,IAAjB,CADA,IAEA8O,aAAazR,IAAb,EAAmB2C,IAAnB,CAFP;AAGD;;AAEM,SAAS8a,SAAT,CAAmB9a,IAAnB,EAAyB;AAC9B,MAAI0N,MAAM6L,OAAN,CAAcvZ,IAAd,CAAJ,EAAyB;AACvB,QAAIiS,QAAQ,EAAZ;AACA,SAAK,IAAIvQ,IAAE,CAAX,EAAcA,IAAE1B,KAAKe,MAArB,EAA6BW,GAA7B,EAAkC;AAChC,UAAI6S,OAAOvU,KAAK0B,CAAL,EAAQkd,QAAR,GAAmB3T,KAAnB,CAAyB,GAAzB,CAAX;AACA,WAAK,IAAI8H,IAAE,CAAX,EAAcA,IAAEwB,KAAKxT,MAArB,EAA6BgS,GAA7B,EAAkC;AAChCd,cAAMxK,IAAN,CAAW8M,KAAKxB,CAAL,CAAX;AACD;AACF;AACD,WAAOd,MAAMrR,IAAN,CAAW,GAAX,CAAP;AACD,GATD,MASO;AACL,WAAOZ,IAAP;AACD;AACF;;AAEM,SAASiL,KAAT,CAAejL,IAAf,EAAqB;AAC1B,MAAI0N,MAAM6L,OAAN,CAAcvZ,IAAd,CAAJ,EAAyB;AACvB,WAAO8a,UAAU9a,IAAV,EAAgBiL,KAAhB,CAAsB,GAAtB,CAAP;AACD;AACD,SAAOjL,KAAK4e,QAAL,GAAgB3T,KAAhB,CAAsB,GAAtB,CAAP;AACD;;AAEM,SAASlM,GAAT,CAAakJ,IAAb,EAAmBjI,IAAnB,EAAyB4E,IAAzB,EAA+B;AACpC,MAAIxJ,OAAO6M,IAAX;AACA,MAAIgK,QAAQhH,MAAMjL,IAAN,CAAZ;AACA;AACA,OAAK,IAAI0B,IAAE,CAAX,EAAcA,IAAEuQ,MAAMlR,MAAtB,EAA8BW,GAA9B,EAAmC;AACjC,QAAI,CAACtG,IAAL,EAAW;AACT;AACD;AACD,QAAIsX,OAAOT,MAAMvQ,CAAN,CAAX;AACAtG,WAAOA,KAAKsX,IAAL,CAAP;AACD;AACD,MAAI9N,IAAJ,EAAU;AACRA,SAAK5E,IAAL,GAAYiS,MAAMrR,IAAN,CAAW,GAAX,CAAZ;AACD;AACD,SAAOxF,IAAP;AACD;;AAEM,SAAS4D,GAAT,CAAaiJ,IAAb,EAAmBjI,IAAnB,EAAyByB,KAAzB,EAAgC;AACrC,MAAIrG,OAAO6M,IAAX;AACA,MAAIgK,QAAQhH,MAAMjL,IAAN,CAAZ;AACA,MAAI0c,OAAOzK,MAAMA,MAAMlR,MAAN,GAAa,CAAnB,CAAX;AACA,MAAIkR,MAAMlR,MAAN,GAAe,CAAnB,EAAsB;AACpB;AACA,SAAK,IAAIW,IAAE,CAAX,EAAcA,IAAEuQ,MAAMlR,MAAN,GAAa,CAA7B,EAAgCW,GAAhC,EAAqC;AACnC,UAAIgR,OAAOT,MAAMvQ,CAAN,CAAX;AACAtG,aAAOA,KAAKsX,IAAL,CAAP;AACA,UAAI,CAACtX,IAAL,EAAW;AACT;AACD;AACF;AACD;AACAA,SAAKshB,IAAL,IAAajb,KAAb;AACD,GAXD,MAWO;AACL;AACArG,SAAK4E,IAAL,IAAayB,KAAb;AACD;AACD,SAAOwQ,MAAMrR,IAAN,CAAW,GAAX,CAAP;AACD;;AAEM,MAAMie,SAASnF,MAAf,C;;;;;;;;;;;;;;AC/FP;AACA;AACA;AACA;;AAEA,IAAIne,UAAU,gDAAd;;AAEA,IAAIujB,YAAY,kEAAhB;;AAEA;AACA;AACA;AACA,MAAMC,mBAAmB,EAAzB;AACA,IAAIha,QAAQ3B,YAAYhF,SAAxB;AACA,OAAO2G,KAAP,EAAc;AACZ,MAAIf,QAAQ9E,OAAO8f,mBAAP,CAA2Bja,KAA3B,CAAZ;AACA,OAAK,IAAIrD,IAAE,CAAX,EAAcA,IAAEsC,MAAMjD,MAAtB,EAA8BW,GAA9B,EAAmC;AACjCqd,qBAAiB/a,MAAMtC,CAAN,CAAjB,IAA6B,IAA7B;AACD;AACDqD,UAAQ7F,OAAOqF,cAAP,CAAsBQ,KAAtB,CAAR;AACD;;AAED;;;;;;;;;;;;;AAaA,SAASka,iBAAT,CAA2B3R,KAA3B,EAAkC3D,QAAlC,EAA4C;AAC1C;AACA,MAAI,CAACoV,iBAAiBpV,QAAjB,CAAL,EAAiC;AAC/B,QAAIlI,QAAQ6L,MAAM3D,QAAN,CAAZ;AACA,QAAIlI,UAAU9E,SAAd,EAAyB;AACvB,UAAI2Q,MAAM4B,MAAV,EAAkB;AAChB;AACA;AACA5B,cAAM1E,mBAAN,CAA0Be,QAA1B,EAAoClI,KAApC;AACD,OAJD,MAIO;AACL;AACA,YAAI,CAAC6L,MAAM4R,WAAX,EAAwB;AACtB5R,gBAAM4R,WAAN,GAAoB,EAApB;AACD,SAFD,MAEO,IAAI,CAAC5R,MAAM7J,cAAN,CAAqBtI,0BAA0B,aAA1B,EAAyCmS,KAAzC,CAArB,CAAL,EAA4E;AACjFA,gBAAM4R,WAAN,GAAoBhgB,OAAOC,MAAP,CAAcmO,MAAM4R,WAApB,CAApB;AACD;AACD5R,cAAM4R,WAAN,CAAkBvV,QAAlB,IAA8BlI,KAA9B;AACD;AACF;AACF;AACF;;AAEM,MAAMiW,oBAAoB,8EAAAnZ,CAAcgZ,cAAc;;AAE3D;;;;;;;AAOA,QAAMG,iBAAN,SAAgCH,UAAhC,CAA2C;;AAEzC;;;;;;;;AAQA,WAAO4H,6BAAP,GAAuC;AACrC,UAAIC,KAAK,KAAK7X,kBAAd;AACA,WAAK,IAAI7F,IAAE,CAAX,EAAcA,IAAI0d,GAAGre,MAArB,EAA6BW,GAA7B,EAAkC;AAChC,aAAKtD,SAAL,CAAe2a,uBAAf,CAAuCxd,QAAQG,eAAR,CAAwB0jB,GAAG1d,CAAH,CAAxB,CAAvC;AACD;AACF;;AAED8C,kBAAc;AACZ;AACA;AACA,WAAK6a,aAAL;AACA;AACA,WAAK9G,aAAL;AACA;AACA,WAAK4B,aAAL;AACA;AACA,WAAKN,WAAL;AACA;AACA,WAAKyF,aAAL;AACA;AACA,WAAKpQ,MAAL;AACA;AACA,WAAKkC,aAAL;AACA;AACA,WAAKD,SAAL;AACA;AACA,WAAK+N,WAAL;AACA;AACA,WAAKxN,iBAAL;AACA;AACA,WAAK6N,mBAAL;AACA,WAAKpX,qBAAL;AACD;;AAED;;;;;;;;AAQAsB,6BAAyB7H,IAAzB,EAA+B8H,GAA/B,EAAoCjI,KAApC,EAA2C;AACzC,UAAIiI,QAAQjI,KAAZ,EAAmB;AACjB,aAAKmI,oBAAL,CAA0BhI,IAA1B,EAAgCH,KAAhC;AACD;AACF;;AAED;;;;;;;;AAQA0G,4BAAwB;AACtB,WAAKkX,aAAL,GAAqB,KAArB;AACA,WAAK9G,aAAL,GAAqB,CAArB;AACA,WAAK4B,aAAL,GAAqB,KAArB;AACA,WAAKN,WAAL,GAAmB,KAAnB;AACA,WAAKyF,aAAL,GAAqB,KAArB;AACA,WAAKpQ,MAAL,GAAc,EAAd;AACA,WAAKkC,aAAL,GAAqB,IAArB;AACA,WAAKD,SAAL,GAAiB,IAAjB;AACA,UAAI,KAAK+N,WAAT,EAAsB;AACpB,aAAKtG,0BAAL,CAAgC,KAAKsG,WAArC;AACA,aAAKA,WAAL,GAAmB,IAAnB;AACD;AACD;AACA;AACA;AACA,WAAK,IAAIjb,CAAT,IAAc,KAAKyN,iBAAnB,EAAsC;AACpC,YAAI,KAAKjO,cAAL,CAAoBQ,CAApB,CAAJ,EAA4B;AAC1B,eAAKsb,mBAAL,GAA2B,KAAKA,mBAAL,IAA4B,EAAvD;AACA,eAAKA,mBAAL,CAAyBtb,CAAzB,IAA8B,KAAKA,CAAL,CAA9B;AACA,iBAAO,KAAKA,CAAL,CAAP;AACD;AACF;AACF;;AAED;;;;;;;;;;;;AAYA2U,+BAA2B5U,KAA3B,EAAkC;AAChC,WAAK,IAAIC,CAAT,IAAcD,KAAd,EAAqB;AACnB,aAAK4V,YAAL,CAAkB3V,CAAlB,EAAqBD,MAAMC,CAAN,CAArB;AACD;AACF;;AAED;;;;;;;;;;;;AAYA4U,kCAA8B7U,KAA9B,EAAqC;AACnC9E,aAAOyD,MAAP,CAAc,IAAd,EAAoBqB,KAApB;AACD;;AAED;;;;;;;;AAQAwb,qBAAiBC,SAAjB,EAA4Bhe,KAA5B,EAAmC;AACjC,UAAI,CAAC,KAAKie,YAAL,CAAkBD,SAAlB,CAAL,EAAmC;AACjC,aAAK/L,qBAAL,CAA2B,IAA3B,EAAiCjS,KAAjC,EAAwCge,SAAxC;AACD;AACF;;AAED;;;;;;;;;;AAUA7V,yBAAqB6V,SAArB,EAAgChe,KAAhC,EAAuC0C,IAAvC,EAA6C;AAC3C;AACA,UAAI,CAAC,KAAKkb,aAAV,EAAyB;AACvB,YAAI1V,WAAWpO,QAAQG,eAAR,CAAwB+jB,SAAxB,CAAf;AACA,aAAK9V,QAAL,IAAiB,KAAKgW,iBAAL,CAAuBle,KAAvB,EAA8B0C,IAA9B,CAAjB;AACD;AACF;;AAED;;;;;;;AAOA2M,yBAAqBnH,QAArB,EAA+B8V,SAA/B,EAA0Che,KAA1C,EAAiD;AAC/C,WAAK4d,aAAL,GAAqB,IAArB;AACA5d,cAASma,UAAU7a,MAAV,GAAmB,CAApB,GAAyB,KAAK4I,QAAL,CAAzB,GAA0ClI,KAAlD;AACA,WAAKiS,qBAAL,CAA2B,IAA3B,EAAiCjS,KAAjC,EACEge,aAAalkB,QAAQS,eAAR,CAAwB2N,QAAxB,CADf;AAEA,WAAK0V,aAAL,GAAqB,KAArB;AACD;;AAED;;;;;;;;;;;;AAYA3L,0BAAsBN,IAAtB,EAA4B3R,KAA5B,EAAmCge,SAAnC,EAA8C;AAC5C,UAAIG,MAAM,KAAKC,eAAL,CAAqBpe,KAArB,CAAV;AACA,UAAIme,QAAQjjB,SAAZ,EAAuB;AACrByW,aAAK2K,eAAL,CAAqB0B,SAArB;AACD,OAFD,MAEO;AACLrM,aAAK0K,YAAL,CAAkB2B,SAAlB,EAA6BG,GAA7B;AACD;AACF;;AAED;;;;;;;;;;AAUAC,oBAAgBpe,KAAhB,EAAuB;AACrB;AACA,cAAQ,OAAOA,KAAf;AACE,aAAK,SAAL;AACE,iBAAOA,QAAQ,EAAR,GAAa9E,SAApB;;AAEF,aAAK,QAAL;AACE,cAAI8E,iBAAiBqe,IAArB,EAA2B;AACzB,mBAAOre,MAAMmd,QAAN,EAAP;AACD,WAFD,MAEO,IAAInd,KAAJ,EAAW;AAChB,gBAAI;AACF,qBAAOse,KAAKC,SAAL,CAAeve,KAAf,CAAP;AACD,aAFD,CAEE,OAAMwe,CAAN,EAAS;AACT,qBAAO,EAAP;AACD;AACF;;AAEH;AACE,iBAAOxe,SAAS,IAAT,GAAgBA,MAAMmd,QAAN,EAAhB,GAAmCjiB,SAA1C;AAhBJ;AAkBD;;AAED;;;;;;;;;;;;;;;;;AAiBAgjB,sBAAkBle,KAAlB,EAAyB0C,IAAzB,EAA+B;AAC7B;;;AAGA,UAAI+b,QAAJ;AACA,cAAQ/b,IAAR;AACE,aAAKoS,MAAL;AACE2J,qBAAW3J,OAAO9U,KAAP,CAAX;AACA;;AAEF,aAAKjC,OAAL;AACE0gB,qBAAYze,UAAU,IAAtB;AACA;;AAEF,aAAKvC,MAAL;AACE,cAAI;AACFghB,uBAAWH,KAAKI,KAAL,EAAW,mBAAoB1e,KAA/B,CAAX;AACD,WAFD,CAEE,OAAMwe,CAAN,EAAS;AACT;AACD;AACD;;AAEF,aAAKvS,KAAL;AACE,cAAI;AACFwS,uBAAWH,KAAKI,KAAL,EAAW,mBAAoB1e,KAA/B,CAAX;AACD,WAFD,CAEE,OAAMwe,CAAN,EAAS;AACTC,uBAAW,IAAX;AACAtd,oBAAQ0I,IAAR,CAAc,uDAAsD7J,KAAM,EAA1E;AACD;AACD;;AAEF,aAAKqe,IAAL;AACEI,qBAAW,IAAIJ,IAAJ,CAASre,KAAT,CAAX;AACA;;AAEF,aAAK2e,MAAL;AACA;AACEF,qBAAWze,KAAX;AACA;AAjCJ;;AAoCA,aAAOye,QAAP;AACD;AACD;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBAnH,4BAAwBpP,QAAxB,EAAkC3D,QAAlC,EAA4C;AAC1C,UAAI,CAAC,KAAKvC,cAAL,CAAoB,mBAApB,CAAL,EAA+C;AAC7C,aAAKiO,iBAAL,GAAyBxS,OAAOyD,MAAP,CAAc,EAAd,EAAkB,KAAK+O,iBAAvB,CAAzB;AACD;AACD,UAAI,CAAC,KAAKA,iBAAL,CAAuB/H,QAAvB,CAAL,EAAuC;AACrC,aAAK+H,iBAAL,CAAuB/H,QAAvB,IAAmC,IAAnC;AACAsV,0BAAkB,IAAlB,EAAwBtV,QAAxB;AACAzK,eAAOmhB,cAAP,CAAsB,IAAtB,EAA4B1W,QAA5B,EAAsC;AACpC;AACA;AACA5K,eAAK,YAAW;AACd,mBAAO,KAAKmQ,MAAL,CAAYvF,QAAZ,CAAP;AACD,WALmC;AAMpC;AACA3K,eAAKgH,WAAW,YAAW,CAAE,CAAxB,GAA2B,UAASvE,KAAT,EAAgB;AAC9C,iBAAKmY,YAAL,CAAkBjQ,QAAlB,EAA4BlI,KAA5B;AACD;AACD;AAVoC,SAAtC;AAYD;AACF;;AAED;;;;;;AAMAkH,iBAAagB,QAAb,EAAuB;AACrB,aAAO,KAAK+H,iBAAL,IAA0B,KAAKA,iBAAL,CAAuB/H,QAAvB,CAAjC;AACD;;AAED;;;;;;;;AAQAiQ,iBAAajQ,QAAb,EAAuBlI,KAAvB,EAA8B;AAC5B,UAAI,KAAKmH,mBAAL,CAAyBe,QAAzB,EAAmClI,KAAnC,CAAJ,EAA+C;AAC7C,aAAKiO,qBAAL;AACD;AACF;;AAED;;;;;;;;;;;AAWA9G,wBAAoBe,QAApB,EAA8BlI,KAA9B,EAAqC;AACnC,UAAIiI,MAAM,KAAKwF,MAAL,CAAYvF,QAAZ,CAAV;AACA,UAAI2W,UAAU,KAAK7G,qBAAL,CAA2B9P,QAA3B,EAAqClI,KAArC,EAA4CiI,GAA5C,CAAd;AACA,UAAI4W,OAAJ,EAAa;AACX,YAAI,CAAC,KAAKlP,aAAV,EAAyB;AACvB,eAAKA,aAAL,GAAqB,EAArB;AACA,eAAKD,SAAL,GAAiB,EAAjB;AACD;AACD;AACA,YAAI,KAAKA,SAAL,IAAkB,EAAExH,YAAY,KAAKwH,SAAnB,CAAtB,EAAqD;AACnD,eAAKA,SAAL,CAAexH,QAAf,IAA2BD,GAA3B;AACD;AACD,aAAKwF,MAAL,CAAYvF,QAAZ,IAAwBlI,KAAxB;AACA,aAAK2P,aAAL,CAAmBzH,QAAnB,IAA+BlI,KAA/B;AACD;AACD,aAAO6e,OAAP;AACD;;AAED;;;;;;;AAOAC,uBAAmBnlB,IAAnB,EAAyB;AACvB,aAAOoE,QAAQ,KAAK4R,aAAL,IAAuBhW,QAAQ,KAAKgW,aAA5C,CAAP;AACD;;AAED;;;;;;AAMA1B,4BAAwB;AACtB,UAAI,CAAC,KAAK4P,aAAN,IAAuB,KAAKzF,WAAhC,EAA6C;AAC3C,aAAKyF,aAAL,GAAqB,IAArB;AACAR,kBAAU0B,GAAV,CAAc,MAAM;AAClB,cAAI,KAAKlB,aAAT,EAAwB;AACtB,iBAAKA,aAAL,GAAqB,KAArB;AACA,iBAAKxF,gBAAL;AACD;AACF,SALD;AAMD;AACF;;AAED;;;;;;;;AAQAhR,wBAAoB;AAClB,UAAI,CAAC,KAAKqR,aAAV,EAAyB;AACvB,aAAKA,aAAL,GAAqB,IAArB;AACA,YAAI,KAAKoF,mBAAT,EAA8B;AAC5B,eAAK1G,6BAAL,CAAmC,KAAK0G,mBAAxC;AACA,eAAKA,mBAAL,GAA2B,IAA3B;AACD;AACD,aAAKvW,KAAL;AACD;AACF;;AAED;;;;;;;;;AASA8Q,uBAAmB;AACjB,UAAI,KAAK1I,aAAL,IAAsB,KAAKD,SAA/B,EAA0C;AACxC,YAAIH,eAAe,KAAKI,aAAxB;AACA,aAAKA,aAAL,GAAqB,IAArB;AACA,aAAKmH,aAAL;AACA,aAAK+B,kBAAL,CAAwB,KAAKpL,MAA7B,EAAqC8B,YAArC,EAAmD,KAAKG,SAAxD;AACA,aAAKoH,aAAL;AACD;AACF;;AAED;;;;;;;;;;;;;;AAcAvP,YAAQ;AACN,WAAK6Q,WAAL,GAAmB,IAAnB;AACA;AACA,WAAKC,gBAAL;AACD;;AAED;;;;;;;;;;;AAWAQ,uBAAmBC,YAAnB,EAAiCvJ,YAAjC,EAA+CpD,QAA/C,EAAyD,CACxD,CADD,CAA2D;;;AAG3D;;;;;;;;;;;;;;;;;;;AAmBA6L,0BAAsB9P,QAAtB,EAAgClI,KAAhC,EAAuCiI,GAAvC,EAA4C;AAC1C;AACE;AACCA,gBAAQjI,KAAR;AACA;AACCiI,gBAAQA,GAAR,IAAejI,UAAUA,KAF1B;AAFH;AAMD;;AA9fwC;;AAkgB3C,SAAOiW,iBAAP;AAED,CA7gBgC,CAA1B,C;;;;;;;;;;;ACzDP;;AAEA;AACA,IAAI+I,cAAJ,C,CAAoB;;AAEpB;AACA,IAAIC,sBAAsB,CAA1B;AACA,IAAIC,sBAAsB,CAA1B;AACA,IAAIC,qBAAqB,EAAzB;AACA,IAAIC,uBAAuB,CAA3B;AACA,IAAIC,gBAAgB7jB,SAAS8jB,cAAT,CAAwB,EAAxB,CAApB;AACA,IAAI7lB,OAAO8lB,gBAAX,CAA4BC,cAA5B,EAA4CC,OAA5C,CAAoDJ,aAApD,EAAmE,EAACK,eAAe,IAAhB,EAAnE;;AAEA,SAASF,cAAT,GAA0B;AACxB,QAAMhG,MAAM2F,mBAAmB7f,MAA/B;AACA,OAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIuZ,GAApB,EAAyBvZ,GAAzB,EAA8B;AAC5B,QAAI0f,KAAKR,mBAAmBlf,CAAnB,CAAT;AACA,QAAI0f,EAAJ,EAAQ;AACN,UAAI;AACFA;AACD,OAFD,CAEE,OAAOpkB,CAAP,EAAU;AACVqkB,mBAAW,MAAM;AAAE,gBAAMrkB,CAAN;AAAU,SAA7B;AACD;AACF;AACF;AACD4jB,qBAAmB1H,MAAnB,CAA0B,CAA1B,EAA6B+B,GAA7B;AACA0F,yBAAuB1F,GAAvB;AACD;;AAEM,MAAMqG,UAAU;AACrB;;;;;;;;AAQAC,QAAMC,KAAN,EAAa;AACX,WAAQ;AACNhB,UAAI/R,EAAJ,EAAQ;AAAE,eAAO4S,WAAW5S,EAAX,EAAe+S,KAAf,CAAP;AAA+B,OADnC;AAENC,cAAQvmB,OAAOwmB,YAAP,CAAoBC,IAApB,CAAyBzmB,MAAzB;AAFF,KAAR;AAID,GAdoB;AAerB;;;;;;;AAOAslB,OAAKtlB,OAAOmmB,UAAP,CAAkBM,IAAlB,CAAuBzmB,MAAvB,CAtBgB;AAuBrB;;;;;;AAMAumB,UAAQvmB,OAAOwmB,YAAP,CAAoBC,IAApB,CAAyBzmB,MAAzB;AA7Ba,CAAhB;AAAA;AAAA;;AAgCA,MAAM0mB,iBAAiB;AAC5B;;;;;;;AAOApB,OAAKtlB,OAAO2mB,qBAAP,CAA6BF,IAA7B,CAAkCzmB,MAAlC,CARuB;AAS5B;;;;;;AAMAumB,UAAQvmB,OAAO4mB,oBAAP,CAA4BH,IAA5B,CAAiCzmB,MAAjC;AAfoB,CAAvB;AAAA;AAAA;;AAkBA,MAAM6mB,aAAa;AACxB;;;;;;;AAOAvB,MAAI/R,EAAJ,EAAQ;AACN,WAAOvT,OAAO8mB,mBAAP,GACL9mB,OAAO8mB,mBAAP,CAA2BvT,EAA3B,CADK,GAELvT,OAAOmmB,UAAP,CAAkB5S,EAAlB,EAAsB,EAAtB,CAFF;AAGD,GAZuB;AAaxB;;;;;;AAMAgT,SAAOQ,MAAP,EAAe;AACb/mB,WAAOgnB,kBAAP,GACEhnB,OAAOgnB,kBAAP,CAA0BD,MAA1B,CADF,GAEE/mB,OAAOwmB,YAAP,CAAoBO,MAApB,CAFF;AAGD;AAvBuB,CAAnB;AAAA;AAAA;;AA0BA,MAAME,YAAY;;AAEvB;;;;;;;AAOA3B,MAAI4B,QAAJ,EAAc;AACZtB,kBAAc7Z,WAAd,GAA4B4Z,sBAA5B;AACAD,uBAAmBnZ,IAAnB,CAAwB2a,QAAxB;AACA,WAAO1B,qBAAP;AACD,GAbsB;;AAevB;;;;;;AAMAe,SAAOQ,MAAP,EAAe;AACb,UAAMhJ,MAAMgJ,SAAStB,mBAArB;AACA,QAAI1H,OAAO,CAAX,EAAc;AACZ,UAAI,CAAC2H,mBAAmB3H,GAAnB,CAAL,EAA8B;AAC5B,cAAM,IAAIzP,KAAJ,CAAU,2BAA2ByY,MAArC,CAAN;AACD;AACDrB,yBAAmB3H,GAAnB,IAA0B,IAA1B;AACD;AACF;;AA7BsB,CAAlB,C;;;;;;;;;;;;ACzGP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMoJ,qBAAqB;AACzB,YAAU,IADe;AAEzB,gBAAc;AAFW,CAA3B;AAIA,SAASC,qBAAT,CAA+BlP,IAA/B,EAAqC;AACnC,MAAIjO,KAAKiO,KAAK1H,YAAL,CAAkB,IAAlB,CAAT;AACA,MAAIvG,MAAMkd,mBAAmBld,EAAnB,CAAV,EAAkC;AAChC,QAAII,IAAI6N,IAAR;AACA7N,MAAEwY,eAAF,CAAkB,IAAlB;AACA3K,WAAO7N,EAAEkH,aAAF,CAAgBnP,aAAhB,CAA8B6H,EAA9B,CAAP;AACAI,MAAEoG,UAAF,CAAa4W,YAAb,CAA0BnP,IAA1B,EAAgC7N,CAAhC;AACA6N,SAAK5V,WAAL,CAAiB+H,CAAjB;AACA,WAAMA,EAAEid,UAAF,CAAazhB,MAAnB,EAA2B;AACzBqS,WAAK0K,YAAL,CAAkBvY,EAAEid,UAAF,CAAa,CAAb,EAAgB5gB,IAAlC,EAAwC2D,EAAEid,UAAF,CAAa,CAAb,EAAgB/gB,KAAxD;AACA8D,QAAEwY,eAAF,CAAkBxY,EAAEid,UAAF,CAAa,CAAb,EAAgB5gB,IAAlC;AACD;AACF;AACD,SAAOwR,IAAP;AACD;;AAED,SAASqP,gBAAT,CAA0Bxa,IAA1B,EAAgCgC,QAAhC,EAA0C;AACxC;AACA,MAAIyY,SAASzY,SAAS0Y,UAAT,IAAuBF,iBAAiBxa,IAAjB,EAAuBgC,SAAS0Y,UAAhC,CAApC;AACA;AACA,MAAID,MAAJ,EAAY;AACV;AACA;AACA,SAAK,IAAIvF,IAAEuF,OAAOtb,UAAb,EAAyB1F,IAAE,CAAhC,EAAmCyb,CAAnC,EAAsCA,IAAEA,EAAEC,WAA1C,EAAuD;AACrD,UAAInT,SAAS2Y,WAAT,KAAyBlhB,GAA7B,EAAkC;AAChC,eAAOyb,CAAP;AACD;AACF;AACF,GARD,MAQO;AACL,WAAOlV,IAAP;AACD;AACF;;AAED;AACA,SAAS4a,YAAT,CAAsB1W,IAAtB,EAA4BtN,GAA5B,EAAiCuU,IAAjC,EAAuCnJ,QAAvC,EAAiD;AAC/C,MAAIA,SAASgC,EAAb,EAAiB;AACfpN,QAAIoL,SAASgC,EAAb,IAAmBmH,IAAnB;AACD;AACF;;AAED;AACA,SAAS0P,kBAAT,CAA4B3W,IAA5B,EAAkCiH,IAAlC,EAAwCnJ,QAAxC,EAAkD;AAChD,MAAIA,SAAS8Y,MAAT,IAAmB9Y,SAAS8Y,MAAT,CAAgBhiB,MAAvC,EAA+C;AAC7C,SAAK,IAAIgS,IAAE,CAAN,EAASxH,KAAGtB,SAAS8Y,MAArB,EAA6B/lB,CAAlC,EAAsC+V,IAAExH,GAAGxK,MAAN,KAAkB/D,IAAEuO,GAAGwH,CAAH,CAApB,CAArC,EAAiEA,GAAjE,EAAsE;AACpE5G,WAAK6W,6BAAL,CAAmC5P,IAAnC,EAAyCpW,EAAE4E,IAA3C,EAAiD5E,EAAEyE,KAAnD,EAA0D0K,IAA1D;AACD;AACF;AACF;;AAED;AACA,SAAS8W,oBAAT,CAA8B9W,IAA9B,EAAoCiH,IAApC,EAA0CnJ,QAA1C,EAAoD;AAClD,MAAIA,SAASD,YAAb,EAA2B;AACzBoJ,SAAK8P,aAAL,GAAqBjZ,SAASD,YAA9B;AACD;AACF;;AAED,SAASmZ,sBAAT,CAAgCzO,OAAhC,EAAyC/E,SAAzC,EAAoDX,UAApD,EAAgE;AAC9D;AACA;AACA0F,YAAUA,QAAQC,WAAR,IAAuBD,OAAjC;AACA,MAAI0O,UAAU,UAASpmB,CAAT,EAAY;AACxB,QAAI0X,QAAQ1F,UAAR,CAAJ,EAAyB;AACvB0F,cAAQ1F,UAAR,EAAoBhS,CAApB,EAAuBA,EAAE8S,MAAzB;AACD,KAFD,MAEO;AACLlN,cAAQ0I,IAAR,CAAa,sBAAsB0D,UAAtB,GAAmC,eAAhD;AACD;AACF,GAND;AAOA,SAAOoU,OAAP;AACD;;AAEM,MAAM3L,gBAAgB,8EAAAlZ,CAAcgZ,cAAc;;AAEvD;;;;;AAKA,QAAME,aAAN,SAA4BF,UAA5B,CAAuC;;AAErC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA,WAAOiF,cAAP,CAAsBnc,QAAtB,EAAgCgjB,iBAAhC,EAAmD;AACjD;AACA,UAAI,CAAChjB,SAAS6iB,aAAd,EAA6B;AAC3B,YAAIlZ,eAAe3J,SAAS6iB,aAAT,GAAyB,EAA5C;AACAlZ,qBAAayI,YAAb,GAA4B,EAA5B;AACAzI,qBAAasZ,eAAb,GACGD,qBAAqBA,kBAAkBC,eAAxC,IACAjjB,SAASqf,YAAT,CAAsB,kBAAtB,CAFF;AAGA,aAAK3V,qBAAL,CAA2B1J,QAA3B,EAAqC2J,YAArC,EAAmD,EAAC0Y,QAAQ,IAAT,EAAnD;AACD;AACD,aAAOriB,SAAS6iB,aAAhB;AACD;;AAED,WAAOnZ,qBAAP,CAA6B1J,QAA7B,EAAuC2J,YAAvC,EAAqDC,QAArD,EAA+D;AAC7D,aAAO,KAAKqT,kBAAL,CAAwBjd,SAAS6G,OAAjC,EAA0C8C,YAA1C,EAAwDC,QAAxD,CAAP;AACD;;AAED;;;;;;;;;;;;;AAaA,WAAOqT,kBAAP,CAA0BlK,IAA1B,EAAgCpJ,YAAhC,EAA8CC,QAA9C,EAAwD;AACtD,UAAIsT,KAAJ;AACA,UAAIgG,UAAU,oBAAqBnQ,IAAnC;AACA,UAAImQ,QAAQ/a,SAAR,IAAqB,UAArB,IAAmC,CAAC+a,QAAQ7D,YAAR,CAAqB,kBAArB,CAAxC,EAAkF;AAChFnC,gBAAQ,KAAKS,4BAAL,CAAkCuF,OAAlC,EAA2CvZ,YAA3C,EAAyDC,QAAzD,KAAsEsT,KAA9E;AACD,OAFD,MAEO,IAAIgG,QAAQ/a,SAAR,KAAsB,MAA1B,EAAkC;AACvC;AACAwB,qBAAawZ,iBAAb,GAAiC,IAAjC;AACD;AACD,UAAID,QAAQnc,UAAZ,EAAwB;AACtBmW,gBAAQ,KAAKkG,wBAAL,CAA8BF,OAA9B,EAAuCvZ,YAAvC,EAAqDC,QAArD,KAAkEsT,KAA1E;AACD;AACD,UAAIgG,QAAQG,aAAR,IAAyBH,QAAQG,aAAR,EAA7B,EAAsD;AACpDnG,gBAAQ,KAAKoG,4BAAL,CAAkCJ,OAAlC,EAA2CvZ,YAA3C,EAAyDC,QAAzD,KAAsEsT,KAA9E;AACD;AACD,aAAOA,KAAP;AACD;;AAED;;;;;;;;;;;;AAYA,WAAOkG,wBAAP,CAAgCxb,IAAhC,EAAsC+B,YAAtC,EAAoDC,QAApD,EAA8D;AAC5D,WAAK,IAAImJ,OAAKnL,KAAKb,UAAd,EAA0Bwb,cAAY,CAAtC,EAAyCgB,IAA9C,EAAoDxQ,IAApD,EAA0DA,OAAKwQ,IAA/D,EAAqE;AACnE;AACA,YAAIxQ,KAAK5K,SAAL,IAAkB,UAAtB,EAAkC;AAChC4K,iBAAOkP,sBAAsBlP,IAAtB,CAAP;AACD;AACD;AACA;AACA;AACA;AACAwQ,eAAOxQ,KAAKgK,WAAZ;AACA,YAAIhK,KAAKoK,QAAL,KAAkBC,KAAKC,SAA3B,EAAsC;AACpC,cAAI,WAAYP,IAAIyG,IAApB;AACA,iBAAOzG,KAAMA,EAAEK,QAAF,KAAeC,KAAKC,SAAjC,EAA6C;AAC3CtK,iBAAKnM,WAAL,IAAoBkW,EAAElW,WAAtB;AACA2c,mBAAOzG,EAAEC,WAAT;AACAnV,iBAAK2D,WAAL,CAAiBuR,CAAjB;AACAA,gBAAIyG,IAAJ;AACD;AACD;AACA,cAAI5Z,aAAasZ,eAAb,IAAgC,CAAClQ,KAAKnM,WAAL,CAAiB+D,IAAjB,EAArC,EAA8D;AAC5D/C,iBAAK2D,WAAL,CAAiBwH,IAAjB;AACA;AACD;AACF;AACD,YAAIyQ,YAAY,EAAEjB,WAAF,EAAeD,YAAY1Y,QAA3B,EAAhB;AACA,YAAI,KAAKqT,kBAAL,CAAwBlK,IAAxB,EAA8BpJ,YAA9B,EAA4C6Z,SAA5C,CAAJ,EAA4D;AAC1DA,oBAAUC,SAAV,GAAsB9Z,aAAayI,YAAb,CAA0BhL,IAA1B,EAA+B,wBAAyBoc,SAAxD,IAAsE,CAA5F;AACD;AACD;AACA,YAAIzQ,KAAKzH,UAAT,EAAqB;AACnBiX;AACD;AACF;AACF;;AAED;;;;;;;;;;;;;;;;;AAiBA,WAAO5E,4BAAP,CAAoC5K,IAApC,EAA0CiQ,iBAA1C,EAA6DpZ,QAA7D,EAAuE;AACrE,UAAID,eAAe,KAAKwS,cAAL,CAAoBpJ,IAApB,EAA0BiQ,iBAA1B,CAAnB;AACA,UAAInc,UAAU8C,aAAa9C,OAAb,GACZkM,KAAKlM,OAAL,CAAauF,aAAb,CAA2BsX,sBAA3B,EADF;AAEA7c,cAAQ1J,WAAR,CAAoB4V,KAAKlM,OAAzB;AACA+C,eAASD,YAAT,GAAwBA,YAAxB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;;AAUA,WAAO2Z,4BAAP,CAAoCvQ,IAApC,EAA0CpJ,YAA1C,EAAwDC,QAAxD,EAAkE;AAChE;AACA;AACA,UAAIsT,QAAQ,KAAZ;AACA,UAAIyG,QAAQtW,MAAMmN,IAAN,CAAWzH,KAAKoP,UAAhB,CAAZ;AACA,WAAK,IAAI9gB,IAAEsiB,MAAMjjB,MAAN,GAAa,CAAnB,EAAsBmB,CAA3B,EAA+BA,IAAE8hB,MAAMtiB,CAAN,CAAjC,EAA4CA,GAA5C,EAAiD;AAC/C6b,gBAAQ,KAAKK,2BAAL,CAAiCxK,IAAjC,EAAuCpJ,YAAvC,EAAqDC,QAArD,EAA+D/H,EAAEN,IAAjE,EAAuEM,EAAET,KAAzE,KAAmF8b,KAA3F;AACD;AACD,aAAOA,KAAP;AACD;;AAED;;;;;;;;;;;;;;;AAeA,WAAOK,2BAAP,CAAmCxK,IAAnC,EAAyCpJ,YAAzC,EAAuDC,QAAvD,EAAiErI,IAAjE,EAAuEH,KAAvE,EAA8E;AAC5E;AACA,UAAIG,KAAKc,KAAL,CAAW,CAAX,EAAc,CAAd,MAAqB,KAAzB,EAAgC;AAC9B0Q,aAAK2K,eAAL,CAAqBnc,IAArB;AACAqI,iBAAS8Y,MAAT,GAAkB9Y,SAAS8Y,MAAT,IAAmB,EAArC;AACA9Y,iBAAS8Y,MAAT,CAAgBtb,IAAhB,CAAqB;AACnB7F,gBAAMA,KAAKc,KAAL,CAAW,CAAX,CADa;AAEnBjB;AAFmB,SAArB;AAIA,eAAO,IAAP;AACD;AACD;AATA,WAUK,IAAIG,SAAS,IAAb,EAAmB;AACtBqI,mBAASgC,EAAT,GAAcxK,KAAd;AACA,iBAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;;AAUA,WAAOwiB,mBAAP,CAA2B5jB,QAA3B,EAAqC;AACnC,UAAI2J,eAAe,0CAA4C3J,QAAD,CAAW6iB,aAAzE;AACA,aAAQlZ,gBAAgBA,aAAa9C,OAA9B,IAA0C7G,SAAS6G,OAA1D;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBA+B,mBAAe5I,QAAf,EAAyB;AACvB;AACA,UAAIA,YAAY,CAACA,SAAS6G,OAAtB,IACAhM,OAAOgpB,mBADP,IAC8BA,oBAAoBC,QADtD,EACgE;AAC9DD,4BAAoBC,QAApB,CAA6B9jB,QAA7B;AACD;AACD,UAAI2J,eAAe,KAAKxF,WAAL,CAAiBgY,cAAjB,CAAgCnc,QAAhC,CAAnB;AACA,UAAI4J,WAAWD,aAAayI,YAA5B;AACA,UAAIvL,UAAU8C,aAAa9C,OAAb,IAAwB7G,SAAS6G,OAA/C;AACA,UAAIkC,MAAM,6BAA+BnM,SAASmnB,UAAT,CAAoBld,OAApB,EAA6B,IAA7B,CAAzC;AACA;AACAkC,UAAIib,kBAAJ,GAAyB,CAACra,aAAawZ,iBAAvC;AACA,UAAIvG,QAAQ7T,IAAI+J,QAAJ,GAAe,IAAIzF,KAAJ,CAAUzD,SAASlJ,MAAnB,CAA3B;AACAqI,UAAIlB,CAAJ,GAAQ,EAAR;AACA,WAAK,IAAIxG,IAAE,CAAN,EAAS0M,IAAEnE,SAASlJ,MAApB,EAA4B6D,IAAjC,EAAwClD,IAAE0M,CAAH,KAAUxJ,OAAKqF,SAASvI,CAAT,CAAf,CAAvC,EAAoEA,GAApE,EAAyE;AACvE,YAAI0R,OAAO6J,MAAMvb,CAAN,IAAW+gB,iBAAiBrZ,GAAjB,EAAsBxE,IAAtB,CAAtB;AACAie,qBAAa,IAAb,EAAmBzZ,IAAIlB,CAAvB,EAA0BkL,IAA1B,EAAgCxO,IAAhC;AACAqe,6BAAqB,IAArB,EAA2B7P,IAA3B,EAAiCxO,IAAjC;AACAke,2BAAmB,IAAnB,EAAyB1P,IAAzB,EAA+BxO,IAA/B;AACD;AACD,aAAO,gCAAgCwE;AAAvC;AACD;;AAED;;;;;;;;;;;;;AAaA4Z,kCAA8B5P,IAA9B,EAAoCzD,SAApC,EAA+CX,UAA/C,EAA2D0F,OAA3D,EAAoE;AAClEA,gBAAUA,WAAWtB,IAArB;AACA,UAAIgQ,UAAUD,uBAAuBzO,OAAvB,EAAgC/E,SAAhC,EAA2CX,UAA3C,CAAd;AACA,WAAKsV,uBAAL,CAA6BlR,IAA7B,EAAmCzD,SAAnC,EAA8CyT,OAA9C;AACA,aAAOA,OAAP;AACD;;AAED;;;;;;;AAOAkB,4BAAwBlR,IAAxB,EAA8BzD,SAA9B,EAAyCyT,OAAzC,EAAkD;AAChDhQ,WAAKc,gBAAL,CAAsBvE,SAAtB,EAAiCyT,OAAjC;AACD;;AAED;;;;;;;AAOAmB,iCAA6BnR,IAA7B,EAAmCzD,SAAnC,EAA8CyT,OAA9C,EAAuD;AACrDhQ,WAAKoR,mBAAL,CAAyB7U,SAAzB,EAAoCyT,OAApC;AACD;;AAlWoC;;AAsWvC,SAAO3L,aAAP;AAED,CA/W4B,CAAtB,C;;;;;;;;;;;ACpFP;;AAEA;;AAEA,yDAAe;AACbgN,OAAK;AACHtgB,UAAMic,MADH;AAEH3e,WAAO;AAFJ,GADQ;AAKb5C,OAAK;AACHsF,UAAMjF,MADH;AAEHuC,WAAO;AACLijB,WAAK,UADA;AAELC,YAAM;AAFD;AAFJ,GALQ;AAYbliB,YAAU;AACR0B,UAAMuJ,KADE;AAERjM,WAAO,CACL,EAACmjB,OAAO,QAAR,EADK,EAEL,EAACA,OAAO,SAAR,EAFK,EAGL,EAACA,OAAO,WAAR,EAHK,EAIL,EAACA,OAAO,SAAR,EAJK,EAKL,EAACA,OAAO,SAAR,EALK;AAFC,GAZG;AAsBbrjB,SAAO;AACL4C,UAAMic,MADD;AAEL3e,WAAO;AAFF,GAtBM;AA0BbX,QAAM;AACJqD,UAAMuJ,KADF;AAEJjM,WAAO,mDAAAojB,IAAQ;AAFX,GA1BO;AA8Bb5jB,YAAU;AACRkD,UAAMuJ,KADE;AAERjM,WAAO;AAFC,GA9BG;AAkCbN,WAAS;AACPgD,UAAMuJ,KADC;AAEPjM,WAAO;AAFA,GAlCI;AAsCbO,QAAM;AACJmC,UAAMuJ,KADF;AAEJjM,WAAO;AAFH;AAtCO,CAAf,E;;;;;;ACJA,qpF;;;;;;ACAA,mBAAmB,oIAAoI,gDAAgD,EAAE,gDAAgD,kFAAkF,EAAE,6IAA6I,kDAAkD,EAAE,iDAAiD,qFAAqF,EAAE,sNAAsN,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,mMAAmM,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,+LAA+L,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,+MAA+M,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,0NAA0N,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,+NAA+N,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,qMAAqM,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,uNAAuN,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,kLAAkL,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,oNAAoN,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,mMAAmM,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,oMAAoM,oDAAoD,EAAE,oDAAoD,EAAE,EAAE,2MAA2M,iDAAiD,EAAE,iDAAiD,EAAE,EAAE,oNAAoN,kDAAkD,EAAE,kDAAkD,EAAE,EAAE,+MAA+M,iDAAiD,EAAE,iDAAiD,EAAE,EAAE,gNAAgN,kDAAkD,EAAE,kDAAkD,EAAE,C;;;;;;;;ACA3/K;;AAEA;AACA,SAASqjB,qBAAT,CAA+B3Y,IAA/B,EAAqCxC,QAArC,EAA+ClI,KAA/C,EAAsDiI,GAAtD,EAA2Dqb,WAA3D,EAAwE;AACtE,MAAIC,QAAJ;AACA,MAAID,WAAJ,EAAiB;AACfC,eAAY,OAAOvjB,KAAP,KAAiB,QAAjB,IAA6BA,UAAU,IAAnD;AACA;AACA,QAAIujB,QAAJ,EAAc;AACZtb,YAAMyC,KAAK4L,UAAL,CAAgBpO,QAAhB,CAAN;AACD;AACF;AACD;AACA,MAAIsb,eAAgBvb,QAAQjI,KAAR,KAAkBiI,QAAQA,GAAR,IAAejI,UAAUA,KAA3C,CAApB;AACA;AACA;AACA,MAAIujB,YAAYC,YAAhB,EAA8B;AAC5B9Y,SAAK4L,UAAL,CAAgBpO,QAAhB,IAA4BlI,KAA5B;AACD;AACD,SAAOwjB,YAAP;AACD;;AAEM,MAAMC,cAAc,8EAAA3mB,CAAcgZ,cAAc;;AAErD;;;;;AAKA,QAAM2N,WAAN,SAA0B3N,UAA1B,CAAqC;AACnC;;;;;;;;;;;;;;;;;AAiBAkC,0BAAsB9P,QAAtB,EAAgClI,KAAhC,EAAuCiI,GAAvC,EAA4C;AAC1C,aAAOob,sBAAsB,IAAtB,EAA4Bnb,QAA5B,EAAsClI,KAAtC,EAA6CiI,GAA7C,EAAkD,IAAlD,CAAP;AACD;;AApBkC;AAuBrC;AACAwb,cAAY9mB,SAAZ,CAAsB2mB,WAAtB,GAAoC,KAApC;;AAEA,SAAOG,WAAP;AAED,CAnC0B,CAApB;AAAA;AAAA;;AAqCA,MAAMC,sBAAsB,8EAAA5mB,CAAcgZ,cAAc;;AAE7D;;;;;AAKA,QAAM4N,mBAAN,SAAkC5N,UAAlC,CAA6C;;AAE3C,eAAWjX,UAAX,GAAwB;AACtB,aAAO;AACL;;;;;AAKAykB,qBAAavlB;AANR,OAAP;AAQD;;AAED;;;;;;;;;;;;;;;;;;AAkBAia,0BAAsB9P,QAAtB,EAAgClI,KAAhC,EAAuCiI,GAAvC,EAA4C;AAC1C,aAAOob,sBAAsB,IAAtB,EAA4Bnb,QAA5B,EAAsClI,KAAtC,EAA6CiI,GAA7C,EAAkD,KAAKqb,WAAvD,CAAP;AACD;AAjC0C;;AAoC7C,SAAOI,mBAAP;AAED,CA7CkC,CAA5B;AAAA;AAAA;;AA+CP;AACAD,YAAYE,sBAAZ,GAAqCN,qBAArC,C;;;;;;;;;;;;;;;AC3GA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIO,uBAAuB,kFAA3B,C,CAAmD;;AAEnD;;;;;AAKA,MAAMC,gBAAgB,4FAAAH,CAAoB,oEAApB,CAAtB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA,MAAMI,SAAN,SAAwBD,aAAxB,CAAsC;;AAEpC;AACA;AACA,aAAWngB,EAAX,GAAgB;AAAE,WAAO,YAAP;AAAsB;;AAExC,aAAW9E,QAAX,GAAsB;AAAE,WAAO,IAAP;AAAc;;AAEtC,aAAWC,UAAX,GAAwB;;AAEtB;;;;;;;AAOA,WAAO;;AAEL;;;;AAIA0a,aAAO;AACL7W,cAAMuJ;AADD,OANF;;AAUL;;;;AAIA8X,UAAI;AACFrhB,cAAMic,MADJ;AAEF3e,eAAO;AAFL,OAdC;;AAmBL;;;;;;AAMAgkB,eAAS;AACPthB,cAAMic,MADC;AAEP3e,eAAO;AAFA,OAzBJ;;AA8BL;;;;;;AAMAikB,oBAAc;AACZvhB,cAAMic,MADM;AAEZ3e,eAAO;AAFK,OApCT;;AAyCL;;;;;;;AAOAkkB,YAAM;AACJxhB,cAAMyhB,QADF;AAEJlf,kBAAU;AAFN,OAhDD;;AAqDL;;;;;;;AAOAhG,cAAQ;AACNyD,cAAMyhB,QADA;AAENlf,kBAAU;AAFJ,OA5DH;;AAiEL;;;;;;;AAOAwa,eAAS;AACP/c,cAAMic,MADC;AAEP1Z,kBAAU;AAFH,OAxEJ;;AA6EL;;;;;;;AAOA8a,aAAOjL,MApFF;;AAsFL;;;;;;AAMAsP,yBAAmB;AACjB1hB,cAAMoS,MADW;AAEjBhQ,gBAAQ,IAFS;AAGjBP,kBAAU;AAHO,OA5Fd;;AAkGL;;;;;;;AAOA8f,oBAAc;AACZ3hB,cAAMoS,MADM;AAEZ7P,kBAAU;AAFE,OAzGT;;AA8GL;;;;;;;;AAQAqf,uBAAiB;AACf5hB,cAAMoS,MADS;AAEf9U,eAAO;AAFQ,OAtHZ;;AA2HLukB,wBAAkB;AAChB7hB,cAAMoS,MADU;AAEhBxQ,kBAAU;AAFM;;AA3Hb,KAAP;AAkID;;AAED,aAAWlC,SAAX,GAAuB;AACrB,WAAO,CAAE,yBAAF,CAAP;AACD;;AAEDW,gBAAc;AACZ;AACA,SAAKyhB,WAAL,GAAmB,EAAnB;AACA,SAAKC,OAAL,GAAeC,QAAf;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,cAAL,GAAsB,IAAtB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKxmB,QAAL,GAAgB,IAAhB;AACD;;AAED0I,yBAAuB;AACrB,UAAMA,oBAAN;AACA,SAAK8d,YAAL,GAAoB,IAApB;AACA,SAAK,IAAInlB,IAAE,CAAX,EAAcA,IAAE,KAAKukB,WAAL,CAAiBllB,MAAjC,EAAyCW,GAAzC,EAA8C;AAC5C,WAAKolB,gBAAL,CAAsBplB,CAAtB;AACD;AACF;;AAEDsB,sBAAoB;AAClB,UAAMA,iBAAN;AACA;AACA,QAAI,KAAK6jB,YAAT,EAAuB;AACrB,WAAKA,YAAL,GAAoB,KAApB;AACA,UAAInE,SAAS,KAAK/W,UAAlB;AACA,WAAK,IAAIjK,IAAE,CAAX,EAAcA,IAAE,KAAKukB,WAAL,CAAiBllB,MAAjC,EAAyCW,GAAzC,EAA8C;AAC5C,aAAKqlB,gBAAL,CAAsBrlB,CAAtB,EAAyBghB,MAAzB;AACD;AACF;AACF;;AAEDsE,wBAAsB;AACpB;AACA;AACA;AACA,QAAI,CAAC,KAAKJ,MAAV,EAAkB;AAChB,UAAIvmB,WAAW,KAAKA,QAAL,GAAgB,KAAKgL,aAAL,CAAmB,UAAnB,CAA/B;AACA,UAAI,CAAChL,QAAL,EAAe;AACb;AACA,YAAIqG,WAAW,IAAIsa,gBAAJ,CAAqB,MAAM;AACxC,cAAI,KAAK3V,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;AAClC3E,qBAASugB,UAAT;AACA,iBAAKC,QAAL;AACD,WAHD,MAGO;AACL,kBAAM,IAAI1d,KAAJ,CAAU,wCAAV,CAAN;AACD;AACF,SAPc,CAAf;AAQA9C,iBAASwa,OAAT,CAAiB,IAAjB,EAAuB,EAACiG,WAAW,IAAZ,EAAvB;AACA,eAAO,KAAP;AACD;AACD;AACA,UAAIC,gBAAgB,EAApB;AACAA,oBAAc,KAAK5B,EAAnB,IAAyB,IAAzB;AACA4B,oBAAc,KAAK3B,OAAnB,IAA8B,IAA9B;AACA2B,oBAAc,KAAK1B,YAAnB,IAAmC,IAAnC;AACA,WAAKkB,MAAL,GAAc,wEAAAS,CAAWC,UAAX,CAAsBjnB,QAAtB,EAAgC,IAAhC,EAAsC;AAClD0kB,qBAAa,KAAKA,WADgC;AAElDwC,qBAAa,IAFqC;AAGlDH,uBAAeA,aAHmC;AAIlD;;;;;AAKAI,yBAAiB,UAASpsB,IAAT,EAAeqG,KAAf,EAAsB;AACrC,cAAIgmB,KAAK,KAAKxB,WAAd;AACA,eAAK,IAAIvkB,IAAE,CAAN,EAASyK,IAAd,EAAqBzK,IAAE+lB,GAAG1mB,MAAN,KAAkBoL,OAAKsb,GAAG/lB,CAAH,CAAvB,CAApB,EAAmDA,GAAnD,EAAwD;AACtDyK,iBAAKqb,eAAL,CAAqBpsB,IAArB,EAA2BqG,KAA3B;AACD;AACF,SAdiD;AAelD;;;;;;AAMAimB,4BAAoB,UAASvb,IAAT,EAAe/Q,IAAf,EAAqBqG,KAArB,EAA4B;AAC9C,cAAI,uEAAAmV,CAAQ,KAAK4O,EAAb,EAAiBpqB,IAAjB,CAAJ,EAA4B;AAC1B,gBAAI6d,MAAM9M,KAAK,KAAKuZ,YAAV,CAAV;AACA,gBAAItqB,QAAQ,KAAKoqB,EAAjB,EAAqB;AACnB,mBAAKxK,KAAL,CAAW/B,GAAX,IAAkBxX,KAAlB;AACD;AACD,gBAAIzB,OAAO,yEAAA0Q,CAAU,KAAK8U,EAAf,EAAmB,WAAWvM,GAA9B,EAAmC7d,IAAnC,CAAX;AACA,iBAAKmU,UAAL,CAAgBvP,IAAhB,EAAsByB,KAAtB;AACD;AACF;AA9BiD,OAAtC,CAAd;AAgCD;AACD,WAAO,IAAP;AACD;;AAEDkmB,oBAAkB;AAChB;AACA;AACA;AACA;AACA;AACA,WAAO,KAAKlY,UAAL,CAAgBkF,WAAhB,IAA+B,KAAKlF,UAA3C;AACD;;AAEDmY,gBAAcjC,IAAd,EAAoB;AAClB,QAAIkC,aAAa,KAAKF,eAAL,EAAjB;AACA,SAAKlB,QAAL,GAAgBd,SAAS,OAAOA,IAAP,IAAe,UAAf,GAA4BA,IAA5B,GACvB,YAAW;AAAE,aAAOkC,WAAWlC,IAAX,EAAiB9Q,KAAjB,CAAuBgT,UAAvB,EAAmCjM,SAAnC,CAAP;AAAuD,KADtD,CAAhB;AAEA,QAAI,KAAKZ,KAAT,EAAgB;AACd,WAAK8M,gBAAL,CAAsB,KAAKZ,QAA3B;AACD;AACF;;AAEDa,kBAAgBrnB,MAAhB,EAAwB;AACtB,QAAImnB,aAAa,KAAKF,eAAL,EAAjB;AACA,SAAKjB,UAAL,GAAkBhmB,WAAW,OAAOA,MAAP,IAAiB,UAAjB,GAA8BA,MAA9B,GAC3B,YAAW;AAAE,aAAOmnB,WAAWnnB,MAAX,EAAmBmU,KAAnB,CAAyBgT,UAAzB,EAAqCjM,SAArC,CAAP;AAAyD,KADtD,CAAlB;AAEA,QAAI,KAAKZ,KAAT,EAAgB;AACd,WAAK8M,gBAAL,CAAsB,KAAKZ,QAA3B;AACD;AACF;;AAEDc,qBAAmBC,IAAnB,EAAyB;AACvB,WAAO1M,KAAK2M,IAAL,CAAU,OAAKD,IAAf,CAAP;AACD;;AAEDE,yBAAuB;AACrB,QAAI,KAAKrC,YAAT,EAAuB;AACrB,WAAKI,OAAL,GAAe,KAAKJ,YAApB;AACA,WAAKS,YAAL,GAAoB,KAAKT,YAAzB;AACA,WAAKU,eAAL,GAAuB4B,YAAYC,GAAZ,EAAvB;AACD;AACF;;AAEDC,qBAAmB;AACjB;AACA;AACA,QAAI,KAAKtN,KAAL,IAAc,KAAKkL,OAAL,GAAe,KAAKlL,KAAL,CAAWja,MAA5C,EAAoD;AAClD,WAAK+mB,gBAAL,CAAsB,KAAKS,oBAA3B;AACD;AACF;;AAEDA,yBAAuB;AACrB1G,0BAAsB,MAAI,KAAK2G,aAAL,EAA1B;AACD;;AAEDA,kBAAgB;AACd;AACA;AACA;AACA,QAAIC,gBAAgBL,YAAYC,GAAZ,EAApB;AACA,QAAIK,QAAQ,KAAK1C,gBAAL,IAAyByC,gBAAgB,KAAKjC,eAA9C,CAAZ;AACA,SAAKD,YAAL,GAAoBhL,KAAKoN,KAAL,CAAW,KAAKpC,YAAL,GAAoBmC,KAA/B,KAAyC,CAA7D;AACA,SAAKxC,OAAL,IAAgB,KAAKK,YAArB;AACA,SAAKC,eAAL,GAAuBiC,aAAvB;AACA,SAAKX,gBAAL,CAAsB,KAAKZ,QAA3B;AACD;;AAED0B,qBAAmB;AACjB,SAAKjC,cAAL,GAAsB,KAAKzF,OAAL,IACpB,KAAKA,OAAL,CAAarlB,OAAb,CAAqB,IAArB,EAA2B,GAA3B,EAAgCoP,KAAhC,CAAsC,GAAtC,CADF;AAED;;AAED4d,iBAAeC,MAAf,EAAuB;AACrB,QAAI,KAAK9N,KAAL,IAAc,CAACtN,MAAM6L,OAAN,CAAc,KAAKyB,KAAnB,CAAnB,EAA8C;AAC5CpY,cAAQ0I,IAAR,CAAa,8CAAb,EAA6D,KAAK0P,KAAlE;AACD;AACD;AACA;AACA,QAAI,CAAC,KAAK+N,gBAAL,CAAsBD,OAAO9oB,IAA7B,EAAmC8oB,OAAOrnB,KAA1C,CAAL,EAAuD;AACrD;AACA;AACA,WAAK0mB,oBAAL;AACA,WAAKL,gBAAL,CAAsB,KAAKZ,QAA3B;AACD;AACF;;AAED8B,wBAAsBhpB,IAAtB,EAA4B;AAC1B,QAAI,KAAK2mB,cAAT,EAAyB;AACvB3mB,aAAOA,KAAKhC,SAAL,CAAegC,KAAKpE,OAAL,CAAa,GAAb,IAAoB,CAAnC,CAAP;AACA,UAAIqtB,QAAQ,KAAKtC,cAAjB;AACA,WAAK,IAAIjlB,IAAE,CAAX,EAAcA,IAAEunB,MAAMloB,MAAtB,EAA8BW,GAA9B,EAAmC;AACjC,YAAI1B,KAAKpE,OAAL,CAAaqtB,MAAMvnB,CAAN,CAAb,MAA2B,CAA/B,EAAkC;AAChC,eAAKomB,gBAAL,CAAsB,KAAKZ,QAA3B,EAAqC,KAAK1F,KAA1C;AACA,iBAAO,IAAP;AACD;AACF;AACF;AACF;;AAED;;;;AAIAsG,mBAAiBrZ,EAAjB,EAAqB+S,QAAQ,CAA7B,EAAgC;AAC9B,SAAK6E,iBAAL,GAAyB,qEAAA6C,CAAUC,QAAV,CACnB,KAAK9C,iBADc,EAEnB7E,QAAQ,CAAR,GAAY,gEAAAF,CAAQC,KAAR,CAAcC,KAAd,CAAZ,GAAmC,kEAFhB,EAGnB/S,GAAGkT,IAAH,CAAQ,IAAR,CAHmB,CAAzB;AAIAyH,IAAA,iFAAAA,CAAiB,KAAK/C,iBAAtB;AACD;;AAED;;;;;;;AAOAgD,WAAS;AACP;AACA,SAAKvB,gBAAL,CAAsB,KAAKZ,QAA3B;AACAoC,IAAA,sEAAAA;AACD;;AAEDpC,aAAW;AACT,QAAI,CAAC,KAAKF,mBAAL,EAAL,EAAiC;AAC/B;AACA;AACD;AACD,SAAKuC,kBAAL;AACA;AACA;AACA;AACA;AACA;AACA,SAAKnD,MAAL,CAAYrlB,MAAZ,GAAqB,CAArB;AACA;AACA,SAAKyoB,qBAAL,CAA2B,KAAKvD,WAAL,CAAiBllB,MAA5C;AACA;AACA,SAAKiP,aAAL,CAAmB,IAAIC,WAAJ,CAAgB,YAAhB,EAA8B;AAC/CwZ,eAAS,IADsC;AAE/CC,gBAAU;AAFqC,KAA9B,CAAnB;AAIA;AACA,SAAKpB,gBAAL;AACD;;AAEDiB,uBAAqB;AACnB,QAAIvO,QAAQ,KAAKA,KAAL,IAAc,EAA1B;AACA,QAAI2O,oBAAoB,IAAIjc,KAAJ,CAAUsN,MAAMja,MAAhB,CAAxB;AACA,SAAK,IAAIW,IAAE,CAAX,EAAcA,IAAEsZ,MAAMja,MAAtB,EAA8BW,GAA9B,EAAmC;AACjCioB,wBAAkBjoB,CAAlB,IAAuBA,CAAvB;AACD;AACD;AACA,QAAI,KAAKglB,UAAT,EAAqB;AACnBiD,0BAAoBA,kBAAkBjpB,MAAlB,CAAyB,CAACgB,CAAD,EAAIuX,GAAJ,EAASnC,KAAT,KAC3C,KAAK4P,UAAL,CAAgB1L,MAAMtZ,CAAN,CAAhB,EAA0BuX,GAA1B,EAA+BnC,KAA/B,CADkB,CAApB;AAED;AACD;AACA,QAAI,KAAK2P,QAAT,EAAmB;AACjBkD,wBAAkBhE,IAAlB,CAAuB,CAACzjB,CAAD,EAAIC,CAAJ,KAAU,KAAKskB,QAAL,CAAczL,MAAM9Y,CAAN,CAAd,EAAwB8Y,MAAM7Y,CAAN,CAAxB,CAAjC;AACD;AACD;AACA,UAAMynB,oBAAoB,KAAKtD,mBAAL,GAA2B,EAArD;AACA,QAAIuD,UAAU,CAAd;AACA;AACA,UAAMC,QAAQvO,KAAKwO,GAAL,CAASJ,kBAAkB5oB,MAA3B,EAAmC,KAAKmlB,OAAxC,CAAd;AACA,WAAO2D,UAAQC,KAAf,EAAsBD,SAAtB,EAAiC;AAC/B,UAAI1d,OAAO,KAAK8Z,WAAL,CAAiB4D,OAAjB,CAAX;AACA,UAAIG,UAAUL,kBAAkBE,OAAlB,CAAd;AACA,UAAII,OAAOjP,MAAMgP,OAAN,CAAX;AACAJ,wBAAkBI,OAAlB,IAA6BH,OAA7B;AACA,UAAI1d,QAAQ0d,UAAU,KAAK3D,OAA3B,EAAoC;AAClC/Z,aAAKvD,mBAAL,CAAyB,KAAK4c,EAA9B,EAAkCyE,IAAlC;AACA9d,aAAKvD,mBAAL,CAAyB,KAAK6c,OAA9B,EAAuCoE,OAAvC;AACA1d,aAAKvD,mBAAL,CAAyB,KAAK8c,YAA9B,EAA4CsE,OAA5C;AACA7d,aAAK2N,gBAAL;AACD,OALD,MAKO;AACL,aAAKoQ,gBAAL,CAAsBD,IAAtB,EAA4BJ,OAA5B,EAAqCG,OAArC;AACD;AACF;AACD;AACA,SAAK,IAAItoB,IAAE,KAAKukB,WAAL,CAAiBllB,MAAjB,GAAwB,CAAnC,EAAsCW,KAAGmoB,OAAzC,EAAkDnoB,GAAlD,EAAuD;AACrD,WAAKyoB,yBAAL,CAA+BzoB,CAA/B;AACD;AACF;;AAEDolB,mBAAiB7N,GAAjB,EAAsB;AACpB,QAAI9M,OAAO,KAAK8Z,WAAL,CAAiBhN,GAAjB,CAAX;AACA,SAAK,IAAIvX,IAAE,CAAX,EAAcA,IAAEyK,KAAKie,QAAL,CAAcrpB,MAA9B,EAAsCW,GAAtC,EAA2C;AACzC,UAAI2oB,KAAKle,KAAKie,QAAL,CAAc1oB,CAAd,CAAT;AACAyK,WAAKlE,IAAL,CAAUzK,WAAV,CAAsB6sB,EAAtB;AACD;AACD,WAAOle,IAAP;AACD;;AAED4a,mBAAiB9N,GAAjB,EAAsByJ,MAAtB,EAA8B;AAC5B,QAAIvW,OAAO,KAAK8Z,WAAL,CAAiBhN,GAAjB,CAAX;AACAyJ,WAAOvb,YAAP,CAAoBgF,KAAKlE,IAAzB,EAA+B,IAA/B;AACD;;AAEDkiB,4BAA0BlR,GAA1B,EAA+B;AAC7B,QAAI9M,OAAO,KAAK2a,gBAAL,CAAsB7N,GAAtB,CAAX;AACA,QAAI9M,IAAJ,EAAU;AACR,WAAKia,MAAL,CAAY3e,IAAZ,CAAiB0E,IAAjB;AACD;AACD,SAAK8Z,WAAL,CAAiB/M,MAAjB,CAAwBD,GAAxB,EAA6B,CAA7B;AACD;;AAEDqR,kBAAgBL,IAAhB,EAAsBJ,OAAtB,EAA+BG,OAA/B,EAAwC;AACtC,QAAI1c,QAAQ,EAAZ;AACAA,UAAM,KAAKkY,EAAX,IAAiByE,IAAjB;AACA3c,UAAM,KAAKmY,OAAX,IAAsBoE,OAAtB;AACAvc,UAAM,KAAKoY,YAAX,IAA2BsE,OAA3B;AACA,WAAO,IAAI,KAAKpD,MAAT,CAAgBtZ,KAAhB,CAAP;AACD;;AAED4c,mBAAiBD,IAAjB,EAAuBJ,OAAvB,EAAgCG,OAAhC,EAAyC;AACvC,QAAI7d,OAAO,KAAKia,MAAL,CAAYjL,GAAZ,EAAX;AACA,QAAIhP,IAAJ,EAAU;AACR;AACA;AACAA,WAAKvD,mBAAL,CAAyB,KAAK4c,EAA9B,EAAkCyE,IAAlC;AACA9d,WAAKvD,mBAAL,CAAyB,KAAK6c,OAA9B,EAAuCoE,OAAvC;AACA1d,WAAKvD,mBAAL,CAAyB,KAAK8c,YAA9B,EAA4CsE,OAA5C;AACA7d,WAAK2N,gBAAL;AACD,KAPD,MAOO;AACL3N,aAAO,KAAKme,eAAL,CAAqBL,IAArB,EAA2BJ,OAA3B,EAAoCG,OAApC,CAAP;AACD;AACD,QAAIO,YAAY,KAAKtE,WAAL,CAAiB4D,UAAU,CAA3B,CAAhB;AACA,QAAIW,aAAaD,YAAYA,UAAUH,QAAV,CAAmB,CAAnB,CAAZ,GAAoC,IAArD;AACA,SAAKze,UAAL,CAAgBxE,YAAhB,CAA6BgF,KAAKlE,IAAlC,EAAwCuiB,UAAxC;AACA,SAAKvE,WAAL,CAAiB4D,OAAjB,IAA4B1d,IAA5B;AACA,WAAOA,IAAP;AACD;;AAED;AACAse,oBAAkBC,MAAlB,EAA0B;AACxB,SAAK,IAAIhpB,IAAE,CAAX,EAAcA,IAAE,KAAKukB,WAAL,CAAiBllB,MAAjC,EAAyCW,GAAzC,EAA8C;AAC5C,WAAKukB,WAAL,CAAiBvkB,CAAjB,EAAoB+oB,iBAApB,CAAsCC,MAAtC;AACD;AACF;;AAED;AACA;AACA3B,mBAAiB/oB,IAAjB,EAAuByB,KAAvB,EAA8B;AAC5B,QAAIkpB,YAAY3qB,KAAK0C,KAAL,CAAW,CAAX,CAAhB,CAD4B,CACG;AAC/B,QAAIkoB,MAAMD,UAAU/uB,OAAV,CAAkB,GAAlB,CAAV;AACA,QAAIivB,WAAWD,MAAM,CAAN,GAAUD,SAAV,GAAsBA,UAAU3sB,SAAV,CAAoB,CAApB,EAAuB4sB,GAAvB,CAArC;AACA;AACA,QAAIC,YAAYtoB,SAASsoB,QAAT,EAAmB,EAAnB,CAAhB,EAAwC;AACtC,UAAIC,cAAcF,MAAM,CAAN,GAAU,EAAV,GAAeD,UAAU3sB,SAAV,CAAoB4sB,MAAI,CAAxB,CAAjC;AACA;AACA,WAAK5B,qBAAL,CAA2B8B,WAA3B;AACA;AACA;AACA;AACA;AACA,UAAIjB,UAAU,KAAKvD,mBAAL,CAAyBuE,QAAzB,CAAd;AACA,UAAI1e,OAAO,KAAK8Z,WAAL,CAAiB4D,OAAjB,CAAX;AACA,UAAI1d,IAAJ,EAAU;AACR,YAAI4e,WAAW,KAAKvF,EAAL,IAAWsF,cAAc,MAAMA,WAApB,GAAkC,EAA7C,CAAf;AACA;AACA;AACA3e,aAAKwE,yBAAL,CAA+Boa,QAA/B,EAAyCtpB,KAAzC,EAAgD,KAAhD,EAAuD,IAAvD;AACA0K,aAAK2N,gBAAL;AACD;AACD,aAAO,IAAP;AACD;AACF;;AAED;;;;;;;;;;;AAWAkR,iBAAeX,EAAf,EAAmB;AACjB,QAAIY,WAAW,KAAKC,eAAL,CAAqBb,EAArB,CAAf;AACA,WAAOY,YAAYA,SAAS,KAAKzF,EAAd,CAAnB;AACD;;AAED;;;;;;;;;AASA2F,kBAAgBd,EAAhB,EAAoB;AAClB,QAAIY,WAAW,KAAKC,eAAL,CAAqBb,EAArB,CAAf;AACA,WAAOY,YAAYA,SAAS,KAAKxF,OAAd,CAAnB;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBAyF,kBAAgBb,EAAhB,EAAoB;AAClB,WAAO,wEAAAhD,CAAW6D,eAAX,CAA2B,KAAK7qB,QAAhC,EAA0CgqB,EAA1C,CAAP;AACD;;AAtjBmC;;AA0jBtCzqB,eAAeqD,MAAf,CAAsBsiB,UAAUpgB,EAAhC,EAAoCogB,SAApC;;;;;;;;;;;;;;;AC1qBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI6F,cAAc,IAAlB;AACA;;;;AAIA,SAASC,4BAAT,GAAwC;AAAE,SAAOD,WAAP;AAAqB;AAC/DC,6BAA6BjtB,SAA7B,GAAyCc,OAAOC,MAAP,CAAc+kB,oBAAoB9lB,SAAlC,EAA6C;AACpFoG,eAAa;AACX/C,WAAO4pB,4BADI;AAEXC,cAAU;AAFC;AADuE,CAA7C,CAAzC;AAMA;;;;;AAKA,MAAMC,eAAe,4FAAAjoB,CAAgB+nB,4BAAhB,CAArB;AACA;;;;;AAKA,MAAMG,sBAAsB,oFAAAtG,CAAYqG,YAAZ,CAA5B;;AAEA;AACA,SAASE,eAAT,CAAyBprB,QAAzB,EAAmCmE,WAAnC,EAAgD;AAC9C4mB,gBAAc/qB,QAAd;AACAnB,SAAOwsB,cAAP,CAAsBrrB,QAAtB,EAAgCmE,YAAYpG,SAA5C;AACA,MAAIoG,WAAJ;AACA4mB,gBAAc,IAAd;AACD;;AAED;AACA;;;;AAIA,MAAM/tB,OAAO,4FAAAiG,CAAgB,MAAM,EAAtB,CAAb;;AAEA;;;;;;AAMA,MAAM+hB,oBAAN,SAAmChoB,IAAnC,CAAwC;AACtCmH,cAAYR,KAAZ,EAAmB;AACjB;AACA,SAAK2nB,oBAAL,CAA0B3nB,KAA1B;AACA,SAAKiE,IAAL,GAAY,KAAKgB,cAAL,CAAoB,KAAKwG,UAAzB,CAAZ;AACA;AACA,QAAI2a,WAAW,KAAKA,QAAL,GAAgB,EAA/B;AACA,SAAK,IAAIjN,IAAI,KAAKlV,IAAL,CAAUb,UAAvB,EAAmC+V,CAAnC,EAAsCA,IAAEA,EAAEC,WAA1C,EAAuD;AACrDgN,eAAS3iB,IAAT,CAAc0V,CAAd;AACAA,QAAEyO,oBAAF,GAAyB,IAAzB;AACD;AACD,QAAI,KAAKC,iBAAL,CAAuBC,wBAA3B,EAAqD;AACnD,WAAKrB,iBAAL,CAAuB,IAAvB;AACD;AACD;AACA;AACA,QAAIsB,UAAU,KAAKC,mBAAnB;AACA,QAAKhoB,SAAS+nB,QAAQ3E,aAAlB,IAAoC,CAAC2E,QAAQ3E,aAAjD,EAAgE;AAC9D,WAAKte,iBAAL;AACD;AACF;AACD;;;;;;AAMA6iB,uBAAqB3nB,KAArB,EAA4B;AAC1B,QAAI+nB,UAAU,KAAKC,mBAAnB;AACA,QAAIhoB,KAAJ,EAAW;AACT,WAAK,IAAIioB,KAAT,IAAkBF,QAAQ3E,aAA1B,EAAyC;AACvC,YAAI6E,SAASjoB,KAAb,EAAoB;AAClB,eAAK4E,mBAAL,CAAyBqjB,KAAzB,EAAgCjoB,MAAMioB,KAAN,CAAhC;AACD;AACF;AACF;AACD,SAAK,IAAIC,KAAT,IAAkB,KAAKC,WAAvB,EAAoC;AAClC,WAAKvjB,mBAAL,CAAyBsjB,KAAzB,EAAgC,KAAKzc,UAAL,CAAgB,WAAWyc,KAA3B,CAAhC;AACD;AACF;AACD;;;;;;;;;;AAUA1E,kBAAgBpsB,IAAhB,EAAsBqG,KAAtB,EAA6B;AAC3B,QAAI,KAAKkP,yBAAL,CAA+BvV,IAA/B,EAAqCqG,KAArC,EAA4C,KAA5C,EAAmD,IAAnD,CAAJ,EAA8D;AAC5D,WAAKgO,UAAL,CAAgB6D,cAAhB,CAA+B,IAA/B;AACD;AACF;AACD;;;AAGAgR,0BAAwBlR,IAAxB,EAA8BzD,SAA9B,EAAyCyT,OAAzC,EAAkD;AAChD,QAAI,KAAKzO,WAAL,IAAoB,KAAKqX,mBAAL,CAAyBzE,WAAjD,EAA8D;AAC5D;AACA;AACA,WAAK5S,WAAL,CAAiB2P,uBAAjB,CAAyClR,IAAzC,EAA+CzD,SAA/C,EAA2D3S,CAAD,IAAO;AAC/DA,UAAEsQ,KAAF,GAAU,IAAV;AACA8V,gBAAQpmB,CAAR;AACD,OAHD;AAID,KAPD,MAOO;AACL;AACA;AACA,UAAIovB,eAAe,KAAK3c,UAAL,CAAgBA,UAAnC;AACA,UAAI2c,YAAJ,EAAkB;AAChBA,qBAAa9H,uBAAb,CAAqClR,IAArC,EAA2CzD,SAA3C,EAAsDyT,OAAtD;AACD;AACF;AACF;AACD;;;;;;;;AAQAqH,oBAAkB4B,IAAlB,EAAwB;AACtB,QAAIC,IAAI,KAAKlC,QAAb;AACA,SAAK,IAAI1oB,IAAE,CAAX,EAAcA,IAAE4qB,EAAEvrB,MAAlB,EAA0BW,GAA1B,EAA+B;AAC7B,UAAIyb,IAAImP,EAAE5qB,CAAF,CAAR;AACA;AACA,UAAIlC,QAAQ6sB,IAAR,KAAiB7sB,QAAQ2d,EAAE2O,wBAAV,CAArB,EAA0D;AACxD,YAAI3O,EAAEK,QAAF,KAAeC,KAAKC,SAAxB,EAAmC;AACjC,cAAI2O,IAAJ,EAAU;AACRlP,cAAEoP,sBAAF,GAA2BpP,EAAElW,WAA7B;AACAkW,cAAElW,WAAF,GAAgB,EAAhB;AACD,WAHD,MAGO;AACLkW,cAAElW,WAAF,GAAgBkW,EAAEoP,sBAAlB;AACD;AACF,SAPD,MAOO,IAAIpP,EAAEnW,KAAN,EAAa;AAClB,cAAIqlB,IAAJ,EAAU;AACRlP,cAAEqP,kBAAF,GAAuBrP,EAAEnW,KAAF,CAAQylB,OAA/B;AACAtP,cAAEnW,KAAF,CAAQylB,OAAR,GAAkB,MAAlB;AACD,WAHD,MAGO;AACLtP,cAAEnW,KAAF,CAAQylB,OAAR,GAAkBtP,EAAEqP,kBAApB;AACD;AACF;AACF;AACDrP,QAAE2O,wBAAF,GAA6BO,IAA7B;AACA,UAAIlP,EAAEsN,iBAAN,EAAyB;AACvBtN,UAAEsN,iBAAF,CAAoB4B,IAApB;AACD;AACF;AACF;AACD;;;;;;;AAOA1Y,8BAA4BP,IAA5B,EAAkChY,IAAlC,EAAwCqG,KAAxC,EAA+C;AAC7C,QAAI2R,KAAK0Y,wBAAL,IACA1Y,KAAKoK,QAAL,IAAiBC,KAAKC,SADtB,IACmCtiB,QAAQ,aAD/C,EAC8D;AAC5DgY,WAAKmZ,sBAAL,GAA8B9qB,KAA9B;AACD,KAHD,MAGO;AACL,YAAMkS,2BAAN,CAAkCP,IAAlC,EAAwChY,IAAxC,EAA8CqG,KAA9C;AACD;AACF;AACD;;;;;;;AAOA,MAAI8lB,WAAJ,GAAkB;AAChB,QAAIja,QAAQ,KAAKof,aAAjB;AACA,QAAI,CAACpf,KAAL,EAAY;AACV,UAAIye,OAAJ;AACAze,cAAQ,IAAR;AACA,SAAG;AACD;AACA;AACAA,gBAAQA,MAAMmC,UAAN,CAAiBA,UAAzB;AACD,OAJD,QAIS,CAACsc,UAAUze,MAAM0e,mBAAjB,KAAyC,CAACD,QAAQxE,WAJ3D;AAKA,WAAKmF,aAAL,GAAqBpf,KAArB;AACD;AACD,WAAOA,KAAP;AACD;AAlJqC;;AAqJxC;AACA+X,qBAAqBjnB,SAArB,CAA+BqR,UAA/B;AACA;AACA4V,qBAAqBjnB,SAArB,CAA+B4tB,mBAA/B;AACA;AACA3G,qBAAqBjnB,SAArB,CAA+BuW,WAA/B;AACA;AACA0Q,qBAAqBjnB,SAArB,CAA+BytB,iBAA/B;AACA;AACAxG,qBAAqBjnB,SAArB,CAA+B+tB,WAA/B;;AAEA;;;;;AAKA,MAAMQ,8BAA8B,oFAAAzH,CAAYG,oBAAZ,CAApC;;AAEA,SAASuH,cAAT,CAAwBvsB,QAAxB,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA,MAAI+rB,eAAe/rB,SAASoP,UAA5B;AACA,SAAO2c,gBAAgBA,aAAazX,WAA7B,IAA4CyX,YAAnD;AACD;;AAED;AACA;;;AAGA,SAASS,sBAAT,CAAgCxsB,QAAhC,EAA0C2J,YAA1C,EAAwD+hB,OAAxD,EAAiE;AAC/D;AACA,MAAI1uB,OAAO0uB,QAAQhH,WAAR,GACT4H,2BADS,GACqBtH,oBADhC;AAEA;;;;AAIA,MAAI7hB,QAAQ,cAAcnG,IAAd,CAAmB,EAA/B;AACAmG,QAAMpF,SAAN,CAAgB4tB,mBAAhB,GAAsCD,OAAtC;AACAvoB,QAAMpF,SAAN,CAAgBkJ,aAAhB,CAA8BjH,QAA9B;AACAysB,mBAAiBtpB,KAAjB,EAAwBnD,QAAxB,EAAkC2J,YAAlC,EAAgD+hB,OAAhD;AACA,SAAOvoB,KAAP;AACD;;AAED;;;AAGA,SAASupB,mBAAT,CAA6B1sB,QAA7B,EAAuC2J,YAAvC,EAAqD+hB,OAArD,EAA8D;AAC5D,MAAIiB,sBAAsBjB,QAAQvE,eAAlC;AACA,MAAIwF,mBAAJ,EAAyB;AACvB;AACA,QAAIxpB,QAAQwG,aAAaijB,uBAAzB;AACA,QAAI,CAACzpB,KAAL,EAAY;AACV,UAAInG,OAAO0uB,QAAQhH,WAAR,GAAsByG,mBAAtB,GAA4CD,YAAvD;AACA/nB,cAAQwG,aAAaijB,uBAAb,GACN,MAAMC,mBAAN,SAAkC7vB,IAAlC,CAAuC,EADzC;AAEA;AACA;AACA,UAAIwf,YAAY7S,aAAa6S,SAA7B;AACA,WAAK,IAAIzhB,IAAT,IAAiByhB,SAAjB,EAA4B;AAC1BrZ,cAAMpF,SAAN,CAAgBqW,kBAAhB,CAAmC,WAAWrZ,IAA9C,EACEoI,MAAMpF,SAAN,CAAgBqa,qBAAhB,CAAsC1L,SADxC,EAEE,EAAC0B,IAAI0e,4BAA4B/xB,IAA5B,EAAkC4xB,mBAAlC,CAAL,EAFF;AAGAxpB,cAAMpF,SAAN,CAAgBqI,wBAAhB,CAAyC,WAAWrL,IAApD;AACD;AACF;AACDqwB,oBAAgBprB,QAAhB,EAA0BmD,KAA1B;AACA;AACA;AACA,QAAInD,SAAS6e,WAAb,EAA0B;AACxB;AACA;AACAhgB,aAAOyD,MAAP,CAActC,SAAS6O,MAAvB,EAA+B7O,SAAS6e,WAAxC;AACD;AACD;AACA7e,aAAS0X,UAAT,GAAsB,EAAtB;AACA1X,aAAS+Q,aAAT,GAAyB,IAAzB;AACA/Q,aAAS8Q,SAAT,GAAqB,IAArB;AACA9Q,aAASyI,iBAAT;AACD;AACF;AACD;;AAEA,SAASqkB,2BAAT,CAAqCC,QAArC,EAA+CJ,mBAA/C,EAAoE;AAClE,SAAO,SAASxF,eAAT,CAAyBnnB,QAAzB,EAAmCjF,IAAnC,EAAyC4I,KAAzC,EAAgD;AACrDgpB,wBAAoBtkB,IAApB,CAAyBrI,SAASwrB,iBAAlC,EACEzwB,KAAK4C,SAAL,CAAe,SAAS+C,MAAxB,CADF,EACmCiD,MAAM5I,IAAN,CADnC;AAED,GAHD;AAID;;AAED,SAAS0xB,gBAAT,CAA0BtpB,KAA1B,EAAiCnD,QAAjC,EAA2C2J,YAA3C,EAAyD+hB,OAAzD,EAAkE;AAChE,MAAIlP,YAAY7S,aAAa6S,SAAb,IAA0B,EAA1C;AACA,OAAK,IAAIoP,KAAT,IAAkBF,QAAQ3E,aAA1B,EAAyC;AACvC,WAAOvK,UAAUoP,KAAV,CAAP;AACA,QAAIoB,yBAAyBtB,QAAQrE,kBAArC;AACA,QAAI2F,sBAAJ,EAA4B;AAC1B7pB,YAAMpF,SAAN,CAAgBqW,kBAAhB,CAAmCwX,KAAnC,EACEzoB,MAAMpF,SAAN,CAAgBqa,qBAAhB,CAAsC3L,MADxC,EAEE,EAAC2B,IAAI6e,+BAA+BrB,KAA/B,EAAsCoB,sBAAtC,CAAL,EAFF;AAGD;AACF;AACD,MAAItB,QAAQvE,eAAR,IAA2BnnB,SAASoP,UAAxC,EAAoD;AAClD,SAAK,IAAIyc,KAAT,IAAkBrP,SAAlB,EAA6B;AAC3BrZ,YAAMpF,SAAN,CAAgBqW,kBAAhB,CAAmCyX,KAAnC,EACE1oB,MAAMpF,SAAN,CAAgBqa,qBAAhB,CAAsC3L,MADxC,EAEE,EAAC2B,IAAI8e,4BAAL,EAFF;AAGD;AACF;AACF;;AAED,SAASD,8BAAT,CAAwCE,QAAxC,EAAkDH,sBAAlD,EAA0E;AACxE,SAAO,SAAS3F,kBAAT,CAA4Bvb,IAA5B,EAAkC/Q,IAAlC,EAAwC4I,KAAxC,EAA+C;AACpDqpB,2BAAuB3kB,IAAvB,CAA4ByD,KAAK0f,iBAAjC,EACE1f,IADF,EACQ/Q,IADR,EACc4I,MAAM5I,IAAN,CADd;AAED,GAHD;AAID;;AAED,SAASmyB,0BAAT,GAAsC;AACpC,SAAO,SAASE,cAAT,CAAwBthB,IAAxB,EAA8B/Q,IAA9B,EAAoC4I,KAApC,EAA2C;AAChDmI,SAAKsD,UAAL,CAAgBkB,yBAAhB,CAA0C,WAAWvV,IAArD,EAA2D4I,MAAM5I,IAAN,CAA3D,EAAwE,IAAxE,EAA8E,IAA9E;AACD,GAFD;AAGD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,MAAMisB,aAAa;;AAEjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DAC,aAAWjnB,QAAX,EAAqBiM,KAArB,EAA4Byf,OAA5B,EAAqC;AACnCA,cAAU,iCAAkCA,WAAW,EAAvD;AACA,QAAI1rB,SAASwrB,iBAAb,EAAgC;AAC9B,YAAM,IAAIriB,KAAJ,CAAU,2CAAV,CAAN;AACD;AACDnJ,aAASwrB,iBAAT,GAA6Bvf,KAA7B;AACA,QAAItC,eAAesC,MAAM9H,WAAN,CAAkBgY,cAAlB,CAAiCnc,QAAjC,CAAnB;AACA;AACA;AACA,QAAIqtB,YAAY1jB,aAAa2jB,uBAA7B;AACA,QAAI,CAACD,SAAL,EAAgB;AACdA,kBAAYb,uBAAuBxsB,QAAvB,EAAiC2J,YAAjC,EAA+C+hB,OAA/C,CAAZ;AACA/hB,mBAAa2jB,uBAAb,GAAuCD,SAAvC;AACD;AACD;AACAX,wBAAoB1sB,QAApB,EAA8B2J,YAA9B,EAA4C+hB,OAA5C;AACA;AACA,QAAIvoB,QAAQ,MAAMoqB,gBAAN,SAA+BF,SAA/B,CAAyC,EAArD;AACAlqB,UAAMpF,SAAN,CAAgBuW,WAAhB,GAA8BiY,eAAevsB,QAAf,CAA9B;AACAmD,UAAMpF,SAAN,CAAgBqR,UAAhB,GAA6BpP,QAA7B;AACAmD,UAAMpF,SAAN,CAAgBytB,iBAAhB,GAAoCvf,KAApC;AACA9I,UAAMpF,SAAN,CAAgB+tB,WAAhB,GAA8BniB,aAAa6S,SAA3C;AACA,WAAO,kDAAkDrZ;AAAzD;AACD,GAtFgB;;AAwFjB;;;;;;;;;;;;;;;;;;;;;AAqBA0nB,kBAAgB7qB,QAAhB,EAA0B+S,IAA1B,EAAgC;AAC9B,QAAI9F,KAAJ;AACA,WAAO8F,IAAP,EAAa;AACX;AACA;AACA;AACA,UAAK9F,QAAQ8F,KAAKwY,oBAAlB,EAAyC;AACvC;AACA;AACA,YAAIte,MAAMmC,UAAN,IAAoBpP,QAAxB,EAAkC;AAChC+S,iBAAO9F,MAAMmC,UAAb;AACD,SAFD,MAEO;AACL,iBAAOnC,KAAP;AACD;AACF,OARD,MAQO;AACL;AACA;AACA8F,eAAOA,KAAKzH,UAAZ;AACD;AACF;AACD,WAAO,IAAP;AACD;AAlIgB,CAAnB;;AAqIA;;;;;;;;;;;;;ACtfA;AACA;AACA;;AAEA;AACA,IAAIkiB,WAAJ,C,CAAiB;;AAEjB;;;;AAIA,MAAM3E,SAAN,CAAgB;AACd1kB,gBAAc;AACZ,SAAKspB,YAAL,GAAoB,IAApB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;AACD;;;;;;;;AAQAC,YAAUC,WAAV,EAAuB9L,QAAvB,EAAiC;AAC/B,SAAK0L,YAAL,GAAoBI,WAApB;AACA,SAAKH,SAAL,GAAiB3L,QAAjB;AACA,SAAK4L,MAAL,GAAc,KAAKF,YAAL,CAAkBtN,GAAlB,CAAsB,MAAM;AACxC,WAAKwN,MAAL,GAAc,IAAd;AACA,WAAKD,SAAL;AACD,KAHa,CAAd;AAID;AACD;;;AAGAtM,WAAS;AACP,QAAI,KAAK0M,QAAL,EAAJ,EAAqB;AACnB,WAAKL,YAAL,CAAkBrM,MAAlB,CAAyB,KAAKuM,MAA9B;AACA,WAAKA,MAAL,GAAc,IAAd;AACD;AACF;AACD;;;AAGA1E,UAAQ;AACN,QAAI,KAAK6E,QAAL,EAAJ,EAAqB;AACnB,WAAK1M,MAAL;AACA,WAAKsM,SAAL;AACD;AACF;AACD;;;;;AAKAI,aAAW;AACT,WAAO,KAAKH,MAAL,IAAe,IAAtB;AACD;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BE,SAAO7E,QAAP,CAAgBiF,SAAhB,EAA2BF,WAA3B,EAAwC9L,QAAxC,EAAkD;AAChD,QAAIgM,qBAAqBlF,SAAzB,EAAoC;AAClCkF,gBAAU3M,MAAV;AACD,KAFD,MAEO;AACL2M,kBAAY,IAAIlF,SAAJ,EAAZ;AACD;AACDkF,cAAUH,SAAV,CAAoBC,WAApB,EAAiC9L,QAAjC;AACA,WAAOgM,SAAP;AACD;AAtFa;;;;;;;;;;;ACXhB;;AAEA,IAAIC,iBAAiB,EAArB;;AAEO,MAAMjF,mBAAmB,UAASgF,SAAT,EAAoB;AAClDC,iBAAe5mB,IAAf,CAAoB2mB,SAApB;AACD,CAFM;AAAA;AAAA;;AAIP,SAASE,eAAT,GAA2B;AACzB,QAAMC,WAAW/uB,QAAQ6uB,eAAettB,MAAvB,CAAjB;AACA,SAAOstB,eAAettB,MAAtB,EAA8B;AAC5B,QAAI;AACFstB,qBAAe5S,KAAf,GAAuB6N,KAAvB;AACD,KAFD,CAEE,OAAMtsB,CAAN,EAAS;AACTqkB,iBAAW,MAAM;AACf,cAAMrkB,CAAN;AACD,OAFD;AAGD;AACF;AACD,SAAOuxB,QAAP;AACD;;AAEM,MAAMjF,QAAQ,YAAW;AAC9B,MAAIkF,QAAJ,EAAcC,UAAd;AACA,KAAG;AACDD,eAAWtzB,OAAOoE,QAAP,IAAmBA,SAASgqB,KAAT,EAA9B;AACA,QAAIpuB,OAAOuE,QAAP,IAAmBvE,OAAOuE,QAAP,CAAgBivB,WAAvC,EAAoD;AAClDxzB,aAAOuE,QAAP,CAAgBivB,WAAhB,CAA4BpF,KAA5B;AACD;AACDmF,iBAAaH,iBAAb;AACD,GAND,QAMSE,YAAYC,UANrB;AAOD,CATM,C","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9ead1ff7ff5b6a771cbf","window.JSCompiler_renameProperty = function(prop, obj) { return prop; }\n\n/** @namespace */\nlet Polymer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/boot.js","import './boot.js';\n\nconst caseMap = {};\nconst DASH_TO_CAMEL = /-[a-z]/g;\nconst CAMEL_TO_DASH = /([A-Z])/g;\n\nexport function dashToCamelCase(dash) {\n  return caseMap[dash] || (\n    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n      (m) => m[1].toUpperCase()\n    )\n  );\n}\n\nexport function camelToDashCase(camel) {\n  return caseMap[camel] || (\n    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/case-map.js","import './boot.js';\n\nlet CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\nlet ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\nlet workingURL;\nlet resolveDoc;\n/**\n * Resolves the given URL against the provided `baseUri'.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to resolve\n * @param {?string=} baseURI Base URI to resolve the URL against\n * @return {string} resolved URL\n */\nfunction resolveUrl(url, baseURI) {\n  if (url && ABS_URL.test(url)) {\n    return url;\n  }\n  // Lazy feature detection.\n  if (workingURL === undefined) {\n    workingURL = false;\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      workingURL = (u.href === 'http://a/c%20d');\n    } catch (e) {\n      // silently fail\n    }\n  }\n  if (!baseURI) {\n    baseURI = document.baseURI || window.location.href;\n  }\n  if (workingURL) {\n    return (new URL(url, baseURI)).href;\n  }\n  // Fallback to creating an anchor into a disconnected document.\n  if (!resolveDoc) {\n    resolveDoc = document.implementation.createHTMLDocument('temp');\n    resolveDoc.base = resolveDoc.createElement('base');\n    resolveDoc.head.appendChild(resolveDoc.base);\n    resolveDoc.anchor = resolveDoc.createElement('a');\n    resolveDoc.body.appendChild(resolveDoc.anchor);\n  }\n  resolveDoc.base.href = baseURI;\n  resolveDoc.anchor.href = url;\n  return resolveDoc.anchor.href || url;\n\n}\n\n/**\n * Resolves any relative URL's in the given CSS text against the provided\n * `ownerDocument`'s `baseURI`.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} cssText CSS text to process\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Processed CSS text with resolved URL's\n */\nfunction resolveCss(cssText, baseURI) {\n  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n    return pre + '\\'' +\n      resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n      '\\'' + post;\n  });\n}\n\n/**\n * Returns a path from a given `url`. The path includes the trailing\n * `/` from the url.\n *\n * @memberof Polymer.ResolveUrl\n * @param {string} url Input URL to transform\n * @return {string} resolved path\n */\nfunction pathFromUrl(url) {\n  return url.substring(0, url.lastIndexOf('/') + 1);\n}\n\nexport { resolveCss };\nexport { resolveUrl };\nexport { pathFromUrl };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/resolve-url.js","import './boot.js';\n\n// unique global id for deduping mixins.\nlet dedupeId = 0;\n\n/**\n * @constructor\n * @extends {Function}\n */\nfunction MixinFunction(){}\n/** @type {(WeakMap | undefined)} */\nMixinFunction.prototype.__mixinApplications;\n/** @type {(Object | undefined)} */\nMixinFunction.prototype.__mixinSet;\n\nexport const dedupingMixin = function(mixin) {\n  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n  if (!mixinApplications) {\n    mixinApplications = new WeakMap();\n    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n  }\n  // maintain a unique id for each mixin\n  let mixinDedupeId = dedupeId++;\n  function dedupingMixin(base) {\n    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n    if (baseSet && baseSet[mixinDedupeId]) {\n      return base;\n    }\n    let map = mixinApplications;\n    let extended = map.get(base);\n    if (!extended) {\n      extended = /** @type {!Function} */(mixin)(base);\n      map.set(base, extended);\n    }\n    // copy inherited mixin set from the extended class, or the base class\n    // NOTE: we avoid use of Set here because some browser (IE11)\n    // cannot extend a base Set via the constructor.\n    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n    mixinSet[mixinDedupeId] = true;\n    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n    return extended;\n  }\n\n  return dedupingMixin;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/mixin.js","import './boot.js';\nimport { pathFromUrl } from './resolve-url.js';\n\n/**\n * Legacy settings.\n * @namespace\n * @memberof Polymer\n */\nconst settings = undefined || {};\nexport const useShadow = !(window.ShadyDOM);\nexport const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\nexport const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);\nexport { settings as Settings };\n\n/**\n * Globally settable property that is automatically assigned to\n * `Polymer.ElementMixin` instances, useful for binding in templates to\n * make URL's relative to an application's root.  Defaults to the main\n * document URL, but can be overridden by users.  It may be useful to set\n * `Polymer.rootPath` to provide a stable application mount path when\n * using client side routing.\n *\n * @memberof Polymer\n */\nlet rootPath = undefined ||\n  pathFromUrl(document.baseURI || window.location.href);\n\nexport { rootPath };\n\nexport const setRootPath = function(path) {\n  rootPath = path;\n};\n\n/**\n * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:\n *\n *     Polymer = {\n *       sanitizeDOMValue: function(value, name, type, node) { ... }\n *     }\n *\n * Where:\n *\n * `value` is the value to sanitize.\n * `name` is the name of an attribute or property (for example, href).\n * `type` indicates where the value is being inserted: one of property, attribute, or text.\n * `node` is the node where the value is being inserted.\n *\n * @type {(function(*,string,string,Node):*)|undefined}\n * @memberof Polymer\n */\nlet sanitizeDOMValue = undefined;\n\nexport { sanitizeDOMValue };\n\nexport const setSanitizeDOMValue = function(newSanitizeDOMValue) {\n  sanitizeDOMValue = newSanitizeDOMValue;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/settings.js","'use strict';\n\nimport './fh-clubs';\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","'use strict';\n\nimport { Element as PolymerElement } from '@polymer/polymer/polymer-element';\nimport template from './template.html';\nimport props from './props';\nimport '@polymer/polymer/lib/elements/dom-repeat';\n\nclass FengHuangClubs extends PolymerElement {\n  \n  static get template() { return template; }\n  \n  static get properties() { return props }\n\n  _computeSelectedDay(selected){\n    const classes = ['button', 'button-small', 'button-outline'];\n    return selected\n      ? classes.filter(elem => {return elem !== 'button-outline'}).join(' ')\n      : classes.join(' ');\n  }\n\n  _computeText(data){\n    return `Cerca tra i ${data.length} club della scuola Feng Huang (per nome o paese)`;\n  }\n\n  _filter(){\n    this.filtered = this._search(this.data);\n    this.markers = this._getMarkers(this.filtered);\n  }\n\n  _updateQuery(evt){\n    this.query = evt.currentTarget.value;\n    this._filter();\n  }\n\n  _search(data){\n    if(this.query.length){\n      const query = this.query.toLowerCase();\n      return data.filter((e,i) => {\n        const byName = e.name.toLowerCase().search(query) > -1;\n        const byCity = e.city.toLowerCase().search(query) > -1;\n        return byName || byCity;\n      });\n    } else {\n      return data;\n    }\n  }\n\n  _getMarkers(data){\n    const filtered = data.map((e,i) => {\n      e.days ? e.days.map((elem) => {\n        elem.name = e.name\n        return elem;\n      }) : null;\n      return {\n        \"days\": e.days,\n        \"name\": e.name\n      };\n    }).filter((e,i) => {\n      return e.days;\n    });\n    if(data.length > 1){\n      return filtered.reduce((a,b) => {\n        const concat = a.days ? a.days.concat(b.days) : a.concat(b.days);\n        return concat;\n      });\n    } else {\n      return filtered[0] ? filtered[0].days : filtered;\n    }\n  }\n\n  _selectDays(evt){\n    const index = parseInt(evt.currentTarget.dataset.index);\n    const selected = !this.daysOpts[index].selected;\n    this.daysOpts = [\n      ...this.daysOpts.slice(0,index),\n      Object.assign({}, this.daysOpts[index], {selected: selected}),\n      ...this.daysOpts.slice(index + 1)\n    ];\n    console.log(index,selected, this.daysOpts);\n  }\n\n  _selectMarker(evt){\n    const name = evt.target.dataset.name;\n    this.query = name;\n    this._filter();\n  }\n\n  connectedCallback(){\n    super.connectedCallback();\n    this._filter();\n  }\n}\n\ncustomElements.define('fh-clubs', FengHuangClubs);\n\n\n// WEBPACK FOOTER //\n// ./src/fh-clubs/index.js","import { ElementMixin } from './lib/mixins/element-mixin.js';\n\n/**\n * Base class that provides the core API for Polymer's meta-programming\n * features including template stamping, data-binding, attribute deserialization,\n * and property change observation.\n *\n * @customElement\n * @polymer\n * @memberof Polymer\n * @constructor\n * @implements {Polymer_ElementMixin}\n * @extends HTMLElement\n * @appliesMixin Polymer.ElementMixin\n * @summary Custom element base class that provides the core API for Polymer's\n *   key meta-programming features including template stamping, data-binding,\n *   attribute deserialization, and property change observation\n */\nconst Element = ElementMixin(HTMLElement);\nexport { Element };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/polymer-element.js","import '../utils/boot.js';\nimport { rootPath as rootPath$0 } from '../utils/settings.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { camelToDashCase } from '../utils/case-map.js';\nimport { cssFromModuleImports, cssFromTemplate } from '../utils/style-gather.js';\nimport { resolveUrl as resolveUrl$0 } from '../utils/resolve-url.js';\nimport { DomModule } from '../elements/dom-module.js';\nimport { PropertyEffects } from './property-effects.js';\n\nexport const ElementMixin = dedupingMixin(base => {\n\n  /**\n   * @constructor\n   * @extends {base}\n   * @implements {Polymer_PropertyEffects}\n   */\n  const polymerElementBase = PropertyEffects(base);\n\n  let caseMap = caseMap$0;\n\n  /**\n   * Returns the `properties` object specifically on `klass`. Use for:\n   * (1) super chain mixes togther to make `propertiesForClass` which is\n   * then used to make `observedAttributes`.\n   * (2) properties effects and observers are created from it at `finalize` time.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Object} Object containing own properties for this class\n   * @private\n   */\n  function ownPropertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownProperties', klass))) {\n      klass.__ownProperties =\n        klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).properties : {};\n    }\n    return klass.__ownProperties;\n  }\n\n  /**\n   * Returns the `observers` array specifically on `klass`. Use for\n   * setting up observers.\n   *\n   * @param {HTMLElement} klass Element class\n   * @return {Array} Array containing own observers for this class\n   * @private\n   */\n  function ownObserversForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__ownObservers', klass))) {\n      klass.__ownObservers =\n        klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n        /** @type PolymerElementConstructor */ (klass).observers : [];\n    }\n    return klass.__ownObservers;\n  }\n\n  /**\n   * Mixes `props` into `flattenedProps` but upgrades shorthand type\n   * syntax to { type: Type}.\n   *\n   * @param {Object} flattenedProps Bag to collect flattened properties into\n   * @param {Object} props Bag of properties to add to `flattenedProps`\n   * @return {Object} The input `flattenedProps` bag\n   * @private\n   */\n  function flattenProperties(flattenedProps, props) {\n    for (let p in props) {\n      let o = props[p];\n      if (typeof o == 'function') {\n        o = { type: o };\n      }\n      flattenedProps[p] = o;\n    }\n    return flattenedProps;\n  }\n\n  /**\n   * Returns a flattened list of properties mixed together from the chain of all\n   * constructor's `config.properties`. This list is used to create\n   * (1) observedAttributes,\n   * (2) class property default values\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   * @suppress {missingProperties} class.prototype is not a property for some reason?\n   * @private\n   */\n  function propertiesForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classProperties', klass))) {\n      klass.__classProperties =\n      flattenProperties({}, ownPropertiesForClass(klass));\n      let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        klass.__classProperties = Object.assign(\n          Object.create(propertiesForClass(/** @type PolymerElementConstructor */(superCtor))),\n          klass.__classProperties);\n      }\n    }\n    return klass.__classProperties;\n  }\n\n  /**\n   * Returns a list of properties with default values.\n   * This list is created as an optimization since it is a subset of\n   * the list returned from `propertiesForClass`.\n   * This list is used in `_initializeProperties` to set property defaults.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {PolymerElementProperties} Flattened properties for this class\n   *   that have default values\n   * @private\n   */\n  function propertyDefaultsForClass(klass) {\n    if (!klass.hasOwnProperty(\n      JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n      klass.__classPropertyDefaults = null;\n      let props = propertiesForClass(klass);\n      for (let p in props) {\n        let info = props[p];\n        if ('value' in info) {\n          klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n          klass.__classPropertyDefaults[p] = info;\n        }\n      }\n    }\n    return klass.__classPropertyDefaults;\n  }\n\n  /**\n   * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n   * @param {PolymerElementConstructor} klass Element class\n   * @return {boolean} True if all metaprogramming for this class has been\n   *   completed\n   * @private\n   */\n  function hasClassFinalized(klass) {\n    return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n  }\n\n  /**\n   * Called by `ElementClass.finalize()`. Ensures this `klass` and\n   * *all superclasses* are finalized by traversing the prototype chain\n   * and calling `klass.finalize()`.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClassAndSuper(klass) {\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    let superCtor = Object.getPrototypeOf(proto).constructor;\n    if (superCtor.prototype instanceof PolymerElement) {\n      superCtor.finalize();\n    }\n    finalizeClass(klass);\n  }\n\n  /**\n   * Configures a `klass` based on a staic `klass.config` object and\n   * a `template`. This includes creating accessors and effects\n   * for properties in `config` and the `template` as well as preparing the\n   * `template` for stamping.\n   *\n   * @param {PolymerElementConstructor} klass Element class\n   * @private\n   */\n  function finalizeClass(klass) {\n    klass.__finalized = true;\n    let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n    if (klass.hasOwnProperty(\n      JSCompiler_renameProperty('is', klass)) && klass.is) {\n      register(proto);\n    }\n    let props = ownPropertiesForClass(klass);\n    if (props) {\n      finalizeProperties(proto, props);\n    }\n    let observers = ownObserversForClass(klass);\n    if (observers) {\n      finalizeObservers(proto, observers, props);\n    }\n    // note: create \"working\" template that is finalized at instance time\n    let template = /** @type PolymerElementConstructor */ (klass).template;\n    if (template) {\n      if (typeof template === 'string') {\n        let t = document.createElement('template');\n        t.innerHTML = template;\n        template = t;\n      } else {\n        template = template.cloneNode(true);\n      }\n      proto._template = template;\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `properties` object.\n   * Leverages `PropertyEffects` to create property accessors and effects\n   * supporting, observers, reflecting to attributes, change notification,\n   * computed properties, and read only properties.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *    and effects to\n   * @param {Object} properties Flattened bag of property descriptors for\n   *    this class\n   * @private\n   */\n  function finalizeProperties(proto, properties) {\n    for (let p in properties) {\n      createPropertyFromConfig(proto, p, properties[p], properties);\n    }\n  }\n\n  /**\n   * Configures a `proto` based on a `observers` array.\n   * Leverages `PropertyEffects` to create observers.\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {Object} observers Flattened array of observer descriptors for\n   *   this class\n   * @param {Object} dynamicFns Object containing keys for any properties\n   *   that are functions and should trigger the effect when the function\n   *   reference is changed\n   * @private\n   */\n  function finalizeObservers(proto, observers, dynamicFns) {\n    for (let i=0; i < observers.length; i++) {\n      proto._createMethodObserver(observers[i], dynamicFns);\n    }\n  }\n\n  /**\n   * Creates effects for a property.\n   *\n   * Note, once a property has been set to\n   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n   * these values may not be changed. For example, a subclass cannot\n   * alter these settings. However, additional `observers` may be added\n   * by subclasses.\n   *\n   * The info object should may contain property metadata as follows:\n   *\n   * * `type`: {function} type to which an attribute matching the property\n   * is deserialized. Note the property is camel-cased from a dash-cased\n   * attribute. For example, 'foo-bar' attribute is dersialized to a\n   * property named 'fooBar'.\n   *\n   * * `readOnly`: {boolean} creates a readOnly property and\n   * makes a private setter for the private of the form '_setFoo' for a\n   * property 'foo',\n   *\n   * * `computed`: {string} creates a computed property. A computed property\n   * also automatically is set to `readOnly: true`. The value is calculated\n   * by running a method and arguments parsed from the given string. For\n   * example 'compute(foo)' will compute a given property when the\n   * 'foo' property changes by executing the 'compute' method. This method\n   * must return the computed value.\n   *\n   * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n   * to an attribute of the same name. Note, the attribute is dash-cased\n   * so a property named 'fooBar' is reflected as 'foo-bar'.\n   *\n   * * `notify`: {boolean} sends a non-bubbling notification event when\n   * the property changes. For example, a property named 'foo' sends an\n   * event named 'foo-changed' with `event.detail` set to the value of\n   * the property.\n   *\n   * * observer: {string} name of a method that runs when the property\n   * changes. The arguments of the method are (value, previousValue).\n   *\n   * Note: Users may want control over modifying property\n   * effects via subclassing. For example, a user might want to make a\n   * reflectToAttribute property not do so in a subclass. We've chosen to\n   * disable this because it leads to additional complication.\n   * For example, a readOnly effect generates a special setter. If a subclass\n   * disables the effect, the setter would fail unexpectedly.\n   * Based on feedback, we may want to try to make effects more malleable\n   * and/or provide an advanced api for manipulating them.\n   * Also consider adding warnings when an effect cannot be changed.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {string} name Name of the property.\n   * @param {Object} info Info object from which to create property effects.\n   * Supported keys:\n   * @param {Object} allProps Flattened map of all properties defined in this\n   *   element (including inherited properties)\n   * @private\n   */\n  function createPropertyFromConfig(proto, name, info, allProps) {\n    // computed forces readOnly...\n    if (info.computed) {\n      info.readOnly = true;\n    }\n    // Note, since all computed properties are readOnly, this prevents\n    // adding additional computed property effects (which leads to a confusing\n    // setup where multiple triggers for setting a property)\n    // While we do have `hasComputedEffect` this is set on the property's\n    // dependencies rather than itself.\n    if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n      proto._createComputedProperty(name, info.computed, allProps);\n    }\n    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n      proto._createReadOnlyProperty(name, !info.computed);\n    }\n    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n      proto._createReflectedProperty(name);\n    }\n    if (info.notify && !proto._hasNotifyEffect(name)) {\n      proto._createNotifyingProperty(name);\n    }\n    // always add observer\n    if (info.observer) {\n      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n    }\n  }\n\n  /**\n   * Configures an element `proto` to function with a given `template`.\n   * The element name `is` and extends `ext` must be specified for ShadyCSS\n   * style scoping.\n   *\n   * @param {PolymerElement} proto Element class prototype to add accessors\n   *   and effects to\n   * @param {!HTMLTemplateElement} template Template to process and bind\n   * @param {string} baseURI URL against which to resolve urls in\n   *   style element cssText\n   * @param {string} is Tag name (or type extension name) for this element\n   * @param {string=} ext For type extensions, the tag name that was extended\n   * @private\n   */\n  function finalizeTemplate(proto, template, baseURI, is, ext) {\n    // support `include=\"module-name\"`\n    let cssText =\n      cssFromModuleImports(is) +\n      cssFromTemplate(template, baseURI);\n    if (cssText) {\n      let style = document.createElement('style');\n      style.textContent = cssText;\n      template.content.insertBefore(style, template.content.firstChild);\n    }\n    if (window.ShadyCSS) {\n      window.ShadyCSS.prepareTemplate(template, is, ext);\n    }\n    proto._bindTemplate(template);\n  }\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @unrestricted\n   * @implements {Polymer_ElementMixin}\n   */\n  class PolymerElement extends polymerElementBase {\n\n    /**\n     * Standard Custom Elements V1 API.  The default implementation returns\n     * a list of dash-cased attributes based on a flattening of all properties\n     * declared in `static get properties()` for this element and any\n     * superclasses.\n     *\n     * @return {Array} Observed attribute list\n     */\n    static get observedAttributes() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n        let list = [];\n        let properties = propertiesForClass(this);\n        for (let prop in properties) {\n          list.push(camelToDashCase(prop));\n        }\n        this.__observedAttributes = list;\n      }\n      return this.__observedAttributes;\n    }\n\n    /**\n     * Called automatically when the first element instance is created to\n     * ensure that class finalization work has been completed.\n     * May be called by users to eagerly perform class finalization work\n     * prior to the creation of the first element instance.\n     *\n     * Class finalization work generally includes meta-programming such as\n     * creating property accessors and any property effect metadata needed for\n     * the features used.\n     *\n     * @public\n     */\n    static finalize() {\n      if (!hasClassFinalized(this)) {\n        finalizeClassAndSuper(this);\n      }\n    }\n\n    /**\n     * Returns the template that will be stamped into this element's shadow root.\n     *\n     * If a `static get is()` getter is defined, the default implementation\n     * will return the first `<template>` in a `dom-module` whose `id`\n     * matches this element's `is`.\n     *\n     * Users may override this getter to return an arbitrary template\n     * (in which case the `is` getter is unnecessary). The template returned\n     * may be either an `HTMLTemplateElement` or a string that will be\n     * automatically parsed into a template.\n     *\n     * Note that when subclassing, if the super class overrode the default\n     * implementation and the subclass would like to provide an alternate\n     * template via a `dom-module`, it should override this getter and\n     * return `Polymer.DomModule.import(this.is, 'template')`.\n     *\n     * If a subclass would like to modify the super class template, it should\n     * clone it rather than modify it in place.  If the getter does expensive\n     * work such as cloning/modifying a template, it should memoize the\n     * template for maximum performance:\n     *\n     *   let memoizedTemplate;\n     *   class MySubClass extends MySuperClass {\n     *     static get template() {\n     *       if (!memoizedTemplate) {\n     *         memoizedTemplate = super.template.cloneNode(true);\n     *         let subContent = document.createElement('div');\n     *         subContent.textContent = 'This came from MySubClass';\n     *         memoizedTemplate.content.appendChild(subContent);\n     *       }\n     *       return memoizedTemplate;\n     *     }\n     *   }\n     *\n     * @return {HTMLTemplateElement|string} Template to be stamped\n     */\n    static get template() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n        this._template = DomModule && DomModule.import(\n          /** @type PolymerElementConstructor*/ (this).is, 'template') ||\n          // note: implemented so a subclass can retrieve the super\n          // template; call the super impl this way so that `this` points\n          // to the superclass.\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.template;\n      }\n      return this._template;\n    }\n\n    /**\n     * Path matching the url from which the element was imported.\n     * This path is used to resolve url's in template style cssText.\n     * The `importPath` property is also set on element instances and can be\n     * used to create bindings relative to the import path.\n     * Defaults to the path matching the url containing a `dom-module` element\n     * matching this element's static `is` property.\n     * Note, this path should contain a trailing `/`.\n     *\n     * @return {string} The import path for this element class\n     */\n    static get importPath() {\n      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n          const module = DomModule && DomModule.import(/** @type PolymerElementConstructor */ (this).is);\n          this._importPath = module ? module.assetpath : '' ||\n          Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.importPath;\n      }\n      return this._importPath;\n    }\n\n    constructor() {\n      super();\n      /** @type {HTMLTemplateElement} */\n      this._template;\n      /** @type {string} */\n      this._importPath;\n      /** @type {string} */\n      this.rootPath;\n      /** @type {string} */\n      this.importPath;\n      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */\n      this.root;\n      /** @type {!Object<string, !Node>} */\n      this.$;\n    }\n\n    /**\n     * Overrides the default `Polymer.PropertyAccessors` to ensure class\n     * metaprogramming related to property accessors and effects has\n     * completed (calls `finalize`).\n     *\n     * It also initializes any property defaults provided via `value` in\n     * `properties` metadata.\n     *\n     * @override\n     * @suppress {invalidCasts}\n     */\n    _initializeProperties() {\n      instanceCount++;\n      this.constructor.finalize();\n      const importPath = this.constructor.importPath;\n      // note: finalize template when we have access to `localName` to\n      // avoid dependence on `is` for polyfilling styling.\n      if (this._template && !this._template.__polymerFinalized) {\n        this._template.__polymerFinalized = true;\n        const baseURI =\n          importPath ? resolveUrl$0(importPath) : '';\n        finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n          /**@type {!HTMLElement}*/(this).localName);\n      }\n      super._initializeProperties();\n      // set path defaults\n      this.rootPath = rootPath$0;\n      this.importPath = importPath;\n      // apply property defaults...\n      let p$ = propertyDefaultsForClass(this.constructor);\n      if (!p$) {\n        return;\n      }\n      for (let p in p$) {\n        let info = p$[p];\n        // Don't set default value if there is already an own property, which\n        // happens when a `properties` property with default but no effects had\n        // a property set (e.g. bound) by its host before upgrade\n        if (!this.hasOwnProperty(p)) {\n          let value = typeof info.value == 'function' ?\n            info.value.call(this) :\n            info.value;\n          // Set via `_setProperty` if there is an accessor, to enable\n          // initializing readOnly property defaults\n          if (this._hasAccessor(p)) {\n            this._setPendingProperty(p, value, true);\n          } else {\n            this[p] = value;\n          }\n        }\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `connectedCallback`.\n     *\n     * The default implementation enables the property effects system and\n     * flushes any pending properties, and updates shimmed CSS properties\n     * when using the ShadyCSS scoping/custom properties polyfill.\n     *\n     * @suppress {invalidCasts}\n     */\n    connectedCallback() {\n      if (window.ShadyCSS && this._template) {\n        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n      }\n      this._enableProperties();\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `disconnectedCallback`.\n     */\n    disconnectedCallback() {}\n\n    /**\n     * Stamps the element template.\n     *\n     * @override\n     */\n    ready() {\n      if (this._template) {\n        this.root = this._stampTemplate(this._template);\n        this.$ = this.root.$;\n      }\n      super.ready();\n    }\n\n    /**\n     * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n     * element dom by calling `_attachDom` with the dom stamped from the\n     * element's template via `_stampTemplate`. Note that this allows\n     * client dom to be attached to the element prior to any observers\n     * running.\n     *\n     * @override\n     */\n    _readyClients() {\n      if (this._template) {\n        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));\n      }\n      // The super._readyClients here sets the clients initialized flag.\n      // We must wait to do this until after client dom is created/attached\n      // so that this flag can be checked to prevent notifications fired\n      // during this process from being handled before clients are ready.\n      super._readyClients();\n    }\n\n\n    /**\n     * Attaches an element's stamped dom to itself. By default,\n     * this method creates a `shadowRoot` and adds the dom to it.\n     * However, this method may be overridden to allow an element\n     * to put its dom in another location.\n     *\n     * @throws {Error}\n     * @suppress {missingReturn}\n     * @param {StampedTemplate} dom to attach to the element.\n     * @return {ShadowRoot} node to which the dom has been attached.\n     */\n    _attachDom(dom) {\n      if (this.attachShadow) {\n        if (dom) {\n          if (!this.shadowRoot) {\n            this.attachShadow({mode: 'open'});\n          }\n          this.shadowRoot.appendChild(dom);\n          return this.shadowRoot;\n        }\n        return null;\n      } else {\n        throw new Error('ShadowDOM not available. ' +\n          // TODO(sorvell): move to compile-time conditional when supported\n        'Polymer.Element can create dom as children instead of in ' +\n        'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n      }\n    }\n\n    /**\n     * Provides a default implementation of the standard Custom Elements\n     * `attributeChangedCallback`.\n     *\n     * By default, attributes declared in `properties` metadata are\n     * deserialized using their `type` information to properties of the\n     * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n     * properties.\n     *\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @override\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        let property = caseMap.dashToCamelCase(name);\n        let type = propertiesForClass(this.constructor)[property].type;\n        if (!this._hasReadOnlyEffect(property)) {\n          this._attributeToProperty(name, value, type);\n        }\n      }\n    }\n\n    /**\n     * When using the ShadyCSS scoping and custom property shim, causes all\n     * shimmed styles in this element (and its subtree) to be updated\n     * based on current custom property values.\n     *\n     * The optional parameter overrides inline custom property styles with an\n     * object of properties where the keys are CSS properties, and the values\n     * are strings.\n     *\n     * Example: `this.updateStyles({'--color': 'blue'})`\n     *\n     * These properties are retained unless a value of `null` is set.\n     *\n     * @param {Object=} properties Bag of custom property key/values to\n     *   apply to this element.\n     * @suppress {invalidCasts}\n     */\n    updateStyles(properties) {\n      if (window.ShadyCSS) {\n        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n      }\n    }\n\n    /**\n     * Rewrites a given URL relative to a base URL. The base URL defaults to\n     * the original location of the document containing the `dom-module` for\n     * this element. This method will return the same URL before and after\n     * bundling.\n     *\n     * @param {string} url URL to resolve.\n     * @param {string=} base Optional base URL to resolve against, defaults\n     * to the element's `importPath`\n     * @return {string} Rewritten URL relative to base\n     */\n    resolveUrl(url, base) {\n      if (!base && this.importPath) {\n        base = resolveUrl$0(this.importPath);\n      }\n      return resolveUrl$0(url, base);\n    }\n\n    /**\n     * Overrides `PropertyAccessors` to add map of dynamic functions on\n     * template info, for consumption by `PropertyEffects` template binding\n     * code. This map determines which method templates should have accessors\n     * created for them.\n     *\n     * @override\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n      return super._parseTemplateContent(template, templateInfo, nodeInfo);\n    }\n\n  }\n\n  return PolymerElement;\n});\n\nexport let instanceCount = 0;\nexport const registrations = [];\n\nexport function _regLog(prototype) {\n  console.log('[' + prototype.is + ']: registered');\n}\n\nexport function register(prototype) {\n  registrations.push(prototype);\n  undefined && _regLog(prototype);\n}\n\nexport function dumpRegistrations() {\n  registrations.forEach(_regLog);\n}\n\nexport const updateStyles = function(props) {\n  if (window.ShadyCSS) {\n    window.ShadyCSS.styleDocument(props);\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/element-mixin.js","import { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\n\nfunction importModule(moduleId) {\n  const /** Polymer.DomModule */ PolymerDomModule = customElements.get('dom-module');\n  if (!PolymerDomModule) {\n    return null;\n  }\n  return PolymerDomModule.import(moduleId);\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\nexport function cssFromModules(moduleIds) {\n  let modules = moduleIds.trim().split(/\\s+/);\n  let cssText = '';\n  for (let i=0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n  return cssText;\n}\n\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t, /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  // if element is a template, get content from its .content\n  let e$ = template.content.querySelectorAll('style');\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    // support style sharing by allowing styles to \"include\"\n    // other dom-modules that contain styling\n    let include = e.getAttribute(INCLUDE_ATTR);\n    if (include) {\n      cssText += cssFromModules(include);\n    }\n    e.parentNode.removeChild(e);\n    cssText += baseURI ?\n      resolveCss(e.textContent, baseURI) : e.textContent;\n  }\n  return cssText;\n}\n\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\nexport function _cssFromModuleImports(module) {\n  let cssText = '';\n  let p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      let importDoc = p.import;\n      // NOTE: polyfill affordance.\n      // under the HTMLImports polyfill, there will be no 'body',\n      // but the import pseudo-doc can be used directly.\n      let container = importDoc.body ? importDoc.body : importDoc;\n      cssText +=\n        resolveCss(container.textContent,\n          importDoc.baseURI);\n    }\n  }\n  return cssText;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/style-gather.js","import '../utils/boot.js';\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\n\nlet modules = {};\nlet lcModules = {};\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @memberof Polymer\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nclass DomModule extends HTMLElement {\n\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  attributeChangedCallback(name, old, value) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accomodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      this.id = id;\n      // store id separate from lowercased id so that\n      // in all cases mixedCase id will stored distinctly\n      // and lowercase version is a fallback\n      modules[id] = this;\n      lcModules[id.toLowerCase()] = this;\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n\nexport { DomModule };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/elements/dom-module.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { root as root$0, isAncestor, isDescendant, get as get$0, translate, isPath as isPath$0, set as set$0, normalize } from '../utils/path.js';\nimport * as caseMap from '../utils/case-map.js';\nimport { camelToDashCase as camelToDashCase$0, dashToCamelCase } from '../utils/case-map.js';\nimport { PropertyAccessors } from './property-accessors.js';\nimport { TemplateStamp } from './template-stamp.js';\nimport { sanitizeDOMValue } from '../utils/settings.js';\n\n/** @const {Object} */\nconst CaseMap = caseMap;\n\n// Monotonically increasing unique ID used for de-duping effects triggered\n// from multiple properties in the same turn\nlet dedupeId = 0;\n\n/**\n * Property effect types; effects are stored on the prototype using these keys\n * @enum {string}\n */\nconst TYPES = {\n  COMPUTE: '__computeEffects',\n  REFLECT: '__reflectEffects',\n  NOTIFY: '__notifyEffects',\n  PROPAGATE: '__propagateEffects',\n  OBSERVE: '__observeEffects',\n  READ_ONLY: '__readOnly'\n};\n\n/**\n * @typedef {{\n * name: (string | undefined),\n * structured: (boolean | undefined),\n * wildcard: (boolean | undefined)\n * }}\n */\nlet DataTrigger; //eslint-disable-line no-unused-vars\n\n/**\n * @typedef {{\n * info: ?,\n * trigger: (!DataTrigger | undefined),\n * fn: (!Function | undefined)\n * }}\n */\nlet DataEffect; //eslint-disable-line no-unused-vars\n\nlet PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n/**\n * Ensures that the model has an own-property map of effects for the given type.\n * The model may be a prototype or an instance.\n *\n * Property effects are stored as arrays of effects by property in a map,\n * by named type on the model. e.g.\n *\n *   __computeEffects: {\n *     foo: [ ... ],\n *     bar: [ ... ]\n *   }\n *\n * If the model does not yet have an effect map for the type, one is created\n * and returned.  If it does, but it is not an own property (i.e. the\n * prototype had effects), the the map is deeply cloned and the copy is\n * set on the model and returned, ready for new effects to be added.\n *\n * @param {Object} model Prototype or instance\n * @param {string} type Property effect type\n * @return {Object} The own-property map of effects for the given type\n * @private\n */\nfunction ensureOwnEffectMap(model, type) {\n  let effects = model[type];\n  if (!effects) {\n    effects = model[type] = {};\n  } else if (!model.hasOwnProperty(type)) {\n    effects = model[type] = Object.create(model[type]);\n    for (let p in effects) {\n      let protoFx = effects[p];\n      let instFx = effects[p] = Array(protoFx.length);\n      for (let i=0; i<protoFx.length; i++) {\n        instFx[i] = protoFx[i];\n      }\n    }\n  }\n  return effects;\n}\n\n// -- effects ----------------------------------------------\n\n/**\n * Runs all effects of a given type for the given set of property changes\n * on an instance.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {Object} props Bag of current property changes\n * @param {Object=} oldProps Bag of previous values for changed properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n  if (effects) {\n    let ran = false;\n    let id = dedupeId++;\n    for (let prop in props) {\n      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n        ran = true;\n      }\n    }\n    return ran;\n  }\n  return false;\n}\n\n/**\n * Runs a list of effects for a given property.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} effects Object map of property-to-Array of effects\n * @param {number} dedupeId Counter used for de-duping effects\n * @param {string} prop Name of changed property\n * @param {*} props Changed properties\n * @param {*} oldProps Old properties\n * @param {boolean=} hasPaths True with `props` contains one or more paths\n * @param {*=} extraArgs Additional metadata to pass to effect function\n * @return {boolean} True if an effect ran for this property\n * @private\n */\nfunction runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n  let ran = false;\n  let rootProperty = hasPaths ? root$0(prop) : prop;\n  let fxs = effects[rootProperty];\n  if (fxs) {\n    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n      if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n        if (fx.info) {\n          fx.info.lastRun = dedupeId;\n        }\n        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n        ran = true;\n      }\n    }\n  }\n  return ran;\n}\n\n/**\n * Determines whether a property/path that has changed matches the trigger\n * criteria for an effect.  A trigger is a descriptor with the following\n * structure, which matches the descriptors returned from `parseArg`.\n * e.g. for `foo.bar.*`:\n * ```\n * trigger: {\n *   name: 'a.b',\n *   structured: true,\n *   wildcard: true\n * }\n * ```\n * If no trigger is given, the path is deemed to match.\n *\n * @param {string} path Path or property that changed\n * @param {DataTrigger} trigger Descriptor\n * @return {boolean} Whether the path matched the trigger\n */\nfunction pathMatchesTrigger(path, trigger) {\n  if (trigger) {\n    let triggerPath = trigger.name;\n    return (triggerPath == path) ||\n      (trigger.structured && isAncestor(triggerPath, path)) ||\n      (trigger.wildcard && isDescendant(triggerPath, path));\n  } else {\n    return true;\n  }\n}\n\n/**\n * Implements the \"observer\" effect.\n *\n * Calls the method with `info.methodName` on the instance, passing the\n * new and old values.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runObserverEffect(inst, property, props, oldProps, info) {\n  let fn = inst[info.methodName];\n  let changedProp = info.property;\n  if (fn) {\n    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n  } else if (!info.dynamicFn) {\n    console.warn('observer method `' + info.methodName + '` not defined');\n  }\n}\n\n/**\n * Runs \"notify\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * will dispatch path notification events in the case that the property\n * changed was a path and the root property for that path didn't have a\n * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n * `notify: true` to ensure object sub-property notifications were\n * sent.\n *\n * @param {!PropertyEffectsType} inst The instance with effects to run\n * @param {Object} notifyProps Bag of properties to notify\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n  // Notify\n  let fxs = inst[TYPES.NOTIFY];\n  let notified;\n  let id = dedupeId++;\n  // Try normal notify effects; if none, fall back to try path notification\n  for (let prop in notifyProps) {\n    if (notifyProps[prop]) {\n      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n        notified = true;\n      } else if (hasPaths && notifyPath(inst, prop, props)) {\n        notified = true;\n      }\n    }\n  }\n  // Flush host if we actually notified and host was batching\n  // And the host has already initialized clients; this prevents\n  // an issue with a host observing data changes before clients are ready.\n  let host;\n  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n    host._invalidateProperties();\n  }\n}\n\n/**\n * Dispatches {property}-changed events with path information in the detail\n * object to indicate a sub-path of the property was changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} path The path that was changed\n * @param {Object} props Bag of current property changes\n * @return {boolean} Returns true if the path was notified\n * @private\n */\nfunction notifyPath(inst, path, props) {\n  let rootProperty = root$0(path);\n  if (rootProperty !== path) {\n    let eventName = camelToDashCase$0(rootProperty) + '-changed';\n    dispatchNotifyEvent(inst, eventName, props[path], path);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Dispatches {property}-changed events to indicate a property (or path)\n * changed.\n *\n * @param {!PropertyEffectsType} inst The element from which to fire the event\n * @param {string} eventName The name of the event to send ('{property}-changed')\n * @param {*} value The value of the changed property\n * @param {string | null | undefined} path If a sub-path of this property changed, the path\n *   that changed (optional).\n * @private\n * @suppress {invalidCasts}\n */\nfunction dispatchNotifyEvent(inst, eventName, value, path) {\n  let detail = {\n    value: value,\n    queueProperty: true\n  };\n  if (path) {\n    detail.path = path;\n  }\n  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n}\n\n/**\n * Implements the \"notify\" effect.\n *\n * Dispatches a non-bubbling event named `info.eventName` on the instance\n * with a detail object containing the new `value`.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n  let rootProperty = hasPaths ? root$0(property) : property;\n  let path = rootProperty != property ? property : null;\n  let value = path ? get$0(inst, path) : inst.__data[property];\n  if (path && value === undefined) {\n    value = props[property];  // specifically for .splices\n  }\n  dispatchNotifyEvent(inst, info.eventName, value, path);\n}\n\n/**\n * Handler function for 2-way notification events. Receives context\n * information captured in the `addNotifyListener` closure from the\n * `__notifyListeners` metadata.\n *\n * Sets the value of the notified property to the host property or path.  If\n * the event contained path information, translate that path to the host\n * scope's name for that path first.\n *\n * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n * @param {string} fromProp Child element property that was bound\n * @param {string} toPath Host property/path that was bound\n * @param {boolean} negate Whether the binding was negated\n * @private\n */\nfunction handleNotification(event, inst, fromProp, toPath, negate) {\n  let value;\n  let detail = /** @type {Object} */(event.detail);\n  let fromPath = detail && detail.path;\n  if (fromPath) {\n    toPath = translate(fromProp, toPath, fromPath);\n    value = detail && detail.value;\n  } else {\n    value = event.target[fromProp];\n  }\n  value = negate ? !value : value;\n  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n      && (!detail || !detail.queueProperty)) {\n      inst._invalidateProperties();\n    }\n  }\n}\n\n/**\n * Implements the \"reflect\" effect.\n *\n * Sets the attribute named `info.attrName` to the given property value.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runReflectEffect(inst, property, props, oldProps, info) {\n  let value = inst.__data[property];\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n  }\n  inst._propertyToAttribute(property, info.attrName, value);\n}\n\n/**\n * Runs \"computed\" effects for a set of changed properties.\n *\n * This method differs from the generic `runEffects` method in that it\n * continues to run computed effects based on the output of each pass until\n * there are no more newly computed properties.  This ensures that all\n * properties that will be computed by the initial set of changes are\n * computed before other effects (binding propagation, observers, and notify)\n * run.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {!Object} changedProps Bag of changed properties\n * @param {!Object} oldProps Bag of previous values for changed properties\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @private\n */\nfunction runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n  let computeEffects = inst[TYPES.COMPUTE];\n  if (computeEffects) {\n    let inputProps = changedProps;\n    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n      Object.assign(oldProps, inst.__dataOld);\n      Object.assign(changedProps, inst.__dataPending);\n      inputProps = inst.__dataPending;\n      inst.__dataPending = null;\n    }\n  }\n}\n\n/**\n * Implements the \"computed property\" effect by running the method with the\n * values of the arguments specified in the `info` object and setting the\n * return value to the computed property specified.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @private\n */\nfunction runComputedEffect(inst, property, props, oldProps, info) {\n  let result = runMethodEffect(inst, property, props, oldProps, info);\n  let computedProp = info.methodInfo;\n  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n    inst._setPendingProperty(computedProp, result, true);\n  } else {\n    inst[computedProp] = result;\n  }\n}\n\n/**\n * Computes path changes based on path links set up using the `linkPaths`\n * API.\n *\n * @param {!PropertyEffectsType} inst The instance whose props are changing\n * @param {string | !Array<(string|number)>} path Path that has changed\n * @param {*} value Value of changed path\n * @private\n */\nfunction computeLinkedPaths(inst, path, value) {\n  let links = inst.__dataLinkedPaths;\n  if (links) {\n    let link;\n    for (let a in links) {\n      let b = links[a];\n      if (isDescendant(a, path)) {\n        link = translate(a, b, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      } else if (isDescendant(b, path)) {\n        link = translate(b, a, path);\n        inst._setPendingPropertyOrPath(link, value, true, true);\n      }\n    }\n  }\n}\n\n// -- bindings ----------------------------------------------\n\n/**\n * Adds binding metadata to the current `nodeInfo`, and binding effects\n * for all part dependencies to `templateInfo`.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {NodeInfo} nodeInfo Node metadata for current template node\n * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n * @param {string} target Target property name\n * @param {!Array<!BindingPart>} parts Array of binding part metadata\n * @param {string=} literal Literal text surrounding binding parts (specified\n *   only for 'property' bindings, since these must be initialized as part\n *   of boot-up)\n * @private\n */\nfunction addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n  // Create binding metadata and add to nodeInfo\n  nodeInfo.bindings = nodeInfo.bindings || [];\n  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n  nodeInfo.bindings.push(binding);\n  // Add listener info to binding metadata\n  if (shouldAddListener(binding)) {\n    let {event, negate} = binding.parts[0];\n    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n    binding.listenerNegate = negate;\n  }\n  // Add \"propagate\" property effects to templateInfo\n  let index = templateInfo.nodeInfoList.length;\n  for (let i=0; i<binding.parts.length; i++) {\n    let part = binding.parts[i];\n    part.compoundIndex = i;\n    addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n  }\n}\n\n/**\n * Adds property effects to the given `templateInfo` for the given binding\n * part.\n *\n * @param {Function} constructor Class that `_parseTemplate` is currently\n *   running on\n * @param {TemplateInfo} templateInfo Template metadata for current template\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {number} index Index into `nodeInfoList` for this node\n */\nfunction addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n  if (!part.literal) {\n    if (binding.kind === 'attribute' && binding.target[0] === '-') {\n      console.warn('Cannot set attribute ' + binding.target +\n        ' because \"-\" is not a valid attribute starting character');\n    } else {\n      let dependencies = part.dependencies;\n      let info = { index, binding, part, evaluator: constructor };\n      for (let j=0; j<dependencies.length; j++) {\n        let trigger = dependencies[j];\n        if (typeof trigger == 'string') {\n          trigger = parseArg(trigger);\n          trigger.wildcard = true;\n        }\n        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n          fn: runBindingEffect,\n          info, trigger\n        });\n      }\n    }\n  }\n}\n\n/**\n * Implements the \"binding\" (property/path binding) effect.\n *\n * Note that binding syntax is overridable via `_parseBindings` and\n * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n * non-literal parts returned from `_parseBindings`.  However,\n * there is no support for _path_ bindings via custom binding parts,\n * as this is specific to Polymer's path binding syntax.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} path Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @param {boolean} hasPaths True with `props` contains one or more paths\n * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n *   metadata\n * @private\n */\nfunction runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n  let node = nodeList[info.index];\n  let binding = info.binding;\n  let part = info.part;\n  // Subpath notification: transform path and set to client\n  // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n  if (hasPaths && part.source && (path.length > part.source.length) &&\n      (binding.kind == 'property') && !binding.isCompound &&\n      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n    let value = props[path];\n    path = translate(part.source, binding.target, path);\n    if (node._setPendingPropertyOrPath(path, value, false, true)) {\n      inst._enqueueClient(node);\n    }\n  } else {\n    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n    // Propagate value to child\n    applyBindingValue(inst, node, binding, part, value);\n  }\n}\n\n/**\n * Sets the value for an \"binding\" (binding) effect to a node,\n * either as a property or attribute.\n *\n * @param {!PropertyEffectsType} inst The instance owning the binding effect\n * @param {Node} node Target node for binding\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @param {*} value Value to set\n * @private\n */\nfunction applyBindingValue(inst, node, binding, part, value) {\n  value = computeBindingValue(node, value, binding, part);\n  if (sanitizeDOMValue) {\n    value = sanitizeDOMValue(value, binding.target, binding.kind, node);\n  }\n  if (binding.kind == 'attribute') {\n    // Attribute binding\n    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n  } else {\n    // Property binding\n    let prop = binding.target;\n    if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n        if (node._setPendingProperty(prop, value)) {\n          inst._enqueueClient(node);\n        }\n      }\n    } else  {\n      inst._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n}\n\n/**\n * Transforms an \"binding\" effect value based on compound & negation\n * effect metadata, as well as handling for special-case properties\n *\n * @param {Node} node Node the value will be set to\n * @param {*} value Value to set\n * @param {!Binding} binding Binding metadata\n * @param {!BindingPart} part Binding part metadata\n * @return {*} Transformed value to set\n * @private\n */\nfunction computeBindingValue(node, value, binding, part) {\n  if (binding.isCompound) {\n    let storage = node.__dataCompoundStorage[binding.target];\n    storage[part.compoundIndex] = value;\n    value = storage.join('');\n  }\n  if (binding.kind !== 'attribute') {\n    // Some browsers serialize `undefined` to `\"undefined\"`\n    if (binding.target === 'textContent' ||\n        (node.localName == 'input' && binding.target == 'value')) {\n      value = value == undefined ? '' : value;\n    }\n  }\n  return value;\n}\n\n/**\n * Returns true if a binding's metadata meets all the requirements to allow\n * 2-way binding, and therefore a `<property>-changed` event listener should be\n * added:\n * - used curly braces\n * - is a property (not attribute) binding\n * - is not a textContent binding\n * - is not compound\n *\n * @param {!Binding} binding Binding metadata\n * @return {boolean} True if 2-way listener should be added\n * @private\n */\nfunction shouldAddListener(binding) {\n  return Boolean(binding.target) &&\n         binding.kind != 'attribute' &&\n         binding.kind != 'text' &&\n         !binding.isCompound &&\n         binding.parts[0].mode === '{';\n}\n\n/**\n * Setup compound binding storage structures, notify listeners, and dataHost\n * references onto the bound nodeList.\n *\n * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n * @param {TemplateInfo} templateInfo Template metadata\n * @private\n */\nfunction setupBindings(inst, templateInfo) {\n  // Setup compound storage, dataHost, and notify listeners\n  let {nodeList, nodeInfoList} = templateInfo;\n  if (nodeInfoList.length) {\n    for (let i=0; i < nodeInfoList.length; i++) {\n      let info = nodeInfoList[i];\n      let node = nodeList[i];\n      let bindings = info.bindings;\n      if (bindings) {\n        for (let i=0; i<bindings.length; i++) {\n          let binding = bindings[i];\n          setupCompoundStorage(node, binding);\n          addNotifyListener(node, inst, binding);\n        }\n      }\n      node.__dataHost = inst;\n    }\n  }\n}\n\n/**\n * Initializes `__dataCompoundStorage` local storage on a bound node with\n * initial literal data for compound bindings, and sets the joined\n * literal parts to the bound property.\n *\n * When changes to compound parts occur, they are first set into the compound\n * storage array for that property, and then the array is joined to result in\n * the final value set to the property/attribute.\n *\n * @param {Node} node Bound node to initialize\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction setupCompoundStorage(node, binding) {\n  if (binding.isCompound) {\n    // Create compound storage map\n    let storage = node.__dataCompoundStorage ||\n      (node.__dataCompoundStorage = {});\n    let parts = binding.parts;\n    // Copy literals from parts into storage for this binding\n    let literals = new Array(parts.length);\n    for (let j=0; j<parts.length; j++) {\n      literals[j] = parts[j].literal;\n    }\n    let target = binding.target;\n    storage[target] = literals;\n    // Configure properties with their literal parts\n    if (binding.literal && binding.kind == 'property') {\n      node[target] = binding.literal;\n    }\n  }\n}\n\n/**\n * Adds a 2-way binding notification event listener to the node specified\n *\n * @param {Object} node Child element to add listener to\n * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n * @param {Binding} binding Binding metadata\n * @private\n */\nfunction addNotifyListener(node, inst, binding) {\n  if (binding.listenerEvent) {\n    let part = binding.parts[0];\n    node.addEventListener(binding.listenerEvent, function(e) {\n      handleNotification(e, inst, binding.target, part.source, part.negate);\n    });\n  }\n}\n\n// -- for method-based effects (complexObserver & computed) --------------\n\n/**\n * Adds property effects for each argument in the method signature (and\n * optionally, for the method name if `dynamic` is true) that calls the\n * provided effect function.\n *\n * @param {Element | Object} model Prototype or instance\n * @param {!MethodSignature} sig Method signature metadata\n * @param {string} type Type of property effect to add\n * @param {Function} effectFn Function to run when arguments change\n * @param {*=} methodInfo Effect-specific information to be included in\n *   method effect metadata\n * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n *   method names should be included as a dependency to the effect. Note,\n *   defaults to true if the signature is static (sig.static is true).\n * @private\n */\nfunction createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n  dynamicFn = sig.static || (dynamicFn &&\n    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n  let info = {\n    methodName: sig.methodName,\n    args: sig.args,\n    methodInfo,\n    dynamicFn\n  };\n  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n    if (!arg.literal) {\n      model._addPropertyEffect(arg.rootProperty, type, {\n        fn: effectFn, info: info, trigger: arg\n      });\n    }\n  }\n  if (dynamicFn) {\n    model._addPropertyEffect(sig.methodName, type, {\n      fn: effectFn, info: info\n    });\n  }\n}\n\n/**\n * Calls a method with arguments marshaled from properties on the instance\n * based on the method signature contained in the effect metadata.\n *\n * Multi-property observers, computed properties, and inline computing\n * functions call this function to invoke the method, then use the return\n * value accordingly.\n *\n * @param {!PropertyEffectsType} inst The instance the effect will be run on\n * @param {string} property Name of property\n * @param {Object} props Bag of current property changes\n * @param {Object} oldProps Bag of previous values for changed properties\n * @param {?} info Effect metadata\n * @return {*} Returns the return value from the method invocation\n * @private\n */\nfunction runMethodEffect(inst, property, props, oldProps, info) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  let context = inst._methodHost || inst;\n  let fn = context[info.methodName];\n  if (fn) {\n    let args = marshalArgs(inst.__data, info.args, property, props);\n    return fn.apply(context, args);\n  } else if (!info.dynamicFn) {\n    console.warn('method `' + info.methodName + '` not defined');\n  }\n}\n\nconst emptyArray = [];\n\n// Regular expressions used for binding\nconst IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\nconst NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\nconst SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\nconst DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\nconst STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\nconst ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\nconst ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\nconst ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                              '(?:' + ARGUMENTS + '?' + ')' +\n                            '\\\\)\\\\s*' + ')';\nconst BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\nconst OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\nconst CLOSE_BRACKET = '(?:]]|}})';\nconst NEGATE = '(?:(!)\\\\s*)?'; // Group 2\nconst EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\nconst bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n/**\n * Create a string from binding parts of all the literal parts\n *\n * @param {!Array<BindingPart>} parts All parts to stringify\n * @return {string} String made from the literal parts\n */\nfunction literalFromParts(parts) {\n  let s = '';\n  for (let i=0; i<parts.length; i++) {\n    let literal = parts[i].literal;\n    s += literal || '';\n  }\n  return s;\n}\n\n/**\n * Parses an expression string for a method signature, and returns a metadata\n * describing the method in terms of `methodName`, `static` (whether all the\n * arguments are literals), and an array of `args`\n *\n * @param {string} expression The expression to parse\n * @return {?MethodSignature} The method metadata object if a method expression was\n *   found, otherwise `undefined`\n * @private\n */\nfunction parseMethod(expression) {\n  // tries to match valid javascript property names\n  let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n  if (m) {\n    let methodName = m[1];\n    let sig = { methodName, static: true, args: emptyArray };\n    if (m[2].trim()) {\n      // replace escaped commas with comma entity, split on un-escaped commas\n      let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n      return parseArgs(args, sig);\n    } else {\n      return sig;\n    }\n  }\n  return null;\n}\n\n/**\n * Parses an array of arguments and sets the `args` property of the supplied\n * signature metadata object. Sets the `static` property to false if any\n * argument is a non-literal.\n *\n * @param {!Array<string>} argList Array of argument names\n * @param {!MethodSignature} sig Method signature metadata object\n * @return {!MethodSignature} The updated signature metadata object\n * @private\n */\nfunction parseArgs(argList, sig) {\n  sig.args = argList.map(function(rawArg) {\n    let arg = parseArg(rawArg);\n    if (!arg.literal) {\n      sig.static = false;\n    }\n    return arg;\n  }, this);\n  return sig;\n}\n\n/**\n * Parses an individual argument, and returns an argument metadata object\n * with the following fields:\n *\n *   {\n *     value: 'prop',        // property/path or literal value\n *     literal: false,       // whether argument is a literal\n *     structured: false,    // whether the property is a path\n *     rootProperty: 'prop', // the root property of the path\n *     wildcard: false       // whether the argument was a wildcard '.*' path\n *   }\n *\n * @param {string} rawArg The string value of the argument\n * @return {!MethodArg} Argument metadata object\n * @private\n */\nfunction parseArg(rawArg) {\n  // clean up whitespace\n  let arg = rawArg.trim()\n    // replace comma entity with comma\n    .replace(/&comma;/g, ',')\n    // repair extra escape sequences; note only commas strictly need\n    // escaping, but we allow any other char to be escaped since its\n    // likely users will do this\n    .replace(/\\\\(.)/g, '\\$1')\n    ;\n  // basic argument descriptor\n  let a = {\n    name: arg,\n    value: '',\n    literal: false\n  };\n  // detect literal value (must be String or Number)\n  let fc = arg[0];\n  if (fc === '-') {\n    fc = arg[1];\n  }\n  if (fc >= '0' && fc <= '9') {\n    fc = '#';\n  }\n  switch(fc) {\n    case \"'\":\n    case '\"':\n      a.value = arg.slice(1, -1);\n      a.literal = true;\n      break;\n    case '#':\n      a.value = Number(arg);\n      a.literal = true;\n      break;\n  }\n  // if not literal, look for structured path\n  if (!a.literal) {\n    a.rootProperty = root$0(arg);\n    // detect structured path (has dots)\n    a.structured = isPath$0(arg);\n    if (a.structured) {\n      a.wildcard = (arg.slice(-2) == '.*');\n      if (a.wildcard) {\n        a.name = arg.slice(0, -2);\n      }\n    }\n  }\n  return a;\n}\n\n/**\n * Gather the argument values for a method specified in the provided array\n * of argument metadata.\n *\n * The `path` and `value` arguments are used to fill in wildcard descriptor\n * when the method is being called as a result of a path notification.\n *\n * @param {Object} data Instance data storage object to read properties from\n * @param {!Array<!MethodArg>} args Array of argument metadata\n * @param {string} path Property/path name that triggered the method effect\n * @param {Object} props Bag of current property changes\n * @return {Array<*>} Array of argument values\n * @private\n */\nfunction marshalArgs(data, args, path, props) {\n  let values = [];\n  for (let i=0, l=args.length; i<l; i++) {\n    let arg = args[i];\n    let name = arg.name;\n    let v;\n    if (arg.literal) {\n      v = arg.value;\n    } else {\n      if (arg.structured) {\n        v = get$0(data, name);\n        // when data is not stored e.g. `splices`\n        if (v === undefined) {\n          v = props[name];\n        }\n      } else {\n        v = data[name];\n      }\n    }\n    if (arg.wildcard) {\n      // Only send the actual path changed info if the change that\n      // caused the observer to run matched the wildcard\n      let baseChanged = (name.indexOf(path + '.') === 0);\n      let matches = (path.indexOf(name) === 0 && !baseChanged);\n      values[i] = {\n        path: matches ? path : name,\n        value: matches ? props[path] : v,\n        base: v\n      };\n    } else {\n      values[i] = v;\n    }\n  }\n  return values;\n}\n\n// data api\n\n/**\n * Sends array splice notifications (`.splices` and `.length`)\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {Array} splices Array of splice records\n * @private\n */\nfunction notifySplices(inst, array, path, splices) {\n  let splicesPath = path + '.splices';\n  inst.notifyPath(splicesPath, { indexSplices: splices });\n  inst.notifyPath(path + '.length', array.length);\n  // Null here to allow potentially large splice records to be GC'ed.\n  inst.__data[splicesPath] = {indexSplices: null};\n}\n\n/**\n * Creates a splice record and sends an array splice notification for\n * the described mutation\n *\n * Note: this implementation only accepts normalized paths\n *\n * @param {!PropertyEffectsType} inst Instance to send notifications to\n * @param {Array} array The array the mutations occurred on\n * @param {string} path The path to the array that was mutated\n * @param {number} index Index at which the array mutation occurred\n * @param {number} addedCount Number of added items\n * @param {Array} removed Array of removed items\n * @private\n */\nfunction notifySplice(inst, array, path, index, addedCount, removed) {\n  notifySplices(inst, array, path, [{\n    index: index,\n    addedCount: addedCount,\n    removed: removed,\n    object: array,\n    type: 'splice'\n  }]);\n}\n\n/**\n * Returns an upper-cased version of the string.\n *\n * @param {string} name String to uppercase\n * @return {string} Uppercased string\n * @private\n */\nfunction upper(name) {\n  return name[0].toUpperCase() + name.substring(1);\n}\n\nexport const PropertyEffects = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @extends {superClass}\n   * @implements {Polymer_PropertyAccessors}\n   * @implements {Polymer_TemplateStamp}\n   * @unrestricted\n   */\n  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyEffects}\n   * @extends {propertyEffectsBase}\n   * @unrestricted\n   */\n  class PropertyEffects extends propertyEffectsBase {\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__dataClientsReady;\n      /** @type {Array} */\n      this.__dataPendingClients;\n      /** @type {Object} */\n      this.__dataToNotify;\n      /** @type {Object} */\n      this.__dataLinkedPaths;\n      /** @type {boolean} */\n      this.__dataHasPaths;\n      /** @type {Object} */\n      this.__dataCompoundStorage;\n      /** @type {Polymer_PropertyEffects} */\n      this.__dataHost;\n      /** @type {!Object} */\n      this.__dataTemp;\n      /** @type {boolean} */\n      this.__dataClientsInitialized;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {!Object} */\n      this.__dataPending;\n      /** @type {!Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__computeEffects;\n      /** @type {Object} */\n      this.__reflectEffects;\n      /** @type {Object} */\n      this.__notifyEffects;\n      /** @type {Object} */\n      this.__propagateEffects;\n      /** @type {Object} */\n      this.__observeEffects;\n      /** @type {Object} */\n      this.__readOnly;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {!TemplateInfo} */\n      this.__templateInfo;\n    }\n\n    get PROPERTY_EFFECT_TYPES() {\n      return TYPES;\n    }\n\n    _initializeProperties() {\n      super._initializeProperties();\n      hostStack.registerHost(this);\n      this.__dataClientsReady = false;\n      this.__dataPendingClients = null;\n      this.__dataToNotify = null;\n      this.__dataLinkedPaths = null;\n      this.__dataHasPaths = false;\n      // May be set on instance prior to upgrade\n      this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n      this.__dataHost = this.__dataHost || null;\n      this.__dataTemp = {};\n      this.__dataClientsInitialized = false;\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to provide a\n     * more efficient implementation of initializing properties from\n     * the prototype on the instance.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the prototype\n     */\n    _initializeProtoProperties(props) {\n      this.__data = Object.create(props);\n      this.__dataPending = Object.create(props);\n      this.__dataOld = {};\n    }\n\n    /**\n     * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n     * `_setProperty`'s `shouldNotify: true`.\n     *\n     * @override\n     * @param {Object} props Properties to initialize on the instance\n     */\n    _initializeInstanceProperties(props) {\n      let readOnly = this[TYPES.READ_ONLY];\n      for (let prop in props) {\n        if (!readOnly || !readOnly[prop]) {\n          this.__dataPending = this.__dataPending || {};\n          this.__dataOld = this.__dataOld || {};\n          this.__data[prop] = this.__dataPending[prop] = props[prop];\n        }\n      }\n    }\n\n    // Prototype setup ----------------------------------------\n\n    /**\n     * Equivalent to static `addPropertyEffect` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    _addPropertyEffect(property, type, effect) {\n      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n      // effects are accumulated into arrays per property based on type\n      let effects = ensureOwnEffectMap(this, type)[property];\n      if (!effects) {\n        effects = this[type][property] = [];\n      }\n      effects.push(effect);\n    }\n\n    /**\n     * Removes the given property effect.\n     *\n     * @param {string} property Property the effect was associated with\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object to remove\n     */\n    _removePropertyEffect(property, type, effect) {\n      let effects = ensureOwnEffectMap(this, type)[property];\n      let idx = effects.indexOf(effect);\n      if (idx >= 0) {\n        effects.splice(idx, 1);\n      }\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a property effect\n     * of a certain type.\n     *\n     * @param {string} property Property name\n     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasPropertyEffect(property, type) {\n      let effects = this[type];\n      return Boolean(effects && effects[property]);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"read only\"\n     * accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReadOnlyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"notify\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasNotifyEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.NOTIFY);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"reflect to attribute\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasReflectEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.REFLECT);\n    }\n\n    /**\n     * Returns whether the current prototype/instance has a \"computed\"\n     * property effect for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if the prototype/instance has an effect of this type\n     * @protected\n     */\n    _hasComputedEffect(property) {\n      return this._hasPropertyEffect(property, TYPES.COMPUTE);\n    }\n\n    // Runtime ----------------------------------------\n\n    /**\n     * Sets a pending property or path.  If the root property of the path in\n     * question had no accessor, the path is set, otherwise it is enqueued\n     * via `_setPendingProperty`.\n     *\n     * This function isolates relatively expensive functionality necessary\n     * for the public API (`set`, `setProperties`, `notifyPath`, and property\n     * change listeners via {{...}} bindings), such that it is only done\n     * when paths enter the system, and not at every propagation step.  It\n     * also sets a `__dataHasPaths` flag on the instance which is used to\n     * fast-path slower path-matching code in the property effects host paths.\n     *\n     * `path` can be a path string or array of path parts as accepted by the\n     * public API.\n     *\n     * @param {string | !Array<number|string>} path Path to set\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify Set to true if this change should\n     *  cause a property notification event dispatch\n     * @param {boolean=} isPathNotification If the path being set is a path\n     *   notification of an already changed value, as opposed to a request\n     *   to set and notify the change.  In the latter `false` case, a dirty\n     *   check is performed and then the value is set to the path before\n     *   enqueuing the pending property change.\n     * @return {boolean} Returns true if the property/path was enqueued in\n     *   the pending changes bag.\n     * @protected\n     */\n    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n      if (isPathNotification ||\n          root$0(Array.isArray(path) ? path[0] : path) !== path) {\n        // Dirty check changes being set to a path against the actual object,\n        // since this is the entry point for paths into the system; from here\n        // the only dirty checks are against the `__dataTemp` cache to prevent\n        // duplicate work in the same turn only. Note, if this was a notification\n        // of a change already set to a path (isPathNotification: true),\n        // we always let the change through and skip the `set` since it was\n        // already dirty checked at the point of entry and the underlying\n        // object has already been updated\n        if (!isPathNotification) {\n          let old = get$0(this, path);\n          path = /** @type {string} */ (set$0(this, path, value));\n          // Use property-accessor's simpler dirty check\n          if (!path || !super._shouldPropertyChange(path, value, old)) {\n            return false;\n          }\n        }\n        this.__dataHasPaths = true;\n        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n          computeLinkedPaths(this, path, value);\n          return true;\n        }\n      } else {\n        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n        } else {\n          this[path] = value;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Applies a value to a non-Polymer element/node's property.\n     *\n     * The implementation makes a best-effort at binding interop:\n     * Some native element properties have side-effects when\n     * re-setting the same value (e.g. setting `<input>.value` resets the\n     * cursor position), so we do a dirty-check before setting the value.\n     * However, for better interop with non-Polymer custom elements that\n     * accept objects, we explicitly re-set object changes coming from the\n     * Polymer world (which may include deep object changes without the\n     * top reference changing), erring on the side of providing more\n     * information.\n     *\n     * Users may override this method to provide alternate approaches.\n     *\n     * @param {Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @protected\n     */\n    _setUnmanagedPropertyToNode(node, prop, value) {\n      // It is a judgment call that resetting primitives is\n      // \"bad\" and resettings objects is also \"good\"; alternatively we could\n      // implement a whitelist of tag & property values that should never\n      // be reset (e.g. <input>.value && <select>.value)\n      if (value !== node[prop] || typeof value == 'object') {\n        node[prop] = value;\n      }\n    }\n\n    /**\n     * Overrides the `PropertyAccessors` implementation to introduce special\n     * dirty check logic depending on the property & value being set:\n     *\n     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n     * 2. Object set to simple property (e.g. 'prop': {...})\n     *    Stored in `__dataTemp` and `__data`, dirty checked against\n     *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n     * 3. Primitive value set to simple property (e.g. 'prop': 42)\n     *    Stored in `__data`, dirty checked against `__data`\n     *\n     * The dirty-check is important to prevent cycles due to two-way\n     * notification, but paths and objects are only dirty checked against any\n     * previous value set during this turn via a \"temporary cache\" that is\n     * cleared when the last `_propertiesChaged` exits. This is so:\n     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n     *    due to array mutations like shift/unshift/splice; this is fine\n     *    since path changes are dirty-checked at user entry points like `set`\n     * b. dirty-checking for objects only lasts one turn to allow the user\n     *    to mutate the object in-place and re-set it with the same identity\n     *    and have all sub-properties re-propagated in a subsequent turn.\n     *\n     * The temp cache is not necessarily sufficient to prevent invalid array\n     * paths, since a splice can happen during the same turn (with pathological\n     * user code); we could introduce a \"fixup\" for temporarily cached array\n     * paths if needed: https://github.com/Polymer/polymer/issues/4227\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @param {boolean=} shouldNotify True if property should fire notification\n     *   event (applies only for `notify: true` properties)\n     * @return {boolean} Returns true if the property changed\n     * @override\n     */\n    _setPendingProperty(property, value, shouldNotify) {\n      let isPath = this.__dataHasPaths && isPath$0(property);\n      let prevProps = isPath ? this.__dataTemp : this.__data;\n      if (this._shouldPropertyChange(property, value, prevProps[property])) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (!(property in this.__dataOld)) {\n          this.__dataOld[property] = this.__data[property];\n        }\n        // Paths are stored in temporary cache (cleared at end of turn),\n        // which is used for dirty-checking, all others stored in __data\n        if (isPath) {\n          this.__dataTemp[property] = value;\n        } else {\n          this.__data[property] = value;\n        }\n        // All changes go into pending property bag, passed to _propertiesChanged\n        this.__dataPending[property] = value;\n        // Track properties that should notify separately\n        if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n          this.__dataToNotify = this.__dataToNotify || {};\n          this.__dataToNotify[property] = shouldNotify;\n        }\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Overrides base implementation to ensure all accessors set `shouldNotify`\n     * to true, for per-property notification tracking.\n     *\n     * @override\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Overrides `PropertyAccessor`'s default async queuing of\n     * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n     * manually flushed), the function no-ops; otherwise flushes\n     * `_propertiesChanged` synchronously.\n     *\n     * @override\n     */\n    _invalidateProperties() {\n      if (this.__dataReady) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Enqueues the given client on a list of pending clients, whose\n     * pending property changes can later be flushed via a call to\n     * `_flushClients`.\n     *\n     * @param {Object} client PropertyEffects client to enqueue\n     * @protected\n     */\n    _enqueueClient(client) {\n      this.__dataPendingClients = this.__dataPendingClients || [];\n      if (client !== this) {\n        this.__dataPendingClients.push(client);\n      }\n    }\n\n    /**\n     * Flushes any clients previously enqueued via `_enqueueClient`, causing\n     * their `_flushProperties` method to run.\n     *\n     * @protected\n     */\n    _flushClients() {\n      if (!this.__dataClientsReady) {\n        this.__dataClientsReady = true;\n        this._readyClients();\n        // Override point where accessors are turned on; importantly,\n        // this is after clients have fully readied, providing a guarantee\n        // that any property effects occur only after all clients are ready.\n        this.__dataReady = true;\n      } else {\n        this.__enableOrFlushClients();\n      }\n    }\n\n    // NOTE: We ensure clients either enable or flush as appropriate. This\n    // handles two corner cases:\n    // (1) clients flush properly when connected/enabled before the host\n    // enables; e.g.\n    //   (a) Templatize stamps with no properties and does not flush and\n    //   (b) the instance is inserted into dom and\n    //   (c) then the instance flushes.\n    // (2) clients enable properly when not connected/enabled when the host\n    // flushes; e.g.\n    //   (a) a template is runtime stamped and not yet connected/enabled\n    //   (b) a host sets a property, causing stamped dom to flush\n    //   (c) the stamped dom enables.\n    __enableOrFlushClients() {\n      let clients = this.__dataPendingClients;\n      if (clients) {\n        this.__dataPendingClients = null;\n        for (let i=0; i < clients.length; i++) {\n          let client = clients[i];\n          if (!client.__dataEnabled) {\n            client._enableProperties();\n          } else if (client.__dataPending) {\n            client._flushProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Perform any initial setup on client dom. Called before the first\n     * `_flushProperties` call on client dom and before any element\n     * observers are called.\n     *\n     * @protected\n     */\n    _readyClients() {\n      this.__enableOrFlushClients();\n    }\n\n    /**\n     * Sets a bag of property changes to this instance, and\n     * synchronously processes all effects of the properties as a batch.\n     *\n     * Property names must be simple properties, not paths.  Batched\n     * path propagation is not supported.\n     *\n     * @param {Object} props Bag of one or more key-value pairs whose key is\n     *   a property and value is the new value to set for that property.\n     * @param {boolean=} setReadOnly When true, any private values set in\n     *   `props` will be set. By default, `setProperties` will not set\n     *   `readOnly: true` root properties.\n     * @public\n     */\n    setProperties(props, setReadOnly) {\n      for (let path in props) {\n        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n          //TODO(kschaaf): explicitly disallow paths in setProperty?\n          // wildcard observers currently only pass the first changed path\n          // in the `info` object, and you could do some odd things batching\n          // paths, e.g. {'foo.bar': {...}, 'foo': null}\n          this._setPendingPropertyOrPath(path, props[path], true);\n        }\n      }\n      this._invalidateProperties();\n    }\n\n    /**\n     * Overrides `PropertyAccessors` so that property accessor\n     * side effects are not enabled until after client dom is fully ready.\n     * Also calls `_flushClients` callback to ensure client dom is enabled\n     * that was not enabled as a result of flushing properties.\n     *\n     * @override\n     */\n    ready() {\n      // It is important that `super.ready()` is not called here as it\n      // immediately turns on accessors. Instead, we wait until `readyClients`\n      // to enable accessors to provide a guarantee that clients are ready\n      // before processing any accessors side effects.\n      this._flushProperties();\n      // If no data was pending, `_flushProperties` will not `flushClients`\n      // so ensure this is done.\n      if (!this.__dataClientsReady) {\n        this._flushClients();\n      }\n      // Before ready, client notifications do not trigger _flushProperties.\n      // Therefore a flush is necessary here if data has been set.\n      if (this.__dataPending) {\n        this._flushProperties();\n      }\n    }\n\n    /**\n     * Implements `PropertyAccessors`'s properties changed callback.\n     *\n     * Runs each class of effects for the batch of changed properties in\n     * a specific order (compute, propagate, reflect, observe, notify).\n     *\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      // ----------------------------\n      // let c = Object.getOwnPropertyNames(changedProps || {});\n      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n      // if (window.debug) { debugger; }\n      // ----------------------------\n      let hasPaths = this.__dataHasPaths;\n      this.__dataHasPaths = false;\n      // Compute properties\n      runComputedEffects(this, changedProps, oldProps, hasPaths);\n      // Clear notify properties prior to possible reentry (propagate, observe),\n      // but after computing effects have a chance to add to them\n      let notifyProps = this.__dataToNotify;\n      this.__dataToNotify = null;\n      // Propagate properties to clients\n      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n      // Flush clients\n      this._flushClients();\n      // Reflect properties\n      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n      // Observe properties\n      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n      // Notify properties to host\n      if (notifyProps) {\n        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n      }\n      // Clear temporary cache at end of turn\n      if (this.__dataCounter == 1) {\n        this.__dataTemp = {};\n      }\n      // ----------------------------\n      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n      // ----------------------------\n    }\n\n    /**\n     * Called to propagate any property changes to stamped template nodes\n     * managed by this element.\n     *\n     * @param {Object} changedProps Bag of changed properties\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @protected\n     */\n    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n      if (this[TYPES.PROPAGATE]) {\n        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n      }\n      let templateInfo = this.__templateInfo;\n      while (templateInfo) {\n        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n          hasPaths, templateInfo.nodeList);\n        templateInfo = templateInfo.nextTemplateInfo;\n      }\n    }\n\n    /**\n     * Aliases one data path as another, such that path notifications from one\n     * are routed to the other.\n     *\n     * @param {string | !Array<string|number>} to Target path to link.\n     * @param {string | !Array<string|number>} from Source path to link.\n     * @public\n     */\n    linkPaths(to, from) {\n      to = normalize(to);\n      from = normalize(from);\n      this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n      this.__dataLinkedPaths[to] = from;\n    }\n\n    /**\n     * Removes a data path alias previously established with `_linkPaths`.\n     *\n     * Note, the path to unlink should be the target (`to`) used when\n     * linking the paths.\n     *\n     * @param {string | !Array<string|number>} path Target path to unlink.\n     * @public\n     */\n    unlinkPaths(path) {\n      path = normalize(path);\n      if (this.__dataLinkedPaths) {\n        delete this.__dataLinkedPaths[path];\n      }\n    }\n\n    /**\n     * Notify that an array has changed.\n     *\n     * Example:\n     *\n     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n     *     ...\n     *     this.items.splice(1, 1, {name: 'Sam'});\n     *     this.items.push({name: 'Bob'});\n     *     this.notifySplices('items', [\n     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n     *     ]);\n     *\n     * @param {string} path Path that should be notified.\n     * @param {Array} splices Array of splice records indicating ordered\n     *   changes that occurred to the array. Each record should have the\n     *   following fields:\n     *    * index: index at which the change occurred\n     *    * removed: array of items that were removed from this index\n     *    * addedCount: number of new items added at this index\n     *    * object: a reference to the array in question\n     *    * type: the string literal 'splice'\n     *\n     *   Note that splice records _must_ be normalized such that they are\n     *   reported in index order (raw results from `Object.observe` are not\n     *   ordered and must be normalized/merged before notifying).\n     * @public\n    */\n    notifySplices(path, splices) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      notifySplices(this, array, info.path, splices);\n    }\n\n    /**\n     * Convenience method for reading a value from a path.\n     *\n     * Note, if any part in the path is undefined, this method returns\n     * `undefined` (this method does not throw when dereferencing undefined\n     * paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n     * @param {Object=} root Root object from which the path is evaluated.\n     * @return {*} Value at the path, or `undefined` if any part of the path\n     *   is undefined.\n     * @public\n     */\n    get(path, root) {\n      return get$0(root || this, path);\n    }\n\n    /**\n     * Convenience method for setting a value to a path and notifying any\n     * elements bound to the same path.\n     *\n     * Note, if any part in the path except for the last is undefined,\n     * this method does nothing (this method does not throw when\n     * dereferencing undefined paths).\n     *\n     * @param {(string|!Array<(string|number)>)} path Path to the value\n     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n     *   bracketed expressions are not supported; string-based path parts\n     *   *must* be separated by dots.  Note that when dereferencing array\n     *   indices, the index may be used as a dotted part directly\n     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n     * @param {*} value Value to set at the specified path.\n     * @param {Object=} root Root object from which the path is evaluated.\n     *   When specified, no notification will occur.\n     * @public\n    */\n    set(path, value, root) {\n      if (root) {\n        set$0(root, path, value);\n      } else {\n        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n          if (this._setPendingPropertyOrPath(path, value, true)) {\n            this._invalidateProperties();\n          }\n        }\n      }\n    }\n\n    /**\n     * Adds items onto the end of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to push onto array\n     * @return {number} New length of the array.\n     * @public\n     */\n    push(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array}*/(get$0(this, path, info));\n      let len = array.length;\n      let ret = array.push(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, len, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the end of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    pop(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.pop();\n      if (hadLength) {\n        notifySplice(this, array, info.path, array.length, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Starting from the start index specified, removes 0 or more items\n     * from the array and inserts 0 or more new items in their place.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.splice`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {number} start Index from which to start removing/inserting.\n     * @param {number} deleteCount Number of items to remove.\n     * @param {...*} items Items to insert into array.\n     * @return {Array} Array of removed items.\n     * @public\n     */\n    splice(path, start, deleteCount, ...items) {\n      let info = {path : ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      // Normalize fancy native splice handling of crazy start values\n      if (start < 0) {\n        start = array.length - Math.floor(-start);\n      } else {\n        start = Math.floor(start);\n      }\n      if (!start) {\n        start = 0;\n      }\n      let ret = array.splice(start, deleteCount, ...items);\n      if (items.length || ret.length) {\n        notifySplice(this, array, info.path, start, items.length, ret);\n      }\n      return ret;\n    }\n\n    /**\n     * Removes an item from the beginning of array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.pop`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @return {*} Item that was removed.\n     * @public\n     */\n    shift(path) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let hadLength = Boolean(array.length);\n      let ret = array.shift();\n      if (hadLength) {\n        notifySplice(this, array, info.path, 0, 0, [ret]);\n      }\n      return ret;\n    }\n\n    /**\n     * Adds items onto the beginning of the array at the path specified.\n     *\n     * The arguments after `path` and return value match that of\n     * `Array.prototype.push`.\n     *\n     * This method notifies other paths to the same array that a\n     * splice occurred to the array.\n     *\n     * @param {string | !Array<string|number>} path Path to array.\n     * @param {...*} items Items to insert info array\n     * @return {number} New length of the array.\n     * @public\n     */\n    unshift(path, ...items) {\n      let info = {path: ''};\n      let array = /** @type {Array} */(get$0(this, path, info));\n      let ret = array.unshift(...items);\n      if (items.length) {\n        notifySplice(this, array, info.path, 0, items.length, []);\n      }\n      return ret;\n    }\n\n    /**\n     * Notify that a path has changed.\n     *\n     * Example:\n     *\n     *     this.item.user.name = 'Bob';\n     *     this.notifyPath('item.user.name');\n     *\n     * @param {string} path Path that should be notified.\n     * @param {*=} value Value at the path (optional).\n     * @public\n    */\n    notifyPath(path, value) {\n      /** @type {string} */\n      let propPath;\n      if (arguments.length == 1) {\n        // Get value if not supplied\n        let info = {path: ''};\n        value = get$0(this, path, info);\n        propPath = info.path;\n      } else if (Array.isArray(path)) {\n        // Normalize path if needed\n        propPath = normalize(path);\n      } else {\n        propPath = /** @type{string} */(path);\n      }\n      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Equivalent to static `createReadOnlyProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    _createReadOnlyProperty(property, protectedSetter) {\n      this._addPropertyEffect(property, TYPES.READ_ONLY);\n      if (protectedSetter) {\n        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n          this._setProperty(property, value);\n        };\n      }\n    }\n\n    /**\n     * Equivalent to static `createPropertyObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    _createPropertyObserver(property, methodName, dynamicFn) {\n      let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n      this._addPropertyEffect(property, TYPES.OBSERVE, {\n        fn: runObserverEffect, info, trigger: {name: property}\n      });\n      if (dynamicFn) {\n        this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: methodName}\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createMethodObserver` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createMethodObserver(expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n    }\n\n    /**\n     * Equivalent to static `createNotifyingProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createNotifyingProperty(property) {\n      this._addPropertyEffect(property, TYPES.NOTIFY, {\n        fn: runNotifyEffect,\n        info: {\n          eventName: CaseMap.camelToDashCase(property) + '-changed',\n          property: property\n        }\n      });\n    }\n\n    /**\n     * Equivalent to static `createReflectedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    _createReflectedProperty(property) {\n      let attr = CaseMap.camelToDashCase(property);\n      if (attr[0] === '-') {\n        console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n          attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n      } else {\n        this._addPropertyEffect(property, TYPES.REFLECT, {\n          fn: runReflectEffect,\n          info: {\n            attrName: attr\n          }\n        });\n      }\n    }\n\n    /**\n     * Equivalent to static `createComputedProperty` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    _createComputedProperty(property, expression, dynamicFn) {\n      let sig = parseMethod(expression);\n      if (!sig) {\n        throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n      }\n      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n    }\n\n    // -- static class methods ------------\n\n    /**\n     * Ensures an accessor exists for the specified property, and adds\n     * to a list of \"property effects\" that will run when the accessor for\n     * the specified property is set.  Effects are grouped by \"type\", which\n     * roughly corresponds to a phase in effect processing.  The effect\n     * metadata should be in the following form:\n     *\n     *     {\n     *       fn: effectFunction, // Reference to function to call to perform effect\n     *       info: { ... }       // Effect metadata passed to function\n     *       trigger: {          // Optional triggering metadata; if not provided\n     *         name: string      // the property is treated as a wildcard\n     *         structured: boolean\n     *         wildcard: boolean\n     *       }\n     *     }\n     *\n     * Effects are called from `_propertiesChanged` in the following order by\n     * type:\n     *\n     * 1. COMPUTE\n     * 2. PROPAGATE\n     * 3. REFLECT\n     * 4. OBSERVE\n     * 5. NOTIFY\n     *\n     * Effect functions are called with the following signature:\n     *\n     *     effectFunction(inst, path, props, oldProps, info, hasPaths)\n     *\n     * @param {string} property Property that should trigger the effect\n     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static addPropertyEffect(property, type, effect) {\n      this.prototype._addPropertyEffect(property, type, effect);\n    }\n\n    /**\n     * Creates a single-property observer for the given property.\n     *\n     * @param {string} property Property name\n     * @param {string} methodName Name of observer method to call\n     * @param {boolean=} dynamicFn Whether the method name should be included as\n     *   a dependency to the effect.\n     * @protected\n     */\n    static createPropertyObserver(property, methodName, dynamicFn) {\n      this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n    }\n\n    /**\n     * Creates a multi-property \"method observer\" based on the provided\n     * expression, which should be a string in the form of a normal Javascript\n     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n     * should correspond to a property or path in the context of this\n     * prototype (or instance), or may be a literal string or number.\n     *\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n     *   whether method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createMethodObserver(expression, dynamicFn) {\n      this.prototype._createMethodObserver(expression, dynamicFn);\n    }\n\n    /**\n     * Causes the setter for the given property to dispatch `<property>-changed`\n     * events to notify of changes to the property.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createNotifyingProperty(property) {\n      this.prototype._createNotifyingProperty(property);\n    }\n\n    /**\n     * Creates a read-only accessor for the given property.\n     *\n     * To set the property, use the protected `_setProperty` API.\n     * To create a custom protected setter (e.g. `_setMyProp()` for\n     * property `myProp`), pass `true` for `protectedSetter`.\n     *\n     * Note, if the property will have other property effects, this method\n     * should be called first, before adding other effects.\n     *\n     * @param {string} property Property name\n     * @param {boolean=} protectedSetter Creates a custom protected setter\n     *   when `true`.\n     * @protected\n     */\n    static createReadOnlyProperty(property, protectedSetter) {\n      this.prototype._createReadOnlyProperty(property, protectedSetter);\n    }\n\n    /**\n     * Causes the setter for the given property to reflect the property value\n     * to a (dash-cased) attribute of the same name.\n     *\n     * @param {string} property Property name\n     * @protected\n     */\n    static createReflectedProperty(property) {\n      this.prototype._createReflectedProperty(property);\n    }\n\n    /**\n     * Creates a computed property whose value is set to the result of the\n     * method described by the given `expression` each time one or more\n     * arguments to the method changes.  The expression should be a string\n     * in the form of a normal Javascript function signature:\n     * `'methodName(arg1, [..., argn])'`\n     *\n     * @param {string} property Name of computed property to set\n     * @param {string} expression Method expression\n     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n     *   method names should be included as a dependency to the effect.\n     * @protected\n     */\n    static createComputedProperty(property, expression, dynamicFn) {\n      this.prototype._createComputedProperty(property, expression, dynamicFn);\n    }\n\n    /**\n     * Parses the provided template to ensure binding effects are created\n     * for them, and then ensures property accessors are created for any\n     * dependent properties in the template.  Binding effects for bound\n     * templates are stored in a linked list on the instance so that\n     * templates can be efficiently stamped and unstamped.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @return {Object} Template metadata object\n     * @protected\n     */\n    static bindTemplate(template) {\n      return this.prototype._bindTemplate(template);\n    }\n\n    // -- binding ----------------------------------------------\n\n    /**\n     * Equivalent to static `bindTemplate` API but can be called on\n     * an instance to add effects at runtime.  See that method for\n     * full API docs.\n     *\n     * This method may be called on the prototype (for prototypical template\n     * binding, to avoid creating accessors every instance) once per prototype,\n     * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n     * create and link an instance of the template metadata associated with a\n     * particular stamping.\n     *\n     * @param {HTMLTemplateElement} template Template containing binding\n     *   bindings\n     * @param {boolean=} instanceBinding When false (default), performs\n     *   \"prototypical\" binding of the template and overwrites any previously\n     *   bound template for the class. When true (as passed from\n     *   `_stampTemplate`), the template info is instanced and linked into\n     *   the list of bound templates.\n     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n     *   this is an instance of the prototypical template info\n     * @protected\n     */\n    _bindTemplate(template, instanceBinding) {\n      let templateInfo = this.constructor._parseTemplate(template);\n      let wasPreBound = this.__templateInfo == templateInfo;\n      // Optimization: since this is called twice for proto-bound templates,\n      // don't attempt to recreate accessors if this template was pre-bound\n      if (!wasPreBound) {\n        for (let prop in templateInfo.propertyEffects) {\n          this._createPropertyAccessor(prop);\n        }\n      }\n      if (instanceBinding) {\n        // For instance-time binding, create instance of template metadata\n        // and link into list of templates if necessary\n        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n        templateInfo.wasPreBound = wasPreBound;\n        if (!wasPreBound && this.__templateInfo) {\n          let last = this.__templateInfoLast || this.__templateInfo;\n          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n          templateInfo.previousTemplateInfo = last;\n          return templateInfo;\n        }\n      }\n      return this.__templateInfo = templateInfo;\n    }\n\n    /**\n     * Adds a property effect to the given template metadata, which is run\n     * at the \"propagate\" stage of `_propertiesChanged` when the template\n     * has been bound to the element via `_bindTemplate`.\n     *\n     * The `effect` object should match the format in `_addPropertyEffect`.\n     *\n     * @param {Object} templateInfo Template metadata to add effect to\n     * @param {string} prop Property that should trigger the effect\n     * @param {Object=} effect Effect metadata object\n     * @protected\n     */\n    static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n      hostProps[prop] = true;\n      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n      let propEffects = effects[prop] = effects[prop] || [];\n      propEffects.push(effect);\n    }\n\n    /**\n     * Stamps the provided template and performs instance-time setup for\n     * Polymer template features, including data bindings, declarative event\n     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n     * is returned containing the stamped DOM, ready for insertion into the\n     * DOM.\n     *\n     * This method may be called more than once; however note that due to\n     * `shadycss` polyfill limitations, only styles from templates prepared\n     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n     * to the shadow root and support CSS custom properties), and note that\n     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n     * any styles required by in runtime-stamped templates must be included\n     * in the main element template.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     * @override\n     * @protected\n     */\n    _stampTemplate(template) {\n      // Ensures that created dom is `_enqueueClient`'d to this element so\n      // that it can be flushed on next call to `_flushProperties`\n      hostStack.beginHosting(this);\n      let dom = super._stampTemplate(template);\n      hostStack.endHosting(this);\n      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n      // Add template-instance-specific data to instanced templateInfo\n      templateInfo.nodeList = dom.nodeList;\n      // Capture child nodes to allow unstamping of non-prototypical templates\n      if (!templateInfo.wasPreBound) {\n        let nodes = templateInfo.childNodes = [];\n        for (let n=dom.firstChild; n; n=n.nextSibling) {\n          nodes.push(n);\n        }\n      }\n      dom.templateInfo = templateInfo;\n      // Setup compound storage, 2-way listeners, and dataHost for bindings\n      setupBindings(this, templateInfo);\n      // Flush properties into template nodes if already booted\n      if (this.__dataReady) {\n        runEffects(this, templateInfo.propertyEffects, this.__data, null,\n          false, templateInfo.nodeList);\n      }\n      return dom;\n    }\n\n    /**\n     * Removes and unbinds the nodes previously contained in the provided\n     * DocumentFragment returned from `_stampTemplate`.\n     *\n     * @param {!StampedTemplate} dom DocumentFragment previously returned\n     *   from `_stampTemplate` associated with the nodes to be removed\n     * @protected\n     */\n    _removeBoundDom(dom) {\n      // Unlink template info\n      let templateInfo = dom.templateInfo;\n      if (templateInfo.previousTemplateInfo) {\n        templateInfo.previousTemplateInfo.nextTemplateInfo =\n          templateInfo.nextTemplateInfo;\n      }\n      if (templateInfo.nextTemplateInfo) {\n        templateInfo.nextTemplateInfo.previousTemplateInfo =\n          templateInfo.previousTemplateInfo;\n      }\n      if (this.__templateInfoLast == templateInfo) {\n        this.__templateInfoLast = templateInfo.previousTemplateInfo;\n      }\n      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n      // Remove stamped nodes\n      let nodes = templateInfo.childNodes;\n      for (let i=0; i<nodes.length; i++) {\n        let node = nodes[i];\n        node.parentNode.removeChild(node);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n      if (node.nodeType === Node.TEXT_NODE) {\n        let parts = this._parseBindings(node.textContent, templateInfo);\n        if (parts) {\n          // Initialize the textContent with any literal parts\n          // NOTE: default to a space here so the textNode remains; some browsers\n          // (IE) evacipate an empty textNode following cloneNode/importNode.\n          node.textContent = literalFromParts(parts) || ' ';\n          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n          noted = true;\n        }\n      }\n      return noted;\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * parsing bindings from attributes.  A `bindings`\n     * array is added to `nodeInfo` and populated with binding metadata\n     * with information capturing the binding target, and a `parts` array\n     * with one or more metadata objects capturing the source(s) of the\n     * binding.\n     *\n     * @override\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      let parts = this._parseBindings(value, templateInfo);\n      if (parts) {\n        // Attribute or property\n        let origName = name;\n        let kind = 'property';\n        if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        let literal = literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        if (kind === 'property') {\n          name = dashToCamelCase(name);\n        }\n        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n        return true;\n      } else {\n        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n      }\n    }\n\n    /**\n     * Overrides default `TemplateStamp` implementation to add support for\n     * binding the properties that a nested template depends on to the template\n     * as `_host_<property>`.\n     *\n     * @override\n     * @param {Node} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template node\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     * @protected\n     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n     */\n    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n      // Merge host props into outer template and add bindings\n      let hostProps = nodeInfo.templateInfo.hostProps;\n      let mode = '{';\n      for (let source in hostProps) {\n        let parts = [{ mode, source, dependencies: [source] }];\n        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n      }\n      return noted;\n    }\n\n    /**\n     * Called to parse text in a template (either attribute values or\n     * textContent) into binding metadata.\n     *\n     * Any overrides of this method should return an array of binding part\n     * metadata  representing one or more bindings found in the provided text\n     * and any \"literal\" text in between.  Any non-literal parts will be passed\n     * to `_evaluateBinding` when any dependencies change.  The only required\n     * fields of each \"part\" in the returned array are as follows:\n     *\n     * - `dependencies` - Array containing trigger metadata for each property\n     *   that should trigger the binding to update\n     * - `literal` - String containing text if the part represents a literal;\n     *   in this case no `dependencies` are needed\n     *\n     * Additional metadata for use by `_evaluateBinding` may be provided in\n     * each part object as needed.\n     *\n     * The default implementation handles the following types of bindings\n     * (one or more may be intermixed with literal strings):\n     * - Property binding: `[[prop]]`\n     * - Path binding: `[[object.prop]]`\n     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n     * - Two-way property or path bindings (supports negation):\n     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n     * - Inline computed method (supports negation):\n     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n     *\n     * @param {string} text Text to parse from attribute or textContent\n     * @param {Object} templateInfo Current template metadata\n     * @return {Array<!BindingPart>} Array of binding part metadata\n     * @protected\n     */\n    static _parseBindings(text, templateInfo) {\n      let parts = [];\n      let lastIndex = 0;\n      let m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = bindingRegex.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        let mode = m[1][0];\n        let negate = Boolean(m[2]);\n        let source = m[3].trim();\n        let customEvent = false, notifyEvent = '', colon = -1;\n        if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n          notifyEvent = source.substring(colon + 2);\n          source = source.substring(0, colon);\n          customEvent = true;\n        }\n        let signature = parseMethod(source);\n        let dependencies = [];\n        if (signature) {\n          // Inline computed function\n          let {args, methodName} = signature;\n          for (let i=0; i<args.length; i++) {\n            let arg = args[i];\n            if (!arg.literal) {\n              dependencies.push(arg);\n            }\n          }\n          let dynamicFns = templateInfo.dynamicFns;\n          if (dynamicFns && dynamicFns[methodName] || signature.static) {\n            dependencies.push(methodName);\n            signature.dynamicFn = true;\n          }\n        } else {\n          // Property or path\n          dependencies.push(source);\n        }\n        parts.push({\n          source, mode, negate, customEvent, signature, dependencies,\n          event: notifyEvent\n        });\n        lastIndex = bindingRegex.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        let literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      } else {\n        return null;\n      }\n    }\n\n    /**\n     * Called to evaluate a previously parsed binding part based on a set of\n     * one or more changed dependencies.\n     *\n     * @param {this} inst Element that should be used as scope for\n     *   binding dependencies\n     * @param {BindingPart} part Binding part metadata\n     * @param {string} path Property/path that triggered this effect\n     * @param {Object} props Bag of current property changes\n     * @param {Object} oldProps Bag of previous values for changed properties\n     * @param {boolean} hasPaths True with `props` contains one or more paths\n     * @return {*} Value the binding part evaluated to\n     * @protected\n     */\n    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n      let value;\n      if (part.signature) {\n        value = runMethodEffect(inst, path, props, oldProps, part.signature);\n      } else if (path != part.source) {\n        value = get$0(inst, part.source);\n      } else {\n        if (hasPaths && isPath$0(path)) {\n          value = get$0(inst, path);\n        } else {\n          value = inst.__data[path];\n        }\n      }\n      if (part.negate) {\n        value = !value;\n      }\n      return value;\n    }\n\n  }\n\n  // make a typing for closure :P\n  PropertyEffectsType = PropertyEffects;\n\n  return PropertyEffects;\n});\n\n/**\n * Helper api for enqueing client dom created by a host element.\n *\n * By default elements are flushed via `_flushProperties` when\n * `connectedCallback` is called. Elements attach their client dom to\n * themselves at `ready` time which results from this first flush.\n * This provides an ordering guarantee that the client dom an element\n * creates is flushed before the element itself (i.e. client `ready`\n * fires before host `ready`).\n *\n * However, if `_flushProperties` is called *before* an element is connected,\n * as for example `Templatize` does, this ordering guarantee cannot be\n * satisfied because no elements are connected. (Note: Bound elements that\n * receive data do become enqueued clients and are properly ordered but\n * unbound elements are not.)\n *\n * To maintain the desired \"client before host\" ordering guarantee for this\n * case we rely on the \"host stack. Client nodes registers themselves with\n * the creating host element when created. This ensures that all client dom\n * is readied in the proper order, maintaining the desired guarantee.\n *\n * @private\n */\nlet hostStack = {\n\n  stack: [],\n\n  /**\n   * @param {*} inst Instance to add to hostStack\n   * @this {hostStack}\n   */\n  registerHost(inst) {\n    if (this.stack.length) {\n      let host = this.stack[this.stack.length-1];\n      host._enqueueClient(inst);\n    }\n  },\n\n  /**\n   * @param {*} inst Instance to begin hosting\n   * @this {hostStack}\n   */\n  beginHosting(inst) {\n    this.stack.push(inst);\n  },\n\n  /**\n   * @param {*} inst Instance to end hosting\n   * @this {hostStack}\n   */\n  endHosting(inst) {\n    let stackLen = this.stack.length;\n    if (stackLen && this.stack[stackLen-1] == inst) {\n      this.stack.pop();\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/property-effects.js","import './boot.js';\n\nexport function isPath(path) {\n  return path.indexOf('.') >= 0;\n}\n\nexport function root(path) {\n  let dotIndex = path.indexOf('.');\n  if (dotIndex === -1) {\n    return path;\n  }\n  return path.slice(0, dotIndex);\n}\n\nexport function isAncestor(base, path) {\n  //     base.startsWith(path + '.');\n  return base.indexOf(path + '.') === 0;\n}\n\nexport function isDescendant(base, path) {\n  //     path.startsWith(base + '.');\n  return path.indexOf(base + '.') === 0;\n}\n\nexport function translate(base, newBase, path) {\n  return newBase + path.slice(base.length);\n}\n\nexport function matches(base, path) {\n  return (base === path) ||\n         isAncestor(base, path) ||\n         isDescendant(base, path);\n}\n\nexport function normalize(path) {\n  if (Array.isArray(path)) {\n    let parts = [];\n    for (let i=0; i<path.length; i++) {\n      let args = path[i].toString().split('.');\n      for (let j=0; j<args.length; j++) {\n        parts.push(args[j]);\n      }\n    }\n    return parts.join('.');\n  } else {\n    return path;\n  }\n}\n\nexport function split(path) {\n  if (Array.isArray(path)) {\n    return normalize(path).split('.');\n  }\n  return path.toString().split('.');\n}\n\nexport function get(root, path, info) {\n  let prop = root;\n  let parts = split(path);\n  // Loop over path parts[0..n-1] and dereference\n  for (let i=0; i<parts.length; i++) {\n    if (!prop) {\n      return;\n    }\n    let part = parts[i];\n    prop = prop[part];\n  }\n  if (info) {\n    info.path = parts.join('.');\n  }\n  return prop;\n}\n\nexport function set(root, path, value) {\n  let prop = root;\n  let parts = split(path);\n  let last = parts[parts.length-1];\n  if (parts.length > 1) {\n    // Loop over path parts[0..n-2] and dereference\n    for (let i=0; i<parts.length-1; i++) {\n      let part = parts[i];\n      prop = prop[part];\n      if (!prop) {\n        return;\n      }\n    }\n    // Set value to object at end of path\n    prop[last] = value;\n  } else {\n    // Simple property set\n    prop[path] = value;\n  }\n  return parts.join('.');\n}\n\nexport const isDeep = isPath;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/path.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport * as caseMap$0 from '../utils/case-map.js';\nimport { microTask } from '../utils/async.js';\n\nlet caseMap = caseMap$0;\n\nlet microtask = microTask;\n\n// Save map of native properties; this forms a blacklist or properties\n// that won't have their values \"saved\" by `saveAccessorValue`, since\n// reading from an HTMLElement accessor from the context of a prototype throws\nconst nativeProperties = {};\nlet proto = HTMLElement.prototype;\nwhile (proto) {\n  let props = Object.getOwnPropertyNames(proto);\n  for (let i=0; i<props.length; i++) {\n    nativeProperties[props[i]] = true;\n  }\n  proto = Object.getPrototypeOf(proto);\n}\n\n/**\n * Used to save the value of a property that will be overridden with\n * an accessor. If the `model` is a prototype, the values will be saved\n * in `__dataProto`, and it's up to the user (or downstream mixin) to\n * decide how/when to set these values back into the accessors.\n * If `model` is already an instance (it has a `__data` property), then\n * the value will be set as a pending property, meaning the user should\n * call `_invalidateProperties` or `_flushProperties` to take effect\n *\n * @param {Object} model Prototype or instance\n * @param {string} property Name of property\n * @private\n */\nfunction saveAccessorValue(model, property) {\n  // Don't read/store value for any native properties since they could throw\n  if (!nativeProperties[property]) {\n    let value = model[property];\n    if (value !== undefined) {\n      if (model.__data) {\n        // Adding accessor to instance; update the property\n        // It is the user's responsibility to call _flushProperties\n        model._setPendingProperty(property, value);\n      } else {\n        // Adding accessor to proto; save proto's value for instance-time use\n        if (!model.__dataProto) {\n          model.__dataProto = {};\n        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n          model.__dataProto = Object.create(model.__dataProto);\n        }\n        model.__dataProto[property] = value;\n      }\n    }\n  }\n}\n\nexport const PropertyAccessors = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_PropertyAccessors}\n   * @extends HTMLElement\n   * @unrestricted\n   */\n  class PropertyAccessors extends superClass {\n\n    /**\n     * Generates property accessors for all attributes in the standard\n     * static `observedAttributes` array.\n     *\n     * Attribute names are mapped to property names using the `dash-case` to\n     * `camelCase` convention\n     *\n     */\n    static createPropertiesForAttributes() {\n      let a$ = this.observedAttributes;\n      for (let i=0; i < a$.length; i++) {\n        this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n      }\n    }\n\n    constructor() {\n      super();\n      /** @type {boolean} */\n      this.__serializing;\n      /** @type {number} */\n      this.__dataCounter;\n      /** @type {boolean} */\n      this.__dataEnabled;\n      /** @type {boolean} */\n      this.__dataReady;\n      /** @type {boolean} */\n      this.__dataInvalid;\n      /** @type {!Object} */\n      this.__data;\n      /** @type {Object} */\n      this.__dataPending;\n      /** @type {Object} */\n      this.__dataOld;\n      /** @type {Object} */\n      this.__dataProto;\n      /** @type {Object} */\n      this.__dataHasAccessor;\n      /** @type {Object} */\n      this.__dataInstanceProps;\n      this._initializeProperties();\n    }\n\n    /**\n     * Implements native Custom Elements `attributeChangedCallback` to\n     * set an attribute value to a property via `_attributeToProperty`.\n     *\n     * @param {string} name Name of attribute that changed\n     * @param {?string} old Old attribute value\n     * @param {?string} value New attribute value\n     */\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this._attributeToProperty(name, value);\n      }\n    }\n\n    /**\n     * Initializes the local storage for property accessors.\n     *\n     * Provided as an override point for performing any setup work prior\n     * to initializing the property accessor system.\n     *\n     * @protected\n     */\n    _initializeProperties() {\n      this.__serializing = false;\n      this.__dataCounter = 0;\n      this.__dataEnabled = false;\n      this.__dataReady = false;\n      this.__dataInvalid = false;\n      this.__data = {};\n      this.__dataPending = null;\n      this.__dataOld = null;\n      if (this.__dataProto) {\n        this._initializeProtoProperties(this.__dataProto);\n        this.__dataProto = null;\n      }\n      // Capture instance properties; these will be set into accessors\n      // during first flush. Don't set them here, since we want\n      // these to overwrite defaults/constructor assignments\n      for (let p in this.__dataHasAccessor) {\n        if (this.hasOwnProperty(p)) {\n          this.__dataInstanceProps = this.__dataInstanceProps || {};\n          this.__dataInstanceProps[p] = this[p];\n          delete this[p];\n        }\n      }\n    }\n\n    /**\n     * Called at instance time with bag of properties that were overwritten\n     * by accessors on the prototype when accessors were created.\n     *\n     * The default implementation sets these properties back into the\n     * setter at instance time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeProtoProperties(props) {\n      for (let p in props) {\n        this._setProperty(p, props[p]);\n      }\n    }\n\n    /**\n     * Called at ready time with bag of instance properties that overwrote\n     * accessors when the element upgraded.\n     *\n     * The default implementation sets these properties back into the\n     * setter at ready time.  This method is provided as an override\n     * point for customizing or providing more efficient initialization.\n     *\n     * @param {Object} props Bag of property values that were overwritten\n     *   when creating property accessors.\n     * @protected\n     */\n    _initializeInstanceProperties(props) {\n      Object.assign(this, props);\n    }\n\n    /**\n     * Ensures the element has the given attribute. If it does not,\n     * assigns the given value to the attribute.\n     *\n     *\n     * @param {string} attribute Name of attribute to ensure is set.\n     * @param {string} value of the attribute.\n     */\n    _ensureAttribute(attribute, value) {\n      if (!this.hasAttribute(attribute)) {\n        this._valueToNodeAttribute(this, value, attribute);\n      }\n    }\n\n    /**\n     * Deserializes an attribute to its associated property.\n     *\n     * This method calls the `_deserializeValue` method to convert the string to\n     * a typed value.\n     *\n     * @param {string} attribute Name of attribute to deserialize.\n     * @param {?string} value of the attribute.\n     * @param {*=} type type to deserialize to.\n     */\n    _attributeToProperty(attribute, value, type) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this.__serializing) {\n        let property = caseMap.dashToCamelCase(attribute);\n        this[property] = this._deserializeValue(value, type);\n      }\n    }\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * @param {string} property Property name to reflect.\n     * @param {string=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    _propertyToAttribute(property, attribute, value) {\n      this.__serializing = true;\n      value = (arguments.length < 3) ? this[property] : value;\n      this._valueToNodeAttribute(this, value,\n        attribute || caseMap.camelToDashCase(property));\n      this.__serializing = false;\n    }\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `_serializeValue` method to convert the typed\n     * value to a string.  If the `_serializeValue` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @param {Element} node Element to set attribute to.\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     */\n    _valueToNodeAttribute(node, value, attribute) {\n      let str = this._serializeValue(value);\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    }\n\n    /**\n     * Converts a typed JavaScript value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @param {*} value Property value to serialize.\n     * @return {string | undefined} String serialized from the provided property value.\n     */\n    _serializeValue(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value.toString() : undefined;\n      }\n    }\n\n    /**\n     * Converts a string to a typed JavaScript value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @param {?string} value Attribute value to deserialize.\n     * @param {*=} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    _deserializeValue(value, type) {\n      /**\n       * @type {*}\n       */\n      let outValue;\n      switch (type) {\n        case Number:\n          outValue = Number(value);\n          break;\n\n        case Boolean:\n          outValue = (value !== null);\n          break;\n\n        case Object:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            outValue = JSON.parse(/** @type string */(value));\n          } catch(x) {\n            outValue = null;\n            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n          }\n          break;\n\n        case Date:\n          outValue = new Date(value);\n          break;\n\n        case String:\n        default:\n          outValue = value;\n          break;\n      }\n\n      return outValue;\n    }\n    /* eslint-enable no-fallthrough */\n\n    /**\n     * Creates a setter/getter pair for the named property with its own\n     * local storage.  The getter returns the value in the local storage,\n     * and the setter calls `_setProperty`, which updates the local storage\n     * for the property and enqueues a `_propertiesChanged` callback.\n     *\n     * This method may be called on a prototype or an instance.  Calling\n     * this method may overwrite a property value that already exists on\n     * the prototype/instance by creating the accessor.  When calling on\n     * a prototype, any overwritten values are saved in `__dataProto`,\n     * and it is up to the subclasser to decide how/when to set those\n     * properties back into the accessor.  When calling on an instance,\n     * the overwritten value is set via `_setPendingProperty`, and the\n     * user should call `_invalidateProperties` or `_flushProperties`\n     * for the values to take effect.\n     *\n     * @param {string} property Name of the property\n     * @param {boolean=} readOnly When true, no setter is created; the\n     *   protected `_setProperty` function must be used to set the property\n     * @protected\n     */\n    _createPropertyAccessor(property, readOnly) {\n      if (!this.hasOwnProperty('__dataHasAccessor')) {\n        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n      }\n      if (!this.__dataHasAccessor[property]) {\n        this.__dataHasAccessor[property] = true;\n        saveAccessorValue(this, property);\n        Object.defineProperty(this, property, {\n          /* eslint-disable valid-jsdoc */\n          /** @this {PropertyAccessors} */\n          get: function() {\n            return this.__data[property];\n          },\n          /** @this {PropertyAccessors} */\n          set: readOnly ? function() {} : function(value) {\n            this._setProperty(property, value);\n          }\n          /* eslint-enable */\n        });\n      }\n    }\n\n    /**\n     * Returns true if this library created an accessor for the given property.\n     *\n     * @param {string} property Property name\n     * @return {boolean} True if an accessor was created\n     */\n    _hasAccessor(property) {\n      return this.__dataHasAccessor && this.__dataHasAccessor[property];\n    }\n\n    /**\n     * Updates the local storage for a property (via `_setPendingProperty`)\n     * and enqueues a `_proeprtiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @protected\n     */\n    _setProperty(property, value) {\n      if (this._setPendingProperty(property, value)) {\n        this._invalidateProperties();\n      }\n    }\n\n    /**\n     * Updates the local storage for a property, records the previous value,\n     * and adds it to the set of \"pending changes\" that will be passed to the\n     * `_propertiesChanged` callback.  This method does not enqueue the\n     * `_propertiesChanged` callback.\n     *\n     * @param {string} property Name of the property\n     * @param {*} value Value to set\n     * @return {boolean} Returns true if the property changed\n     * @protected\n     */\n    _setPendingProperty(property, value) {\n      let old = this.__data[property];\n      let changed = this._shouldPropertyChange(property, value, old);\n      if (changed) {\n        if (!this.__dataPending) {\n          this.__dataPending = {};\n          this.__dataOld = {};\n        }\n        // Ensure old is captured from the last turn\n        if (this.__dataOld && !(property in this.__dataOld)) {\n          this.__dataOld[property] = old;\n        }\n        this.__data[property] = value;\n        this.__dataPending[property] = value;\n      }\n      return changed;\n    }\n\n    /**\n     * Returns true if the specified property has a pending change.\n     *\n     * @param {string} prop Property name\n     * @return {boolean} True if property has a pending change\n     * @protected\n     */\n    _isPropertyPending(prop) {\n      return Boolean(this.__dataPending && (prop in this.__dataPending));\n    }\n\n    /**\n     * Marks the properties as invalid, and enqueues an async\n     * `_propertiesChanged` callback.\n     *\n     * @protected\n     */\n    _invalidateProperties() {\n      if (!this.__dataInvalid && this.__dataReady) {\n        this.__dataInvalid = true;\n        microtask.run(() => {\n          if (this.__dataInvalid) {\n            this.__dataInvalid = false;\n            this._flushProperties();\n          }\n        });\n      }\n    }\n\n    /**\n     * Call to enable property accessor processing. Before this method is\n     * called accessor values will be set but side effects are\n     * queued. When called, any pending side effects occur immediately.\n     * For elements, generally `connectedCallback` is a normal spot to do so.\n     * It is safe to call this method multiple times as it only turns on\n     * property accessors once.\n     */\n    _enableProperties() {\n      if (!this.__dataEnabled) {\n        this.__dataEnabled = true;\n        if (this.__dataInstanceProps) {\n          this._initializeInstanceProperties(this.__dataInstanceProps);\n          this.__dataInstanceProps = null;\n        }\n        this.ready();\n      }\n    }\n\n    /**\n     * Calls the `_propertiesChanged` callback with the current set of\n     * pending changes (and old values recorded when pending changes were\n     * set), and resets the pending set of changes. Generally, this method\n     * should not be called in user code.\n     *\n     *\n     * @protected\n     */\n    _flushProperties() {\n      if (this.__dataPending && this.__dataOld) {\n        let changedProps = this.__dataPending;\n        this.__dataPending = null;\n        this.__dataCounter++;\n        this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n        this.__dataCounter--;\n      }\n    }\n\n    /**\n     * Lifecycle callback called the first time properties are being flushed.\n     * Prior to `ready`, all property sets through accessors are queued and\n     * their effects are flushed after this method returns.\n     *\n     * Users may override this function to implement behavior that is\n     * dependent on the element having its properties initialized, e.g.\n     * from defaults (initialized from `constructor`, `_initializeProperties`),\n     * `attributeChangedCallback`, or values propagated from host e.g. via\n     * bindings.  `super.ready()` must be called to ensure the data system\n     * becomes enabled.\n     *\n     * @public\n     */\n    ready() {\n      this.__dataReady = true;\n      // Run normal flush\n      this._flushProperties();\n    }\n\n    /**\n     * Callback called when any properties with accessors created via\n     * `_createPropertyAccessor` have been set.\n     *\n     * @param {!Object} currentProps Bag of all current accessor values\n     * @param {!Object} changedProps Bag of properties changed since the last\n     *   call to `_propertiesChanged`\n     * @param {!Object} oldProps Bag of previous values for each property\n     *   in `changedProps`\n     * @protected\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n    }\n\n    /**\n     * Method called to determine whether a property value should be\n     * considered as a change and cause the `_propertiesChanged` callback\n     * to be enqueued.\n     *\n     * The default implementation returns `true` for primitive types if a\n     * strict equality check fails, and returns `true` for all Object/Arrays.\n     * The method always returns false for `NaN`.\n     *\n     * Override this method to e.g. provide stricter checking for\n     * Objects/Arrays when using immutable patterns.\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     *   and enqueue a `_proeprtiesChanged` callback\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return (\n        // Strict equality check\n        (old !== value &&\n         // This ensures (old==NaN, value==NaN) always returns false\n         (old === old || value === value))\n      );\n    }\n\n  }\n\n  return PropertyAccessors;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/property-accessors.js","import './boot.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncInterface; // eslint-disable-line no-unused-vars\n\n// Microtask implemented using Mutation Observer\nlet microtaskCurrHandle = 0;\nlet microtaskLastHandle = 0;\nlet microtaskCallbacks = [];\nlet microtaskNodeContent = 0;\nlet microtaskNode = document.createTextNode('');\nnew window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\nfunction microtaskFlush() {\n  const len = microtaskCallbacks.length;\n  for (let i = 0; i < len; i++) {\n    let cb = microtaskCallbacks[i];\n    if (cb) {\n      try {\n        cb();\n      } catch (e) {\n        setTimeout(() => { throw e; });\n      }\n    }\n  }\n  microtaskCallbacks.splice(0, len);\n  microtaskLastHandle += len;\n}\n\nexport const timeOut = {\n  /**\n   * Returns a sub-module with the async interface providing the provided\n   * delay.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} delay Time to wait before calling callbacks in ms\n   * @return {AsyncInterface} An async timeout interface\n   */\n  after(delay) {\n    return  {\n      run(fn) { return setTimeout(fn, delay); },\n      cancel: window.clearTimeout.bind(window)\n    };\n  },\n  /**\n   * Enqueues a function called in the next task.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.setTimeout.bind(window),\n  /**\n   * Cancels a previously enqueued `timeOut` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.clearTimeout.bind(window)\n};\n\nexport const animationFrame = {\n  /**\n   * Enqueues a function called at `requestAnimationFrame` timing.\n   *\n   * @memberof Polymer.Async.animationFrame\n   * @param {Function} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run: window.requestAnimationFrame.bind(window),\n  /**\n   * Cancels a previously enqueued `animationFrame` callback.\n   *\n   * @memberof Polymer.Async.timeOut\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel: window.cancelAnimationFrame.bind(window)\n};\n\nexport const idlePeriod = {\n  /**\n   * Enqueues a function called at `requestIdleCallback` timing.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {function(IdleDeadline)} fn Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(fn) {\n    return window.requestIdleCallback ?\n      window.requestIdleCallback(fn) :\n      window.setTimeout(fn, 16);\n  },\n  /**\n   * Cancels a previously enqueued `idlePeriod` callback.\n   *\n   * @memberof Polymer.Async.idlePeriod\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    window.cancelIdleCallback ?\n      window.cancelIdleCallback(handle) :\n      window.clearTimeout(handle);\n  }\n};\n\nexport const microTask = {\n\n  /**\n   * Enqueues a function called at microtask timing.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {Function} callback Callback to run\n   * @return {number} Handle used for canceling task\n   */\n  run(callback) {\n    microtaskNode.textContent = microtaskNodeContent++;\n    microtaskCallbacks.push(callback);\n    return microtaskCurrHandle++;\n  },\n\n  /**\n   * Cancels a previously enqueued `microTask` callback.\n   *\n   * @memberof Polymer.Async.microTask\n   * @param {number} handle Handle returned from `run` of callback to cancel\n   */\n  cancel(handle) {\n    const idx = handle - microtaskLastHandle;\n    if (idx >= 0) {\n      if (!microtaskCallbacks[idx]) {\n        throw new Error('invalid async handle: ' + handle);\n      }\n      microtaskCallbacks[idx] = null;\n    }\n  }\n\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/async.js","import '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\n\n// 1.x backwards-compatible auto-wrapper for template type extensions\n// This is a clear layering violation and gives favored-nation status to\n// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n// a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n// b.) to maintain if/repeat capability in parser-constrained elements\n//     (e.g. table, select) in lieu of native CE type extensions without\n//     massive new invention in this space (e.g. directive system)\nconst templateExtensions = {\n  'dom-if': true,\n  'dom-repeat': true\n};\nfunction wrapTemplateExtension(node) {\n  let is = node.getAttribute('is');\n  if (is && templateExtensions[is]) {\n    let t = node;\n    t.removeAttribute('is');\n    node = t.ownerDocument.createElement(is);\n    t.parentNode.replaceChild(node, t);\n    node.appendChild(t);\n    while(t.attributes.length) {\n      node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n      t.removeAttribute(t.attributes[0].name);\n    }\n  }\n  return node;\n}\n\nfunction findTemplateNode(root, nodeInfo) {\n  // recursively ascend tree until we hit root\n  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n  // unwind the stack, returning the indexed node at each level\n  if (parent) {\n    // note: marginally faster than indexing via childNodes\n    // (http://jsperf.com/childnodes-lookup)\n    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n      if (nodeInfo.parentIndex === i++) {\n        return n;\n      }\n    }\n  } else {\n    return root;\n  }\n}\n\n// construct `$` map (from id annotations)\nfunction applyIdToMap(inst, map, node, nodeInfo) {\n  if (nodeInfo.id) {\n    map[nodeInfo.id] = node;\n  }\n}\n\n// install event listeners (from event annotations)\nfunction applyEventListener(inst, node, nodeInfo) {\n  if (nodeInfo.events && nodeInfo.events.length) {\n    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n    }\n  }\n}\n\n// push configuration references at configure time\nfunction applyTemplateContent(inst, node, nodeInfo) {\n  if (nodeInfo.templateInfo) {\n    node._templateInfo = nodeInfo.templateInfo;\n  }\n}\n\nfunction createNodeEventHandler(context, eventName, methodName) {\n  // Instances can optionally have a _methodHost which allows redirecting where\n  // to find methods. Currently used by `templatize`.\n  context = context._methodHost || context;\n  let handler = function(e) {\n    if (context[methodName]) {\n      context[methodName](e, e.detail);\n    } else {\n      console.warn('listener method `' + methodName + '` not defined');\n    }\n  };\n  return handler;\n}\n\nexport const TemplateStamp = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_TemplateStamp}\n   */\n  class TemplateStamp extends superClass {\n\n    /**\n     * Scans a template to produce template metadata.\n     *\n     * Template-specific metadata are stored in the object returned, and node-\n     * specific metadata are stored in objects in its flattened `nodeInfoList`\n     * array.  Only nodes in the template that were parsed as nodes of\n     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n     * contains an `index` (`childNodes` index in parent) and optionally\n     * `parent`, which points to node info of its parent (including its index).\n     *\n     * The template metadata object returned from this method has the following\n     * structure (many fields optional):\n     *\n     * ```js\n     *   {\n     *     // Flattened list of node metadata (for nodes that generated metadata)\n     *     nodeInfoList: [\n     *       {\n     *         // `id` attribute for any nodes with id's for generating `$` map\n     *         id: {string},\n     *         // `on-event=\"handler\"` metadata\n     *         events: [\n     *           {\n     *             name: {string},   // event name\n     *             value: {string},  // handler method name\n     *           }, ...\n     *         ],\n     *         // Notes when the template contained a `<slot>` for shady DOM\n     *         // optimization purposes\n     *         hasInsertionPoint: {boolean},\n     *         // For nested `<template>`` nodes, nested template metadata\n     *         templateInfo: {object}, // nested template metadata\n     *         // Metadata to allow efficient retrieval of instanced node\n     *         // corresponding to this metadata\n     *         parentInfo: {number},   // reference to parent nodeInfo>\n     *         parentIndex: {number},  // index in parent's `childNodes` collection\n     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n     *       },\n     *       ...\n     *     ],\n     *     // When true, the template had the `strip-whitespace` attribute\n     *     // or was nested in a template with that setting\n     *     stripWhitespace: {boolean},\n     *     // For nested templates, nested template content is moved into\n     *     // a document fragment stored here; this is an optimization to\n     *     // avoid the cost of nested template cloning\n     *     content: {DocumentFragment}\n     *   }\n     * ```\n     *\n     * This method kicks off a recursive treewalk as follows:\n     *\n     * ```\n     *    _parseTemplate <---------------------+\n     *      _parseTemplateContent              |\n     *        _parseTemplateNode  <------------|--+\n     *          _parseTemplateNestedTemplate --+  |\n     *          _parseTemplateChildNodes ---------+\n     *          _parseTemplateNodeAttributes\n     *            _parseTemplateNodeAttribute\n     *\n     * ```\n     *\n     * These methods may be overridden to add custom metadata about templates\n     * to either `templateInfo` or `nodeInfo`.\n     *\n     * Note that this method may be destructive to the template, in that\n     * e.g. event annotations may be removed after being noted in the\n     * template metadata.\n     *\n     * @param {!HTMLTemplateElement} template Template to parse\n     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n     *   template, for parsing nested templates\n     * @return {!TemplateInfo} Parsed template metadata\n     */\n    static _parseTemplate(template, outerTemplateInfo) {\n      // since a template may be re-used, memo-ize metadata\n      if (!template._templateInfo) {\n        let templateInfo = template._templateInfo = {};\n        templateInfo.nodeInfoList = [];\n        templateInfo.stripWhiteSpace =\n          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n          template.hasAttribute('strip-whitespace');\n        this._parseTemplateContent(template, templateInfo, {parent: null});\n      }\n      return template._templateInfo;\n    }\n\n    static _parseTemplateContent(template, templateInfo, nodeInfo) {\n      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n    }\n\n    /**\n     * Parses template node and adds template and node metadata based on\n     * the current node, and its `childNodes` and `attributes`.\n     *\n     * This method may be overridden to add custom node or template specific\n     * metadata based on this node.\n     *\n     * @param {Node} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNode(node, templateInfo, nodeInfo) {\n      let noted;\n      let element = /** @type Element */(node);\n      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n      } else if (element.localName === 'slot') {\n        // For ShadyDom optimization, indicating there is an insertion point\n        templateInfo.hasInsertionPoint = true;\n      }\n      if (element.firstChild) {\n        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n      }\n      if (element.hasAttributes && element.hasAttributes()) {\n        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses template child nodes for the given root node.\n     *\n     * This method also wraps whitelisted legacy template extensions\n     * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n     * wrappers, collapses text nodes, and strips whitespace from the template\n     * if the `templateInfo.stripWhitespace` setting was provided.\n     *\n     * @param {Node} root Root node whose `childNodes` will be parsed\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     */\n    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n        // Wrap templates\n        if (node.localName == 'template') {\n          node = wrapTemplateExtension(node);\n        }\n        // collapse adjacent textNodes: fixes an IE issue that can cause\n        // text nodes to be inexplicably split =(\n        // note that root.normalize() should work but does not so we do this\n        // manually.\n        next = node.nextSibling;\n        if (node.nodeType === Node.TEXT_NODE) {\n          let /** Node */ n = next;\n          while (n && (n.nodeType === Node.TEXT_NODE)) {\n            node.textContent += n.textContent;\n            next = n.nextSibling;\n            root.removeChild(n);\n            n = next;\n          }\n          // optionally strip whitespace\n          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n            root.removeChild(node);\n            continue;\n          }\n        }\n        let childInfo = { parentIndex, parentInfo: nodeInfo };\n        if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n        }\n        // Increment if not removed\n        if (node.parentNode) {\n          parentIndex++;\n        }\n      }\n    }\n\n    /**\n     * Parses template content for the given nested `<template>`.\n     *\n     * Nested template info is stored as `templateInfo` in the current node's\n     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n     * It will then be the responsibility of the host to set it back to the\n     * template and for users stamping nested templates to use the\n     * `_contentForTemplate` method to retrieve the content for this template\n     * (an optimization to avoid the cost of cloning nested template content).\n     *\n     * @param {HTMLTemplateElement} node Node to parse (a <template>)\n     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n     *   that includes the template `node`\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n      let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n      let content = templateInfo.content =\n        node.content.ownerDocument.createDocumentFragment();\n      content.appendChild(node.content);\n      nodeInfo.templateInfo = templateInfo;\n      return true;\n    }\n\n    /**\n     * Parses template node attributes and adds node metadata to `nodeInfo`\n     * for nodes of interest.\n     *\n     * @param {Element} node Node to parse\n     * @param {TemplateInfo} templateInfo Template metadata for current template\n     * @param {NodeInfo} nodeInfo Node metadata for current template.\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      let noted = false;\n      let attrs = Array.from(node.attributes);\n      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n      }\n      return noted;\n    }\n\n    /**\n     * Parses a single template node attribute and adds node metadata to\n     * `nodeInfo` for attributes of interest.\n     *\n     * This implementation adds metadata for `on-event=\"handler\"` attributes\n     * and `id` attributes.\n     *\n     * @param {Element} node Node to parse\n     * @param {!TemplateInfo} templateInfo Template metadata for current template\n     * @param {!NodeInfo} nodeInfo Node metadata for current template.\n     * @param {string} name Attribute name\n     * @param {string} value Attribute value\n     * @return {boolean} `true` if the visited node added node-specific\n     *   metadata to `nodeInfo`\n     */\n    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n      // events (on-*)\n      if (name.slice(0, 3) === 'on-') {\n        node.removeAttribute(name);\n        nodeInfo.events = nodeInfo.events || [];\n        nodeInfo.events.push({\n          name: name.slice(3),\n          value\n        });\n        return true;\n      }\n      // static id\n      else if (name === 'id') {\n        nodeInfo.id = value;\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns the `content` document fragment for a given template.\n     *\n     * For nested templates, Polymer performs an optimization to cache nested\n     * template content to avoid the cost of cloning deeply nested templates.\n     * This method retrieves the cached content for a given template.\n     *\n     * @param {HTMLTemplateElement} template Template to retrieve `content` for\n     * @return {DocumentFragment} Content fragment\n     */\n    static _contentForTemplate(template) {\n      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n      return (templateInfo && templateInfo.content) || template.content;\n    }\n\n    /**\n     * Clones the provided template content and returns a document fragment\n     * containing the cloned dom.\n     *\n     * The template is parsed (once and memoized) using this library's\n     * template parsing features, and provides the following value-added\n     * features:\n     * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n     * * Generates an \"id map\" for all nodes with id's under `$` on returned\n     *   document fragment\n     * * Passes template info including `content` back to templates as\n     *   `_templateInfo` (a performance optimization to avoid deep template\n     *   cloning)\n     *\n     * Note that the memoized template parsing process is destructive to the\n     * template: attributes for bindings and declarative event listeners are\n     * removed after being noted in notes, and any nested `<template>.content`\n     * is removed and stored in notes as well.\n     *\n     * @param {!HTMLTemplateElement} template Template to stamp\n     * @return {!StampedTemplate} Cloned template content\n     */\n    _stampTemplate(template) {\n      // Polyfill support: bootstrap the template if it has not already been\n      if (template && !template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(template);\n      }\n      let templateInfo = this.constructor._parseTemplate(template);\n      let nodeInfo = templateInfo.nodeInfoList;\n      let content = templateInfo.content || template.content;\n      let dom = /** @type DocumentFragment */ (document.importNode(content, true));\n      // NOTE: ShadyDom optimization indicating there is an insertion point\n      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n      let nodes = dom.nodeList = new Array(nodeInfo.length);\n      dom.$ = {};\n      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n        let node = nodes[i] = findTemplateNode(dom, info);\n        applyIdToMap(this, dom.$, node, info);\n        applyTemplateContent(this, node, info);\n        applyEventListener(this, node, info);\n      }\n      return /** @type {!StampedTemplate} */(dom);\n    }\n\n    /**\n     * Adds an event listener by method name for the event provided.\n     *\n     * This method generates a handler function that looks up the method\n     * name at handling time.\n     *\n     * @param {Node} node Node to add listener on\n     * @param {string} eventName Name of event\n     * @param {string} methodName Name of method\n     * @param {*=} context Context the method will be called on (defaults\n     *   to `node`)\n     * @return {Function} Generated handler function\n     */\n    _addMethodEventListenerToNode(node, eventName, methodName, context) {\n      context = context || node;\n      let handler = createNodeEventHandler(context, eventName, methodName);\n      this._addEventListenerToNode(node, eventName, handler);\n      return handler;\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to add\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @param {Node} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {Function} handler Listener function to remove\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n\n  }\n\n  return TemplateStamp;\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/template-stamp.js","'use strict';\n\nimport DATA from './../clubs.json';\n\nexport default {\n  key: {\n    type: String,\n    value: \"AIzaSyD6Ltm32QJIxRFDSdWyQ6--2Y_j0YxEwlg\"\n  },\n  map: {\n    type: Object,\n    value: {\n      lat: 45.4737012,\n      long: 9.1908025\n    }\n  },\n  daysOpts: {\n    type: Array,\n    value: [\n      {label: 'Lunedì'},\n      {label: 'Martedì'},\n      {label: 'Mercoledì'},\n      {label: 'Giovedì'},\n      {label: 'Venerdì'}\n    ]\n  },\n  query: {\n    type: String,\n    value: ''\n  },\n  data: {\n    type: Array,\n    value: DATA || []\n  },\n  filtered: {\n    type: Array,\n    value: []\n  },\n  markers: {\n    type: Array,\n    value: []\n  },\n  days: {\n    type: Array,\n    value: []\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/fh-clubs/props.js","module.exports = \"\\n<style>\\n\\n</style>\\n\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"column\\\">\\n      <label for=\\\"query\\\">[[_computeText(data)]]</label>\\n      <input type=\\\"text\\\" name=\\\"query\\\" value=\\\"[[query]]\\\"\\n      on-keyup=\\\"_updateQuery\\\"\\n      placeholder=\\\"Milano, Pavia, ...\\\">\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row\\\">\\n    <div class=\\\"column\\\">\\n      <google-map api-key=\\\"[[key]]\\\" latitude=\\\"[[map.lat]]\\\" longitude=\\\"[[map.long]]\\\"\\n      fit-to-markers disable-zoom max-zoom=\\\"16\\\" min-zoom=\\\"10\\\" single-info-window>\\n        <template is=\\\"dom-repeat\\\" items=\\\"[[markers]]\\\">\\n          <google-map-marker\\n            latitude=\\\"[[item.latitude]]\\\"\\n            longitude=\\\"[[item.longitude]]\\\"\\n            title=\\\"[[item.name]]\\\"\\n            animation=\\\"DROP\\\"\\n            on-google-map-marker-click=\\\"_selectMarker\\\"\\n            click-events data-name$=\\\"[[item.name]]\\\"\\n          ></google-map-marker>\\n        </template>\\n      </google-map>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"row days\\\">\\n    <div class=\\\"column column-33\\\">\\n      <p>Giorni di allenamento:</p>\\n    </div>\\n    <div class=\\\"column\\\">\\n      <template is=\\\"dom-repeat\\\" items=\\\"[[daysOpts]]\\\">\\n        <button\\n          data-index$=\\\"[[index]]\\\"\\n          on-tap=\\\"_selectDays\\\"\\n          class$=\\\"[[_computeSelectedDay(item.selected)]]\\\">\\n            [[item.label]]\\n        </button>\\n      </template>\\n    </div>\\n  </div>\\n\\n\\n  <div class=\\\"row row-wrap cards\\\">\\n    <template is=\\\"dom-repeat\\\" items=\\\"[[filtered]]\\\">\\n    <div class=\\\"column column-25\\\">\\n      <article class=\\\"card\\\">\\n        <header class=\\\"card__thumb\\\">\\n          <img src=\\\"[[item.logo]]\\\">\\n        </header>\\n        <!-- <div class=\\\"card__date\\\">\\n          <span class=\\\"card__date__day\\\">12</span>\\n          <span class=\\\"card__date__month\\\">Mai</span>\\n        </div> -->\\n        <div class=\\\"card__body\\\">\\n          <!-- <div class=\\\"card__category\\\">\\n            <a href=\\\"#\\\">Engineering</a>\\n          </div> -->\\n          <h2 class=\\\"card__title\\\">\\n            <a href=\\\"[[item.url]]\\\" target=\\\"_blank\\\">[[item.name]]</a>\\n          </h2>\\n          <p><small>[[item.city]]</small></p>\\n          <!--<div class=\\\"card__subtitle\\\">A Head In The Polls </div>\\n            <p class=\\\"card__description\\\">\\n              With a warning label this big, you know they gotta be fun! This is the worst part. The calm before the battle. No! The cat shelter's on to me. Yes, I saw. You were doing well, until everyone died. Daylight and everything.\\n          </p> -->\\n          <p></p>\\n        </div>\\n      </article>\\n    </div>\\n    </template>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/fh-clubs/template.html\n// module id = 18\n// module chunks = 0","module.exports = [{\"name\":\"Tang Lang\",\"city\":\"Pieve Emanuele (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Tang-Lan-Chuan.png\",\"days\":[{\"day\":1,\"latitude\":45.35068,\"longitude\":9.20059},{\"day\":3,\"latitude\":45.35068,\"longitude\":9.20059}],\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/pieve-emanuele-milano-sud\"},{\"name\":\"Yĩng Bũ Zhàng Chì\",\"city\":\"Lacchiarella (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Yuin-Bu-Zhang-Chi.png\",\"days\":[{\"day\":2,\"latitude\":45.323792,\"longitude\":9.140073},{\"day\":4,\"latitude\":45.31967,\"longitude\":9.138918}],\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-lacchiarella-milano\"},{\"name\":\"Mat Troi Dang Len\",\"city\":\"Milano (Famagosta)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Mat-Troi-Dan-Len.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/corso-milano-famagosta\",\"days\":[{\"day\":0,\"latitude\":45.432146,\"longitude\":9.157363},{\"day\":2,\"latitude\":45.432146,\"longitude\":9.157363}]},{\"name\":\"Long Ho\",\"city\":\"Landriano (Pavia)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Long-Ho.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/kung-fu-landriano-pavia\",\"days\":[{\"day\":0,\"latitude\":45.312194,\"longitude\":9.259746},{\"day\":3,\"latitude\":45.312194,\"longitude\":9.259746}]},{\"name\":\"Da Cam Thach\",\"city\":\"Pero (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Da-Cam-Thach.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-pero\",\"days\":[{\"day\":1,\"latitude\":45.509753,\"longitude\":9.089593},{\"day\":3,\"latitude\":45.509753,\"longitude\":9.089593}]},{\"name\":\"Da Cam Thach\",\"city\":\"Pessano con Bornago (Milano) \",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Da-Cam-Thach.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-pero\",\"days\":[{\"day\":0,\"latitude\":45.551348,\"longitude\":9.386223},{\"day\":2,\"latitude\":45.545882,\"longitude\":9.389233}]},{\"name\":\"Pa Chi Chuan\",\"city\":\"Zenone Al Lambro (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/PACHICHUAN_Logo.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-zenone-al-lambro\",\"days\":[{\"day\":1,\"latitude\":45.326934,\"longitude\":9.357902},{\"day\":4,\"latitude\":45.326934,\"longitude\":9.357902}]},{\"name\":\"Nghich ma cuoc\",\"city\":\"Torrevecchia Pia (Pavia)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/logo-Nghich-ma-cuoc.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-torrevecchia-pia\",\"days\":[{\"day\":2,\"latitude\":45.283727,\"longitude\":9.298005},{\"day\":4,\"latitude\":45.283727,\"longitude\":9.298005}]},{\"name\":\"Yun Chi\",\"city\":\"Rozzano (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/logo-Yun-Chi-Rozzano.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/corso-rozzano\",\"days\":[{\"day\":0,\"latitude\":45.378776,\"longitude\":9.154653},{\"day\":2,\"latitude\":45.378776,\"longitude\":9.154653}]},{\"name\":\"Ho Trao\",\"city\":\"San Giuliano Milanese (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Ho-Trao.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-san-giuliano-milanese\",\"days\":[{\"day\":0,\"latitude\":45.395334,\"longitude\":9.288501},{\"day\":3,\"latitude\":45.395334,\"longitude\":9.288501}]},{\"name\":\"Shoen\",\"city\":\"Senago (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Shoen.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/corso-senago\",\"days\":[{\"day\":0,\"latitude\":45.574262,\"longitude\":9.118499},{\"day\":3,\"latitude\":45.574262,\"longitude\":9.118499}]},{\"name\":\"Dai Long Trao\",\"city\":\"Corsico (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/logo-Dai-Long-Trao-Corsico.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-corsico\",\"days\":[{\"day\":1,\"latitude\":45.441871,\"longitude\":9.111886},{\"day\":3,\"latitude\":45.441871,\"longitude\":9.111886}]},{\"name\":\"Qian Gong\",\"city\":\"Ceranova (Pavia)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Qian-Gong.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/corso-ceranova-pavia\",\"days\":[{\"day\":1,\"latitude\":45.257298,\"longitude\":9.237621},{\"day\":3,\"latitude\":45.257298,\"longitude\":9.237621}]},{\"name\":\"Shì Hòu\",\"city\":\"Vidigulfo (Pavia)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Shi-Hou.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-vidigulfo-pavia\",\"days\":[{\"day\":1,\"latitude\":45.2931523,\"longitude\":9.2355102},{\"day\":3,\"latitude\":45.2931523,\"longitude\":9.2355102}]},{\"name\":\"Bac Ho\",\"city\":\"Marcignago (Pavia)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Bac-Ho_Tosoni.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-marcignago-pavia\",\"days\":[{\"day\":0,\"latitude\":45.25845,\"longitude\":9.075061},{\"day\":2,\"latitude\":45.25845,\"longitude\":9.075061}]},{\"name\":\"Xuan Long\",\"city\":\"Buccinasco/Assago (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Xuang-Long.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-buccinasco-milano\",\"days\":[{\"day\":0,\"latitude\":45.403395,\"longitude\":9.136541},{\"day\":3,\"latitude\":45.403395,\"longitude\":9.136541}]},{\"name\":\"Pan Jua Shi\",\"city\":\"Gorla Minore (Varese)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/Xuang-Long.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-gorla-minore-va\",\"days\":[{\"day\":0,\"latitude\":45.70708,\"longitude\":8.877291},{\"day\":2,\"latitude\":45.70708,\"longitude\":8.877291}]},{\"name\":\"Sho Ying\",\"city\":\"Cesano Boscone (Milano)\",\"logo\":\"http://www.fenghuang.org/images/loghi-club/logo-Sho-Ying.png\",\"url\":\"http://www.fenghuang.org/kung-fu-milano-pavia/palestra-cesano-boscone\",\"days\":[{\"day\":0,\"latitude\":45.445651,\"longitude\":9.090596},{\"day\":3,\"latitude\":45.445651,\"longitude\":9.090596}]}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/clubs.json\n// module id = 19\n// module chunks = 0","import { dedupingMixin } from '../utils/mixin.js';\n\n// Common implementation for mixin & behavior\nfunction mutablePropertyChange(inst, property, value, old, mutableData) {\n  let isObject;\n  if (mutableData) {\n    isObject = (typeof value === 'object' && value !== null);\n    // Pull `old` for Objects from temp cache, but treat `null` as a primitive\n    if (isObject) {\n      old = inst.__dataTemp[property];\n    }\n  }\n  // Strict equality check, but return false for NaN===NaN\n  let shouldChange = (old !== value && (old === old || value === value));\n  // Objects are stored in temporary cache (cleared at end of\n  // turn), which is used for dirty-checking\n  if (isObject && shouldChange) {\n    inst.__dataTemp[property] = value;\n  }\n  return shouldChange;\n}\n\nexport const MutableData = dedupingMixin(superClass => {\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_MutableData}\n   */\n  class MutableData extends superClass {\n    /**\n     * Overrides `Polymer.PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * This method pulls the value to dirty check against from the `__dataTemp`\n     * cache (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, true);\n    }\n\n  }\n  /** @type {boolean} */\n  MutableData.prototype.mutableData = false;\n\n  return MutableData;\n\n});\n\nexport const OptionalMutableData = dedupingMixin(superClass => {\n\n  /**\n   * @mixinClass\n   * @polymer\n   * @implements {Polymer_OptionalMutableData}\n   */\n  class OptionalMutableData extends superClass {\n\n    static get properties() {\n      return {\n        /**\n         * Instance-level flag for configuring the dirty-checking strategy\n         * for this element.  When true, Objects and Arrays will skip dirty\n         * checking, otherwise strict equality checking will be used.\n         */\n        mutableData: Boolean\n      };\n    }\n\n    /**\n     * Overrides `Polymer.PropertyEffects` to provide option for skipping\n     * strict equality checking for Objects and Arrays.\n     *\n     * When `this.mutableData` is true on this instance, this method\n     * pulls the value to dirty check against from the `__dataTemp` cache\n     * (rather than the normal `__data` cache) for Objects.  Since the temp\n     * cache is cleared at the end of a turn, this implementation allows\n     * side-effects of deep object changes to be processed by re-setting the\n     * same object (using the temp cache as an in-turn backstop to prevent\n     * cycles due to 2-way notification).\n     *\n     * @param {string} property Property name\n     * @param {*} value New property value\n     * @param {*} old Previous property value\n     * @return {boolean} Whether the property should be considered a change\n     * @protected\n     */\n    _shouldPropertyChange(property, value, old) {\n      return mutablePropertyChange(this, property, value, old, this.mutableData);\n    }\n  }\n\n  return OptionalMutableData;\n\n});\n\n// Export for use by legacy behavior\nMutableData._mutablePropertyChange = mutablePropertyChange;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/mixins/mutable-data.js","import { Element } from '../../polymer-element.js';\nimport { TemplateInstanceBase as TemplateInstanceBase$0, Templatize } from '../utils/templatize.js';\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\n\nlet TemplateInstanceBase = TemplateInstanceBase$0; // eslint-disable-line\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {Polymer.Element}\n */\nconst domRepeatBase = OptionalMutableData(Element);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <template is=\"dom-repeat\" items=\"{{employees}}\">\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *     </template>\n *\n *   </template>\n *\n *   <script>\n *     Polymer({\n *       is: 'employee-list',\n *       ready: function() {\n *         this.employees = [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *         ];\n *       }\n *     });\n *   < /script>\n *\n * </dom-module>\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on `Polymer.Base` (`push`, `pop`, `splice`, `shift`,\n * `unshift`), and template instances will be kept in sync with the data in the\n * array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model is an instance of Polymer.Base, and should\n * be used to manipulate data on the instance, for example\n * `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer: function(item) {\n *     return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <template is=\"dom-repeat\" items=\"{{employees}}\"\n *           filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @memberof Polymer\n * @extends {domRepeatBase}\n * @appliesMixin Polymer.OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nclass DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffing of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: true,\n        readOnly: true\n      },\n\n      /**\n       * Defines an initial count of template instances to render after setting\n       * the `items` array, before the next paint, and puts the `dom-repeat`\n       * into \"chunking mode\".  The remaining items will be created and rendered\n       * incrementally at each animation frame therof until all instances have\n       * been rendered.\n       */\n      initialCount: {\n        type: Number,\n        observer: '__initializeChunking'\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate to\n       * target by throttling the number of instances rendered each frame to\n       * not exceed the budget for the target frame rate.  Setting this to a\n       * higher number will allow lower latency and higher throughput for\n       * things like event handlers, but will result in a longer time for the\n       * remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__limit = Infinity;\n    this.__pool = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__lastChunkTime = null;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let parent = this.parentNode;\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, parent);\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      let template = this.template = this.querySelector('template');\n      if (!template) {\n        // // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = Templatize.templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {this}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {this}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, 'items.' + idx, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __sortChanged(sort) {\n    let methodHost = this.__getMethodHost();\n    this.__sortFn = sort && (typeof sort == 'function' ? sort :\n      function() { return methodHost[sort].apply(methodHost, arguments); });\n    if (this.items) {\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __filterChanged(filter) {\n    let methodHost = this.__getMethodHost();\n    this.__filterFn = filter && (typeof filter == 'function' ? filter :\n      function() { return methodHost[filter].apply(methodHost, arguments); });\n    if (this.items) {\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __initializeChunking() {\n    if (this.initialCount) {\n      this.__limit = this.initialCount;\n      this.__chunkCount = this.initialCount;\n      this.__lastChunkTime = performance.now();\n    }\n  }\n\n  __tryRenderChunk() {\n    // Debounced so that multiple calls through `_render` between animation\n    // frames only queue one new rAF (e.g. array mutation & chunked render)\n    if (this.items && this.__limit < this.items.length) {\n      this.__debounceRender(this.__requestRenderChunk);\n    }\n  }\n\n  __requestRenderChunk() {\n    requestAnimationFrame(()=>this.__renderChunk());\n  }\n\n  __renderChunk() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio\n    // of target/actual frame time\n    let currChunkTime = performance.now();\n    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);\n    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    this.__limit += this.__chunkCount;\n    this.__lastChunkTime = currChunkTime;\n    this.__debounceRender(this.__render);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (retuns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a full refresh\n      this.__initializeChunking();\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  __handleObservedPaths(path) {\n    if (this.__observePaths) {\n      path = path.substring(path.indexOf('.') + 1);\n      let paths = this.__observePaths;\n      for (let i=0; i<paths.length; i++) {\n        if (path.indexOf(paths[i]) === 0) {\n          this.__debounceRender(this.__render, this.delay);\n          return true;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    this.__applyFullRefresh();\n    // Reset the pool\n    // TODO(kschaaf): Reuse pool across turns and nested templates\n    // Now that objects/arrays are re-evaluated when set, we can safely\n    // reuse pooled instances across turns, however we still need to decide\n    // semantics regarding how long to hold, how many to hold, etc.\n    this.__pool.length = 0;\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n    // Check to see if we need to render more items\n    this.__tryRenderChunk();\n  }\n\n  __applyFullRefresh() {\n    let items = this.items || [];\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx = 0;\n    // Generate instances and assign items\n    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);\n    for (; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst && instIdx < this.__limit) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      inst.root.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    let inst = this.__detachInstance(idx);\n    if (inst) {\n      this.__pool.push(inst);\n    }\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    let inst = this.__pool.pop();\n    if (inst) {\n      // TODO(kschaaf): If the pool is shared across turns, hostProps\n      // need to be re-set to reused instances in addition to item\n      inst._setPendingProperty(this.as, item);\n      inst._setPendingProperty(this.indexAs, instIdx);\n      inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n      inst._flushProperties();\n    } else {\n      inst = this.__stampInstance(item, instIdx, itemIdx);\n    }\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    this.parentNode.insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {HTMLElement} el Element for which to return the index.\n   * @return {*} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model is an instance of `Polymer.Base`, and\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return Templatize.modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n\nexport { DomRepeat };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/elements/dom-repeat.js","import './boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n// Base class for TemplateInstance's\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n */\nconst base = PropertyEffects(class {});\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin Polymer.PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends base {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = this.children = [];\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (props) {\n      for (let iprop in options.instanceProps) {\n        if (iprop in props) {\n          this._setPendingProperty(iprop, props[iprop]);\n        }\n      }\n    }\n    for (let hprop in this.__hostProps) {\n      this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n  /**\n   * @override\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @protected\n   */\n  _showHideChildren(hide) {\n    let c = this.children;\n    for (let i=0; i<c.length; i++) {\n      let n = c[i];\n      // Ignore non-changes\n      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n        if (n.nodeType === Node.TEXT_NODE) {\n          if (hide) {\n            n.__polymerTextContent__ = n.textContent;\n            n.textContent = '';\n          } else {\n            n.textContent = n.__polymerTextContent__;\n          }\n        } else if (n.style) {\n          if (hide) {\n            n.__polymerDisplay__ = n.style.display;\n            n.style.display = 'none';\n          } else {\n            n.style.display = n.__polymerDisplay__;\n          }\n        }\n      }\n      n.__hideTemplateChildren__ = hide;\n      if (n._showHideChildren) {\n        n._showHideChildren(hide);\n      }\n    }\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n */\nconst MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  // Anonymous class created by the templatize\n  let base = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n  /**\n   * @constructor\n   * @extends {base}\n   */\n  let klass = class extends base { };\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(template, templateInfo, options) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp) {\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      let base = options.mutableData ? MutableDataTemplate : DataTemplate;\n      klass = templateInfo.templatizeTemplateClass =\n        class TemplatizedTemplate extends base {};\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n    }\n    upgradeTemplate(template, klass);\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (template.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(template.__data, template.__dataProto);\n    }\n    // Clear any pending data for performance\n    template.__dataTemp = {};\n    template.__dataPending = null;\n    template.__dataOld = null;\n    template._enableProperties();\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Polymer.Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customze property forwarding and event model decoration\n *     let TemplateClass = Polymer.Templatize.templatize(template, this, {\n *       parentModel: true,\n *       instanceProps: {...},\n *       forwardHostProp(property, value) {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n *\n * @namespace\n * @memberof Polymer\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nconst Templatize = {\n\n  /**\n   * Returns an anonymous `Polymer.PropertyEffects` class bound to the\n   * `<template>` provided.  Instancing the class will result in the\n   * template being stamped into document fragment stored as the instance's\n   * `root` property, after which it can be appended to the DOM.\n   *\n   * Templates may utilize all Polymer data-binding features as well as\n   * declarative event listeners.  Event listeners and inline computing\n   * functions in the template will be called on the host of the template.\n   *\n   * The constructor returned takes a single argument dictionary of initial\n   * property values to propagate into template bindings.  Additionally\n   * host properties can be forwarded in, and instance properties can be\n   * notified out by providing optional callbacks in the `options` dictionary.\n   *\n   * Valid configuration in `options` are as follows:\n   *\n   * - `forwardHostProp(property, value)`: Called when a property referenced\n   *   in the template changed on the template's host. As this library does\n   *   not retain references to templates instanced by the user, it is the\n   *   templatize owner's responsibility to forward host property changes into\n   *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n   *    method on the generated class should be called to forward host\n   *   properties into the template to prevent unnecessary property-changed\n   *   notifications. Any properties referenced in the template that are not\n   *   defined in `instanceProps` will be notified up to the template's host\n   *   automatically.\n   * - `instanceProps`: Dictionary of property names that will be added\n   *   to the instance by the templatize owner.  These properties shadow any\n   *   host properties, and changes within the template to these properties\n   *   will result in `notifyInstanceProp` being called.\n   * - `mutableData`: When `true`, the generated class will skip strict\n   *   dirty-checking for objects and arrays (always consider them to be\n   *   \"dirty\").\n   * - `notifyInstanceProp(instance, property, value)`: Called when\n   *   an instance property changes.  Users may choose to call `notifyPath`\n   *   on e.g. the owner to notify the change.\n   * - `parentModel`: When `true`, events handled by declarative event listeners\n   *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n   *   to the template instance that stamped it.  It will also be returned\n   *   from `instance.parentModel` in cases where template instance nesting\n   *   causes an inner model to shadow an outer model.\n   *\n   * Note that the class returned from `templatize` is generated only once\n   * for a given `<template>` using `options` from the first call for that\n   * template, and the cached class is returned for all subsequent calls to\n   * `templatize` for that template.  As such, `options` callbacks should not\n   * close over owner-specific properties since only the first `options` is\n   * used; rather, callbacks are called bound to the `owner`, and so context\n   * needed from the callbacks (such as references to `instances` stamped)\n   * should be stored on the `owner` such that they can be retrieved via `this`.\n   *\n   * @memberof Polymer.Templatize\n   * @param {!HTMLTemplateElement} template Template to templatize\n   * @param {!Polymer_PropertyEffects} owner Owner of the template instances;\n   *   any optional callbacks will be bound to this owner.\n   * @param {Object=} options Options dictionary (see summary for details)\n   * @return {function(new:TemplateInstanceBase)} Generated class bound to the template\n   *   provided\n   * @suppress {invalidCasts}\n   */\n  templatize(template, owner, options) {\n    options = /** @type {!TemplatizeOptions} */(options || {});\n    if (template.__templatizeOwner) {\n      throw new Error('A <template> can only be templatized once');\n    }\n    template.__templatizeOwner = owner;\n    let templateInfo = owner.constructor._parseTemplate(template);\n    // Get memoized base class for the prototypical template, which\n    // includes property effects for binding template & forwarding\n    let baseClass = templateInfo.templatizeInstanceClass;\n    if (!baseClass) {\n      baseClass = createTemplatizerClass(template, templateInfo, options);\n      templateInfo.templatizeInstanceClass = baseClass;\n    }\n    // Host property forwarding must be installed onto template instance\n    addPropagateEffects(template, templateInfo, options);\n    // Subclass base class and add reference for this specific template\n    let klass = class TemplateInstance extends baseClass {};\n    klass.prototype._methodHost = findMethodHost(template);\n    klass.prototype.__dataHost = template;\n    klass.prototype.__templatizeOwner = owner;\n    klass.prototype.__hostProps = templateInfo.hostProps;\n    return /** @type {function(new:TemplateInstanceBase)} */(klass);\n  },\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model is an instance of\n   * `TemplateInstanceBase`, and should be used to manipulate data\n   * associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @memberof Polymer.Templatize\n   * @param {HTMLTemplateElement} template The model will be returned for\n   *   elements stamped from this template\n   * @param {Node} node Node for which to return a template model.\n   * @return {TemplateInstanceBase} Template instance representing the\n   *   binding scope for the element\n   */\n  modelForElement(template, node) {\n    let model;\n    while (node) {\n      // An element with a __templatizeInstance marks the top boundary\n      // of a scope; walk up until we find one, and then ensure that\n      // its __dataHost matches `this`, meaning this dom-repeat stamped it\n      if ((model = node.__templatizeInstance)) {\n        // Found an element stamped by another template; keep walking up\n        // from its __dataHost\n        if (model.__dataHost != template) {\n          node = model.__dataHost;\n        } else {\n          return model;\n        }\n      } else {\n        // Still in a template scope, keep going up until\n        // a __templatizeInstance is found\n        node = node.parentNode;\n      }\n    }\n    return null;\n  }\n};\n\nexport { Templatize };\nexport { TemplateInstanceBase };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/templatize.js","import './boot.js';\nimport './mixin.js';\nimport './async.js';\n\n/** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\nlet AsyncModule; // eslint-disable-line no-unused-vars\n\n/**\n * @summary Collapse multiple callbacks into one invocation after a timer.\n * @memberof Polymer\n */\nclass Debouncer {\n  constructor() {\n    this._asyncModule = null;\n    this._callback = null;\n    this._timer = null;\n  }\n  /**\n   * Sets the scheduler; that is, a module with the Async interface,\n   * a callback and optional arguments to be passed to the run function\n   * from the async module.\n   *\n   * @param {!AsyncModule} asyncModule Object with Async interface.\n   * @param {function()} callback Callback to run.\n   */\n  setConfig(asyncModule, callback) {\n    this._asyncModule = asyncModule;\n    this._callback = callback;\n    this._timer = this._asyncModule.run(() => {\n      this._timer = null;\n      this._callback();\n    });\n  }\n  /**\n   * Cancels an active debouncer and returns a reference to itself.\n   */\n  cancel() {\n    if (this.isActive()) {\n      this._asyncModule.cancel(this._timer);\n      this._timer = null;\n    }\n  }\n  /**\n   * Flushes an active debouncer and returns a reference to itself.\n   */\n  flush() {\n    if (this.isActive()) {\n      this.cancel();\n      this._callback();\n    }\n  }\n  /**\n   * Returns true if the debouncer is active.\n   *\n   * @return {boolean} True if active.\n   */\n  isActive() {\n    return this._timer != null;\n  }\n/**\n * Creates a debouncer if no debouncer is passed as a parameter\n * or it cancels an active debouncer otherwise. The following\n * example shows how a debouncer can be called multiple times within a\n * microtask and \"debounced\" such that the provided callback function is\n * called once. Add this method to a custom element:\n *\n * _debounceWork() {\n *   this._debounceJob = Polymer.Debouncer.debounce(this._debounceJob,\n *       Polymer.Async.microTask, () => {\n *     this._doWork();\n *   });\n * }\n *\n * If the `_debounceWork` method is called multiple times within the same\n * microtask, the `_doWork` function will be called only once at the next\n * microtask checkpoint.\n *\n * Note: In testing it is often convenient to avoid asynchrony. To accomplish\n * this with a debouncer, you can use `Polymer.enqueueDebouncer` and\n * `Polymer.flush`. For example, extend the above example by adding\n * `Polymer.enqueueDebouncer(this._debounceJob)` at the end of the\n * `_debounceWork` method. Then in a test, call `Polymer.flush` to ensure\n * the debouncer has completed.\n *\n * @param {Debouncer?} debouncer Debouncer object.\n * @param {!AsyncModule} asyncModule Object with Async interface\n * @param {function()} callback Callback to run.\n * @return {!Debouncer} Returns a debouncer object.\n */\n  static debounce(debouncer, asyncModule, callback) {\n    if (debouncer instanceof Debouncer) {\n      debouncer.cancel();\n    } else {\n      debouncer = new Debouncer();\n    }\n    debouncer.setConfig(asyncModule, callback);\n    return debouncer;\n  }\n}\n\nexport { Debouncer };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/debounce.js","import './boot.js';\n\nlet debouncerQueue = [];\n\nexport const enqueueDebouncer = function(debouncer) {\n  debouncerQueue.push(debouncer);\n};\n\nfunction flushDebouncers() {\n  const didFlush = Boolean(debouncerQueue.length);\n  while (debouncerQueue.length) {\n    try {\n      debouncerQueue.shift().flush();\n    } catch(e) {\n      setTimeout(() => {\n        throw e;\n      });\n    }\n  }\n  return didFlush;\n}\n\nexport const flush = function() {\n  let shadyDOM, debouncers;\n  do {\n    shadyDOM = window.ShadyDOM && ShadyDOM.flush();\n    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {\n      window.ShadyCSS.ScopingShim.flush();\n    }\n    debouncers = flushDebouncers();\n  } while (shadyDOM || debouncers);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/@polymer/polymer/lib/utils/flush.js"],"sourceRoot":""}